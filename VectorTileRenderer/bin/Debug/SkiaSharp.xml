<doc>
    <assembly>
        <name>SkiaSharp</name>
    </assembly>
    <members>
        <member name="T:SkiaSharp.GRBackend">
            <summary>Possible 3D APIs that may be used by Ganesh.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.GRBackend.OpenGL">
            <summary>Use the OpenGL 3D backend.</summary>
        </member>
        <member name="F:SkiaSharp.GRBackend.Vulkan">
            <summary>Use the Vulkan 3D backend.</summary>
        </member>
        <member name="T:SkiaSharp.GRBackendRenderTargetDesc">
            <summary>Wrap an existing render target created by the client in the 3D API with an underlying GRRenderTarget object.</summary>
            <remarks>
                <para>The client is responsible for ensuring that the underlying 3D API object lives at least as long as the GRRenderTarget object wrapping it.</para>
                <para>We require the client to explicitly provide information about the target, such as width, height, and pixel config rather than querying the 3D API for these values. We expect these properties to be immutable even if the 3D API doesn't require this (OpenGL).</para>
            </remarks>
        </member>
        <member name="P:SkiaSharp.GRBackendRenderTargetDesc.Config">
            <summary>Gets or sets the color format.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.GRBackendRenderTargetDesc.Height">
            <summary>Gets or sets the height in pixels.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.GRBackendRenderTargetDesc.Origin">
            <summary>Gets or sets the pixel origin.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.GRBackendRenderTargetDesc.Rect">
            <summary>Gets a rectangle with the current width and height.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.GRBackendRenderTargetDesc.RenderTargetHandle">
            <summary>Gets or sets the handle to the 3D API object.</summary>
            <value>
                <para />
            </value>
            <remarks>When using OpenGL, it is the FBO ID.</remarks>
        </member>
        <member name="P:SkiaSharp.GRBackendRenderTargetDesc.SampleCount">
            <summary>Gets or sets the number of samples per pixel.</summary>
            <value>
                <para />
            </value>
            <remarks>This is used to influence decisions about applying other forms of anti-aliasing.</remarks>
        </member>
        <member name="P:SkiaSharp.GRBackendRenderTargetDesc.Size">
            <summary>Gets the current size of the 3D API object.</summary>
            <value>
                <para />
            </value>
            <remarks />
        </member>
        <member name="P:SkiaSharp.GRBackendRenderTargetDesc.StencilBits">
            <summary>Gets or sets the number of bits of stencil per-pixel.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.GRBackendRenderTargetDesc.Width">
            <summary>Gets or sets the width in pixels.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.GRBackendState">
            <summary>Various flags for the <see cref="M:SkiaSharp.GRContext.ResetContext" /> method.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.GRBackendState.All">
            <summary>Reset all the context state for any backend.</summary>
        </member>
        <member name="F:SkiaSharp.GRBackendState.None">
            <summary>Reset nothing.</summary>
        </member>
        <member name="T:SkiaSharp.GRBackendTextureDesc">
            <summary>Wrap an existing texture created by the client in the 3D API with an underlying GRTexture object.</summary>
            <remarks>
                <para>The client is responsible for ensuring that the texture lives at least as long as the GRTexture object wrapping it. </para>
                <para>We require the client to explicitly provide information about the texture, such as width, height, and pixel config, rather than querying the 3D API for these values. We expect these to be immutable even if the 3D API doesn't require this (OpenGL).</para>
                <para>Textures that are also render targets are supported as well. Any ancillary 3D API (stencil buffer, FBO id, etc) objects necessary will be managed.</para>
            </remarks>
        </member>
        <member name="P:SkiaSharp.GRBackendTextureDesc.Config">
            <summary>Gets or sets the color format.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.GRBackendTextureDesc.Flags">
            <summary>Gets or sets additional options about the texture.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.GRBackendTextureDesc.Height">
            <summary>Gets or sets the height in pixels.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.GRBackendTextureDesc.Origin">
            <summary>Gets or sets the pixel origin.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.GRBackendTextureDesc.SampleCount">
            <summary>Gets or sets the number of samples per pixel.</summary>
            <value>
                <para />
            </value>
            <remarks>If the render target flag is set and sample count is greater than 0, then an MSAA buffer that resolves to the texture will be created.</remarks>
        </member>
        <member name="P:SkiaSharp.GRBackendTextureDesc.TextureHandle">
            <summary>Gets or sets the handle to the 3D API object.</summary>
            <value>
                <para />
            </value>
            <remarks>When using OpenGL, it is the Texture ID.</remarks>
        </member>
        <member name="P:SkiaSharp.GRBackendTextureDesc.Width">
            <summary>Gets or sets the width in pixels.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.GRBackendTextureDescFlags">
            <summary>Additional options for a backend texture.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.GRBackendTextureDescFlags.None">
            <summary>No flags enabled.</summary>
        </member>
        <member name="F:SkiaSharp.GRBackendTextureDescFlags.RenderTarget">
            <summary>Indicates that the texture is also a render target.</summary>
        </member>
        <member name="T:SkiaSharp.GRContext">
            <summary>Represents an underlying backend 3D API context.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.GRContext.AbandonContext(System.Boolean)">
            <param name="releaseResources">Use true to indicate that the underlying 3D context is not yet lost and the <see cref="T:SkiaSharp.GRContext" /> will cleanup all allocated resources before returning. Using false will ensure that the destructors of the <see cref="T:SkiaSharp.GRContext" /> and any of its created resource objects will not make backend 3D API calls.</param>
            <summary>Abandons all GPU resources and assumes the underlying backend 3D API context is not longer usable. After returning it will assume that the underlying context may no longer be valid.</summary>
            <remarks />
        </member>
        <member name="M:SkiaSharp.GRContext.Create(SkiaSharp.GRBackend)">
            <param name="backend">The backend to use.</param>
            <summary>Creates a <see cref="T:SkiaSharp.GRContext" /> for a backend context using the default interface for the specified backend.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.GRContext" /> if one was created, otherwise null.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.GRContext.Create(SkiaSharp.GRBackend,SkiaSharp.GRGlInterface)">
            <param name="backend">The backend to use.</param>
            <param name="backendContext">The backend interface to use.</param>
            <summary>Creates a <see cref="T:SkiaSharp.GRContext" /> for a backend context.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.GRContext" /> if one was created, otherwise null.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.GRContext.Create(SkiaSharp.GRBackend,System.IntPtr)">
            <param name="backend">The backend to use.</param>
            <param name="backendContext">The backend interface to use.</param>
            <summary>Creates a <see cref="T:SkiaSharp.GRContext" /> for a backend context.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.GRContext" /> if one was created, otherwise null.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.GRContext.Create(SkiaSharp.GRBackend,SkiaSharp.GRGlInterface,SkiaSharp.GRContextOptions)">
            <param name="backend">The backend to use.</param>
            <param name="backendContext">The backend interface to use.</param>
            <param name="options">The context-creation options.</param>
            <summary>Creates a <see cref="T:SkiaSharp.GRContext" /> for a backend context.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.GRContext" /> if one was created, otherwise null.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.GRContext.Create(SkiaSharp.GRBackend,System.IntPtr,SkiaSharp.GRContextOptions)">
            <param name="backend">The backend to use.</param>
            <param name="backendContext">The backend interface to use.</param>
            <param name="options">The context-creation options.</param>
            <summary>Creates a <see cref="T:SkiaSharp.GRContext" /> for a backend context.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.GRContext" /> if one was created, otherwise null.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.GRContext.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.GRContext.Flush">
            <summary>Call to ensure all drawing to the context has been issued to the underlying 3D API.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.GRContext.GetRecommendedSampleCount(SkiaSharp.GRPixelConfig,System.Single)">
            <param name="config">The configuration of the render target.</param>
            <param name="dpi">The display density in dots per inch.</param>
            <summary>Returns the recommended sample count for a render target when using this context.</summary>
            <returns>Returns the recommended sample count.</returns>
            <remarks>May return 0 if MSAA is not supported or recommended to be used by default.</remarks>
        </member>
        <member name="M:SkiaSharp.GRContext.GetResourceCacheLimits(System.Int32@,System.Int64@)">
            <param name="maxResources">The maximum number of resources that can be held in the cache.</param>
            <param name="maxResourceBytes">The maximum number of bytes of video memory that can be held in the cache.</param>
            <summary>Returns the current GPU resource cache limits.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.GRContext.GetResourceCacheUsage(System.Int32@,System.Int64@)">
            <param name="maxResources">The number of resources that are held in the cache.</param>
            <param name="maxResourceBytes">The total number of bytes of video memory held in the cache.</param>
            <summary>Returns the current GPU resource cache usage.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.GRContext.ResetContext(SkiaSharp.GRBackendState)">
            <param name="state">Flags to control what is reset.</param>
            <summary>Informs the context that the state was modified and should resend.</summary>
            <remarks>The context normally assumes that no outsider is setting state within the underlying 3D API's context/device/whatever. This method shouldn’t be called frequently for good performance.</remarks>
        </member>
        <member name="M:SkiaSharp.GRContext.ResetContext(SkiaSharp.GRGlBackendState)">
            <param name="state">Flags to control what is reset.</param>
            <summary>Informs the context that the state was modified and should resend.</summary>
            <remarks>The context normally assumes that no outsider is setting state within the underlying 3D API's context/device/whatever. This method shouldn’t be called frequently for good performance.</remarks>
        </member>
        <member name="M:SkiaSharp.GRContext.ResetContext(System.UInt32)">
            <param name="state">Flags to control what is reset.</param>
            <summary>Informs the context that the state was modified and should resend.</summary>
            <remarks>The context normally assumes that no outsider is setting state within the underlying 3D API's context/device/whatever. This method shouldn’t be called frequently for good performance.</remarks>
        </member>
        <member name="M:SkiaSharp.GRContext.SetResourceCacheLimits(System.Int32,System.Int64)">
            <param name="maxResources">The maximum number of resources that can be held in the cache.</param>
            <param name="maxResourceBytes">The maximum number of bytes of video memory that can be held in the cache.</param>
            <summary>Specify the GPU resource cache limits.</summary>
            <remarks>If the current cache exceeds either of these, it will be purged (LRU) to keep the cache within these limits.</remarks>
        </member>
        <member name="T:SkiaSharp.GRContextOptions">
            <summary>Represents the collection of options for the construction of a context.</summary>
            <remarks />
        </member>
        <member name="P:SkiaSharp.GRContextOptions.AllowPathMaskCaching">
            <summary>Gets or sets a value indicating whether to allow path mask textures to be cached.</summary>
            <value>
                <para />
            </value>
            <remarks>This is only really useful if paths are commonly rendered at the same scale and fractional translation. Default is false.</remarks>
        </member>
        <member name="P:SkiaSharp.GRContextOptions.AvoidStencilBuffers">
            <summary>Gets or sets a value indicating whether to avoid allocating stencil buffers.</summary>
            <value>
                <para />
            </value>
            <remarks>Bugs on certain drivers cause stencil buffers to leak. This flag causes Skia to avoid allocating stencil buffers and use alternate rasterization paths, avoiding the leak.</remarks>
        </member>
        <member name="P:SkiaSharp.GRContextOptions.BufferMapThreshold">
            <summary>Gets or sets the threshold, in bytes, above which a buffer mapping API will be used to map vertex and index buffers to CPU memory in order to update them.</summary>
            <value>
                <para />
            </value>
            <remarks>A value of -1 means the context should deduce the optimal value for this platform. Default is -1.</remarks>
        </member>
        <member name="P:SkiaSharp.GRContextOptions.Default">
            <summary>Gets a new instance with the values set to the defaults.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.GRContextOptions.DisableGpuYuvConversion">
            <summary>Gets or sets a value indicating whether the GPU will be used to perform YUV -&gt; RGB conversion when generating textures from codec-backed images.</summary>
            <value>
                <para />
            </value>
            <remarks>Default is false.</remarks>
        </member>
        <member name="P:SkiaSharp.GRContextOptions.DoManualMipmapping">
            <summary>Gets or sets a value indicating whether to construct mipmaps manually, via repeated downsampling draw-calls.</summary>
            <value>
                <para />
            </value>
            <remarks>This is used when the driver's implementation (glGenerateMipmap) contains bugs. This requires mipmap level and LOD control (ie desktop or ES3). Default is false.</remarks>
        </member>
        <member name="P:SkiaSharp.GRContextOptions.EnableInstancedRendering">
            <summary>Gets or sets a value indicating whether to enable instanced rendering as long as all required functionality is supported by the hardware.</summary>
            <value>
                <para />
            </value>
            <remarks>Instanced rendering is still experimental at this point and disabled by default. Default is false.</remarks>
        </member>
        <member name="P:SkiaSharp.GRContextOptions.GlyphCacheTextureMaximumBytes">
            <summary>Gets or sets the maximum size of cache textures used for the SkiaSharp Glyph cache.</summary>
            <value>
                <para />
            </value>
            <remarks>Default is 2048 * 1024 * 4.</remarks>
        </member>
        <member name="P:SkiaSharp.GRContextOptions.GpuPathRenderers">
            <summary>Gets or sets the GPU path renderers.</summary>
            <value>
                <para />
            </value>
            <remarks>Default is <see cref="F:SkiaSharp.GRContextOptionsGpuPathRenderers.All" />.</remarks>
        </member>
        <member name="P:SkiaSharp.GRContextOptions.ImmediateMode">
            <summary>Gets or sets a value indicating whether the context operates in immediate mode.</summary>
            <value>
                <para />
            </value>
            <remarks>The context will issue all draws to the backend API immediately. Intended to ease debugging. Default is false.</remarks>
        </member>
        <member name="P:SkiaSharp.GRContextOptions.MaxTextureSizeOverride">
            <summary>Gets or sets the maximum size of a texture.</summary>
            <value>
                <para />
            </value>
            <remarks>An option to override feature detection using backend API queries. The override can only reduce the feature set or limits, never increase them beyond the detected values. Default is 0x7FFFFFFF.</remarks>
        </member>
        <member name="P:SkiaSharp.GRContextOptions.MaxTileSizeOverride">
            <summary>Gets or sets the maximum size (if non-zero) of a tile for software-backed images and bitmaps rendered by the device.</summary>
            <value>
                <para />
            </value>
            <remarks>An option to override feature detection using backend API queries. The override can only reduce the feature set or limits, never increase them beyond the detected values. Default is 0.</remarks>
        </member>
        <member name="P:SkiaSharp.GRContextOptions.RequireDecodeDisableForSrgb">
            <summary>Gets or sets a value indicating whether sRGB support will be disabled if sRGB decoding cannot be enabled.</summary>
            <value>
                <para />
            </value>
            <remarks>Default is true.</remarks>
        </member>
        <member name="P:SkiaSharp.GRContextOptions.SuppressDualSourceBlending">
            <summary>Gets or sets a value indicating whether to suppress dual source blending.</summary>
            <value>
                <para />
            </value>
            <remarks>Default is false.</remarks>
        </member>
        <member name="P:SkiaSharp.GRContextOptions.SuppressPathRendering">
            <summary>Gets or sets a value indicating whether the caps will never report driver support for path rendering.</summary>
            <value>
                <para />
            </value>
            <remarks>Default is false.</remarks>
        </member>
        <member name="P:SkiaSharp.GRContextOptions.SuppressPrints">
            <summary>Gets or sets a value indicating whether to suppress prints for the <see cref="T:SkiaSharp.GRContext" />.</summary>
            <value>
                <para />
            </value>
            <remarks>Default is false.</remarks>
        </member>
        <member name="P:SkiaSharp.GRContextOptions.UseDrawInsteadOfPartialRenderTargetWrite">
            <summary>Gets or sets a value indicating whether to avoid partial writes.</summary>
            <value>
                <para />
            </value>
            <remarks>Some GPUs have problems with partial writes of the render target. Default is false.</remarks>
        </member>
        <member name="P:SkiaSharp.GRContextOptions.UseShaderSwizzling">
            <summary>Gets or sets a value indicating whether to do all swizzling manually in the shader and don't rely on extensions to do swizzling.</summary>
            <value>
                <para />
            </value>
            <remarks>Default is false.</remarks>
        </member>
        <member name="P:SkiaSharp.GRContextOptions.WireframeMode">
            <summary>Gets or sets a value indicating whether to render everything in wireframe.</summary>
            <value>
                <para />
            </value>
            <remarks>Default is false.</remarks>
        </member>
        <member name="T:SkiaSharp.GRContextOptionsGpuPathRenderers">
            <summary>Various GPU path renderers for use with <see cref="T:SkiaSharp.GRContextOptions" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.GRContextOptionsGpuPathRenderers.AaConvex">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.GRContextOptionsGpuPathRenderers.AaHairline">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.GRContextOptionsGpuPathRenderers.AaLinearizing">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.GRContextOptionsGpuPathRenderers.All">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.GRContextOptionsGpuPathRenderers.DashLine">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.GRContextOptionsGpuPathRenderers.Default">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.GRContextOptionsGpuPathRenderers.Msaa">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.GRContextOptionsGpuPathRenderers.None">
            <summary>Always use sofware masks.</summary>
        </member>
        <member name="F:SkiaSharp.GRContextOptionsGpuPathRenderers.Small">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.GRContextOptionsGpuPathRenderers.StencilAndCover">
            <summary>To be added.</summary>
        </member>
        <member name="F:SkiaSharp.GRContextOptionsGpuPathRenderers.Tessellating">
            <summary>To be added.</summary>
        </member>
        <member name="T:SkiaSharp.GRGlBackendState">
            <summary>Various flags for the <see cref="M:SkiaSharp.GRContext.ResetContext" /> method when using a <see cref="F:SkiaSharp.GRBackend.OpenGL" /> backend.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.GRGlBackendState.All">
            <summary>Reset all the context state.</summary>
        </member>
        <member name="F:SkiaSharp.GRGlBackendState.Blend">
            <summary>Reset the blend state.</summary>
        </member>
        <member name="F:SkiaSharp.GRGlBackendState.FixedFunction">
            <summary>Reset the fixed funxtion state.</summary>
        </member>
        <member name="F:SkiaSharp.GRGlBackendState.Misc">
            <summary>Reset miscellaneous state.</summary>
        </member>
        <member name="F:SkiaSharp.GRGlBackendState.MSAAEnable">
            <summary>Reset the MSAA state</summary>
        </member>
        <member name="F:SkiaSharp.GRGlBackendState.None">
            <summary>Reset nothing.</summary>
        </member>
        <member name="F:SkiaSharp.GRGlBackendState.PathRendering">
            <summary>Reset the path rendering state.</summary>
        </member>
        <member name="F:SkiaSharp.GRGlBackendState.PixelStore">
            <summary>Reset the pixel store state.</summary>
        </member>
        <member name="F:SkiaSharp.GRGlBackendState.Program">
            <summary>Reset the program state.</summary>
        </member>
        <member name="F:SkiaSharp.GRGlBackendState.RenderTarget">
            <summary>Reset the render target.</summary>
        </member>
        <member name="F:SkiaSharp.GRGlBackendState.Stencil">
            <summary>Reset the stencil state.</summary>
        </member>
        <member name="F:SkiaSharp.GRGlBackendState.TextureBinding">
            <summary>Reset the texture binding state.</summary>
        </member>
        <member name="F:SkiaSharp.GRGlBackendState.Vertex">
            <summary>Reset the vertex buffer state.</summary>
        </member>
        <member name="F:SkiaSharp.GRGlBackendState.View">
            <summary>Reset the scissor and viewport state.</summary>
        </member>
        <member name="T:SkiaSharp.GRGlBackendTextureDesc">
            <summary>Wrap an existing OpenGL texture created by the client in the 3D API with an underlying GRTexture object.</summary>
            <remarks>
                <para>The client is responsible for ensuring that the texture lives at least as long as the GRTexture object wrapping it. </para>
                <para>We require the client to explicitly provide information about the texture, such as width, height, and pixel config, rather than querying the 3D API for these values. We expect these to be immutable even if the 3D API doesn't require this (OpenGL).</para>
                <para>Textures that are also render targets are supported as well. Any ancillary 3D API (stencil buffer, FBO id, etc) objects necessary will be managed.</para>
            </remarks>
        </member>
        <member name="P:SkiaSharp.GRGlBackendTextureDesc.Config">
            <summary>Gets or sets the color format.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.GRGlBackendTextureDesc.Flags">
            <summary>Gets or sets additional options about the texture.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.GRGlBackendTextureDesc.Height">
            <summary>Gets or sets the height in pixels.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.GRGlBackendTextureDesc.Origin">
            <summary>Gets or sets the pixel origin.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.GRGlBackendTextureDesc.SampleCount">
            <summary>Gets or sets the number of samples per pixel.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.GRGlBackendTextureDesc.TextureHandle">
            <summary>Gets or sets the handle to the OpenGL texture.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.GRGlBackendTextureDesc.Width">
            <summary>Gets or sets the width in pixels.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.GRGlGetProcDelegate">
            <param name="context">The user data passed to the assembling methods of <see cref="T:SkiaSharp.GRGlInterface" />.</param>
            <param name="name">The name of the endpoint to locate.</param>
            <summary>The delegate that is used when locating the various endpoints of an OpenGL implementation.</summary>
            <returns />
            <remarks />
        </member>
        <member name="T:SkiaSharp.GRGlInterface">
            <summary>The <see cref="T:SkiaSharp.GRGlInterface" /> is used to interface with OpenGL.</summary>
            <remarks>A <see cref="T:SkiaSharp.GRContext" /> does not interact directly with the underlying backend, instead it uses an OpenGL interface.</remarks>
        </member>
        <member name="M:SkiaSharp.GRGlInterface.AssembleAngleInterface(SkiaSharp.GRGlGetProcDelegate)">
            <param name="get">The delegate used to locate entry points.</param>
            <summary>Assemble an ANGLE <see cref="T:SkiaSharp.GRGlInterface" /> using the specified delegate.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.GRGlInterface" />, or null if one could not be created.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.GRGlInterface.AssembleAngleInterface(System.Object,SkiaSharp.GRGlGetProcDelegate)">
            <param name="context">The user data to use in the delegate.</param>
            <param name="get">The delegate used to locate entry points.</param>
            <summary>Assemble an ANGLE <see cref="T:SkiaSharp.GRGlInterface" /> using the specified context and delegate.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.GRGlInterface" />, or null if one could not be created.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.GRGlInterface.AssembleGlesInterface(SkiaSharp.GRGlGetProcDelegate)">
            <param name="get">The delegate used to locate entry points.</param>
            <summary>Assemble an OpenGL ES <see cref="T:SkiaSharp.GRGlInterface" /> using the specified delegate.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.GRGlInterface" />, or null if one could not be created.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.GRGlInterface.AssembleGlesInterface(System.Object,SkiaSharp.GRGlGetProcDelegate)">
            <param name="context">The user data to use in the delegate.</param>
            <param name="get">The delegate used to locate entry points.</param>
            <summary>Assemble an OpenGL ES <see cref="T:SkiaSharp.GRGlInterface" /> using the specified context and delegate.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.GRGlInterface" />, or null if one could not be created.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.GRGlInterface.AssembleGlInterface(SkiaSharp.GRGlGetProcDelegate)">
            <param name="get">The delegate used to locate entry points.</param>
            <summary>Assemble an OpenGL <see cref="T:SkiaSharp.GRGlInterface" /> using the specified delegate.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.GRGlInterface" />, or null if one could not be created.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.GRGlInterface.AssembleGlInterface(System.Object,SkiaSharp.GRGlGetProcDelegate)">
            <param name="context">The user data to use in the delegate.</param>
            <param name="get">The delegate used to locate entry points.</param>
            <summary>Assemble an OpenGL <see cref="T:SkiaSharp.GRGlInterface" /> using the specified context and delegate.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.GRGlInterface" />, or null if one could not be created.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.GRGlInterface.AssembleInterface(SkiaSharp.GRGlGetProcDelegate)">
            <param name="get">The delegate used to locate entry points.</param>
            <summary>Assemble an platform-specific <see cref="T:SkiaSharp.GRGlInterface" /> using the specified delegate.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.GRGlInterface" />, or null if one could not be created.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.GRGlInterface.AssembleInterface(System.Object,SkiaSharp.GRGlGetProcDelegate)">
            <param name="context">The user data to use in the delegate.</param>
            <param name="get">The delegate used to locate entry points.</param>
            <summary>Assemble an platform-specific <see cref="T:SkiaSharp.GRGlInterface" /> using the specified context and delegate.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.GRGlInterface" />, or null if one could not be created.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.GRGlInterface.Clone">
            <summary>Returns a copy of the current interface.</summary>
            <returns>Returns a copy.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.GRGlInterface.CreateDefaultInterface">
            <summary>Create a <see cref="T:SkiaSharp.GRGlInterface" /> using the platform-default OpenGL implementation.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.GRGlInterface" />, or null if one could not be created.</returns>
            <remarks>On Windows, this is typically ANGLE, on mobile it is typically OpenGL ES and on desktop it is typically OpenGL.</remarks>
        </member>
        <member name="M:SkiaSharp.GRGlInterface.CreateNativeAngleInterface">
            <summary>Create a <see cref="T:SkiaSharp.GRGlInterface" /> using the ANGLE OpenGL implementation.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.GRGlInterface" />, or null if one could not be created.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.GRGlInterface.CreateNativeGlInterface">
            <summary>Create a <see cref="T:SkiaSharp.GRGlInterface" /> using the platform OpenGL implementation.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.GRGlInterface" />, or null if one could not be created.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.GRGlInterface.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.GRGlInterface.HasExtension(System.String)">
            <param name="extension">The extension to check for.</param>
            <summary>Checks to see if the underlying OpenGL backend has the specified extension.</summary>
            <returns>Returns true if the backend has the extension, otherwise false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.GRGlInterface.Validate">
            <summary>Validates that the <see cref="T:SkiaSharp.GRGlInterface" /> supports its advertised standard.</summary>
            <returns>Returns true if all the entry points are specified, and any required extensions exist.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.GRGlTextureInfo">
            <summary>Represents a handle to an existing OpenGL texture.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.GRGlTextureInfo.Id">
            <summary>Gets or sets the OpenGL texture ID.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.GRGlTextureInfo.Target">
            <summary>Gets or sets the OpenGL texture target.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.GRPixelConfig">
            <summary>Various pixel configurations supported.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.GRPixelConfig.Alpha8">
            <summary>8-bit Alpha.</summary>
        </member>
        <member name="F:SkiaSharp.GRPixelConfig.AlphaHalf">
            <summary>Single 16-bit float channel.</summary>
        </member>
        <member name="F:SkiaSharp.GRPixelConfig.Bgra8888">
            <summary>Premultiplied 32-bit channel. Byte order is BGRA.</summary>
        </member>
        <member name="F:SkiaSharp.GRPixelConfig.Gray8">
            <summary>8-bit grayscale color channel.</summary>
        </member>
        <member name="F:SkiaSharp.GRPixelConfig.Rgb565">
            <summary>16-bit channel. Byte order is RGB.</summary>
        </member>
        <member name="F:SkiaSharp.GRPixelConfig.Rgba4444">
            <summary>Premultiplied 16-bit channel. Byte order is RGBA.</summary>
        </member>
        <member name="F:SkiaSharp.GRPixelConfig.Rgba8888">
            <summary>Premultiplied 32-bit channel. Byte order is RGBA.</summary>
        </member>
        <member name="F:SkiaSharp.GRPixelConfig.Rgba8888SInt">
            <summary>Premultiplied 32-bit (signed) channel. Byte order is BGRA.</summary>
        </member>
        <member name="F:SkiaSharp.GRPixelConfig.RgbaFloat">
            <summary>32-bit channel. Byte order is RGBA.</summary>
        </member>
        <member name="F:SkiaSharp.GRPixelConfig.RgbaHalf">
            <summary>16-bit channel. Byte order is RGBA.</summary>
        </member>
        <member name="F:SkiaSharp.GRPixelConfig.RgFloat">
            <summary>32-bit channel. Byte order is RG.</summary>
        </member>
        <member name="F:SkiaSharp.GRPixelConfig.Sbgra8888">
            <summary>Premultiplied and sRGB. Byte order is BGRA.</summary>
        </member>
        <member name="F:SkiaSharp.GRPixelConfig.Srgba8888">
            <summary>Premultiplied and sRGB. Byte order is RGBA.</summary>
        </member>
        <member name="F:SkiaSharp.GRPixelConfig.Unknown">
            <summary>The pixel configuration is not known or not set.</summary>
        </member>
        <member name="T:SkiaSharp.GRSurfaceOrigin">
            <summary>The origin of a texture.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.GRSurfaceOrigin.BottomLeft">
            <summary>Origin is at the bottom-left.</summary>
        </member>
        <member name="F:SkiaSharp.GRSurfaceOrigin.TopLeft">
            <summary>Origin is at the top-left.</summary>
        </member>
        <member name="T:SkiaSharp.SK3dView">
            <summary>A utility class that can be used to create 3D transformations.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SK3dView">
            <summary>Creates a new instance of <see cref="T:SkiaSharp.SK3dView" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SK3dView.ApplyToCanvas(SkiaSharp.SKCanvas)">
            <param name="canvas">The canvas to apply the transformation to.</param>
            <summary>Applies the current transformation to the specfied canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SK3dView.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SK3dView.DotWithNormal(System.Single,System.Single,System.Single)">
            <param name="dx">The x-axis of the normal.</param>
            <param name="dy">The y-axis of the normal.</param>
            <param name="dz">The z-axis of the normal.</param>
            <summary>Returns the dot product of the current transformation and the specified normal.</summary>
            <returns>Returns the dot product.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SK3dView.GetMatrix(SkiaSharp.SKMatrix@)">
            <param name="matrix">The matrix to store the transformation.</param>
            <summary>Stores the current transformation in the specified matrix.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SK3dView.Matrix">
            <summary>Gets the current transformation as a matrix.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SK3dView.Restore">
            <summary>Restores the transformation to the last saved with <see cref="M:SkiaSharp.SK3dView.Save" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SK3dView.RotateXDegrees(System.Single)">
            <param name="degrees">The degrees to rotate by.</param>
            <summary>Rotates the transformation along the x-axis by the specified degrees.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SK3dView.RotateXRadians(System.Single)">
            <param name="radians">The radians to rotate by.</param>
            <summary>Rotates the transformation along the x-axis by the specified radians.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SK3dView.RotateYDegrees(System.Single)">
            <param name="degrees">The degrees to rotate by.</param>
            <summary>Rotates the transformation along the y-axis by the specified degrees.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SK3dView.RotateYRadians(System.Single)">
            <param name="radians">The radians to rotate by.</param>
            <summary>Rotates the transformation along the y-axis by the specified radians.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SK3dView.RotateZDegrees(System.Single)">
            <param name="degrees">The degrees to rotate by.</param>
            <summary>Rotates the transformation along the z-axis by the specified degrees.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SK3dView.RotateZRadians(System.Single)">
            <param name="radians">The radians to rotate by.</param>
            <summary>Rotates the transformation along the z-axis by the specified radians.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SK3dView.Save">
            <summary>Saves the current transformation so that it can be restored later using <see cref="M:SkiaSharp.SK3dView.Restore" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SK3dView.Translate(System.Single,System.Single,System.Single)">
            <param name="x">The amount to translate by along the x-axis.</param>
            <param name="y">The amount to translate by along the y-axis.</param>
            <param name="z">The amount to translate by along the z-axis.</param>
            <summary>Translates the transformation.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SK3dView.TranslateX(System.Single)">
            <param name="x">The amount to translate by.</param>
            <summary>Translates the transformation along the x-axis.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SK3dView.TranslateY(System.Single)">
            <param name="y">The amount to translate by.</param>
            <summary>Translates the transformation along the y-axis.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SK3dView.TranslateZ(System.Single)">
            <param name="z">The amount to translate by.</param>
            <summary>Translates the transformation along the z-axis.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKAbstractManagedStream">
            <summary>Represents a <see cref="T:SkiaSharp.SKStreamAsset" /> (a seekable, rewindable Skia stream).</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKAbstractManagedStream">
            <summary>Creates a new instance of <see cref="T:SkiaSharp.SKAbstractManagedStream" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKAbstractManagedStream(System.Boolean)">
            <param name="owns">The value indicating whether this object should destroy the underlying native object.</param>
            <summary>Creates a new instance of <see cref="T:SkiaSharp.SKAbstractManagedStream" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKAbstractManagedStream.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKAbstractManagedStream.OnCreateNew">
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to copy the current stream.</summary>
            <returns>Returns a pointer to the new <see cref="T:SkiaSharp.SKStreamAsset" /> instance.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKAbstractManagedStream.OnGetLength">
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to return the total length of the stream.</summary>
            <returns>Returns the total length of the stream.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKAbstractManagedStream.OnGetPosition">
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to get the current position in the stream</summary>
            <returns>Returns the current position in the stream.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKAbstractManagedStream.OnHasLength">
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to indicate whether this stream can report it's total length.</summary>
            <returns>Returns a value indicating whether this stream can report it's total length.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKAbstractManagedStream.OnHasPosition">
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to indicate whether this stream can report it's current position.</summary>
            <returns>Returns a value indicating whether this stream can report it's current position.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKAbstractManagedStream.OnIsAtEnd">
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to indicate whether all the bytes in the stream have been read.</summary>
            <returns>Returns a value indicating whether all the bytes in the stream have been read.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKAbstractManagedStream.OnMove(System.Int32)">
            <param name="offset">The relative offset.</param>
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to seek to a relative offset.</summary>
            <returns>Returns true if seeking is supported and the seek was successful, otherwise false.</returns>
            <remarks>If an attempt is made to move to a position outside the stream, the position must be set to the closest point within the stream (beginning or end).</remarks>
        </member>
        <member name="M:SkiaSharp.SKAbstractManagedStream.OnPeek(System.IntPtr,System.IntPtr)">
            <param name="buffer">The buffer to read into.</param>
            <param name="size">The number of bytes to read.</param>
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to copy the specified number of bytes into the specified buffer.</summary>
            <returns>Returns the number of bytes actually peeked/copied.</returns>
            <remarks>The stream’s cursor must be returned to the position before this method was called.</remarks>
        </member>
        <member name="M:SkiaSharp.SKAbstractManagedStream.OnRead(System.IntPtr,System.IntPtr)">
            <param name="buffer">The buffer to read into.</param>
            <param name="size">The number of bytes to read.</param>
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to copy the specified number of bytes into the specified buffer.</summary>
            <returns>Returns the number of bytes actually read.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKAbstractManagedStream.OnRewind">
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to rewind the current stream.</summary>
            <returns>Returns true if the stream is known to be at the beginning after this call returns.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKAbstractManagedStream.OnSeek(System.IntPtr)">
            <param name="position">The absolute position.</param>
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to seek to an absolute position.</summary>
            <returns>Returns true if seeking is supported and the seek was successful, otherwise false.</returns>
            <remarks>If an attempt is made to move to a position outside the stream, the position must be set to the closest point within the stream (beginning or end).</remarks>
        </member>
        <member name="T:SkiaSharp.SKAlphaType">
            <summary>Describes how to interpret the alpha component of a pixel.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKAlphaType.Opaque">
            <summary>All pixels are stored as opaque.</summary>
        </member>
        <member name="F:SkiaSharp.SKAlphaType.Premul">
            <summary>
                <para>All pixels have their alpha premultiplied in their color components.</para>
                <para>This is the natural format for the rendering target pixels.</para>
            </summary>
        </member>
        <member name="F:SkiaSharp.SKAlphaType.Unknown">
            <summary>
                <para />
            </summary>
        </member>
        <member name="F:SkiaSharp.SKAlphaType.Unpremul">
            <summary>
                <para>All pixels have their color components stored without any regard to the alpha. e.g. this is the default configuration for PNG images.</para>
                <para>This alpha-type is ONLY supported for input images. Rendering cannot generate this on output.</para>
            </summary>
        </member>
        <member name="T:SkiaSharp.SKAutoCanvasRestore">
            <summary>Convenience class used to restore the canvas state in a using statement.</summary>
            <remarks>
                <para>This class can be used in a using statement to save the state of the canvas (matrix, clip and draw filter) allowing you to change these components and have them automatically undone by virtue of having the <see cref="M:SkiaSharp.SKAutoCanvasRestore.Dispose" /> method restore the canvas state to the state it was when this instance was created.</para>
                <para />
                <example>
                    <code lang="C#"><![CDATA[SKCanvas canvas = ...;

using (new SKAutoCanvasRestore(canvas)) {
    // perform some transform
    canvas.RotateDegrees(45);

    // draw as usual
    var paint = new SKPaint ();
    canavs.DrawRect (10, 10, 100, 100, paint);

    // automatically restore to original transform
}]]></code>
                </example>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKAutoCanvasRestore(SkiaSharp.SKCanvas)">
            <param name="canvas">The canvas whose state will be preserved.</param>
            <summary>Creates a canvas restore point, invoking the <see cref="M:SkiaSharp.SKCanvas.Save" /> method.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKAutoCanvasRestore(SkiaSharp.SKCanvas,System.Boolean)">
            <param name="canvas">The canvas whose state will be preserved.</param>
            <param name="doSave">Whether or not to invoke <see cref="M:SkiaSharp.SKCanvas.Save" /> method at this point.</param>
            <summary>Creates a canvas restore point.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKAutoCanvasRestore.Dispose">
            <summary>
                <para>Disposes the canvas restore point, restoring the state of the canvas (matrix, clip and draw filter) to the state it was when the object was created.</para>
                <para>This operation will not do anything if you had previously manually called the <see cref="M:SkiaSharp.SKAutoCanvasRestore.Restore" /> method.</para>
            </summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKAutoCanvasRestore.Restore">
            <summary>Restores the canvas restore point, restoring the state of the canvas (matrix, clip and draw filter) to the state it was when the object was creatd.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKAutoMaskFreeImage">
            <summary>Convenience class used to automatically free the image data for a mask in a using statement.</summary>
            <remarks>
                <para>This class can be used in a using statement to automatically free the image data of a mask by virtue of having the <see cref="M:SkiaSharp.SKAutoMaskFreeImage.Dispose" /> method.</para>
                <para />
                <example>
                    <code lang="C#"><![CDATA[// some buffer
byte[] buffer = ...;

// create the mask, allocating the image
var mask = SKMask.Create(buffer, bounds, rowBytes, format);
using (new SKAutoMaskFreeImage(mask.Image)) {
    // use the mask

    // automatically release the image data
}]]></code>
                </example>
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKAutoMaskFreeImage(System.IntPtr)">
            <param name="maskImage">The image to free.</param>
            <summary>Create a new instance of <see cref="T:SkiaSharp.SKAutoMaskFreeImage" /> with the specified image to free.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKAutoMaskFreeImage.Dispose">
            <summary>Disposes the object, releasing the image data.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKBitmap">
            <summary>The <see cref="T:SkiaSharp.SKBitmap" /> specifies a raster bitmap.</summary>
            <remarks>
                <para>A bitmap has an integer width and height, and a format (colortype), and a pointer to the actual pixels. Bitmaps can be drawn into a <see cref="T:SkiaSharp.SKCanvas" />, but they are also used to specify the target of a <see cref="T:SkiaSharp.SKCanvas" />' drawing operations.</para>
                <para>A <see cref="T:SkiaSharp.SKBitmap" /> exposes <see cref="M:SkiaSharp.SKBitmap.GetPixels" />, which lets a caller write its pixels. To retrieve a pointer to the raw image data of the bitmap, call the <see cref="M:SkiaSharp.SKBitmap.LockPixels" /> method, and then call the <see cref="M:SkiaSharp.SKBitmap.GetPixels" /> method to get a pointer to the image data.  Once you no longer need to use the raw data pointer, call the <see cref="M:SkiaSharp.SKBitmap.UnlockPixels" /> method. The raw data is laid out in the format configured at the time that the bitmap was created.</para>
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKBitmap">
            <summary>Default constructor that creates a bitmap with zero width and height, and no pixels. Its colortype is set to <see cref="E:SkiaSharp.SKColorType.Unknown." /></summary>
            <remarks>This constructor does not allocate a backing store for the bitmap.</remarks>
        </member>
        <member name="C:SkiaSharp.SKBitmap(SkiaSharp.SKImageInfo)">
            <param name="info">The description of the desired image format.</param>
            <summary>Constructor that configures the bitmap based on an <see cref="T:SkiaSharp.SKImageInfo" /> specification.</summary>
            <remarks>This constructor might throw an exception if it is not possible to create a bitmap with the specified configuration (for example, the image info requires a color table, and there is no color table).</remarks>
        </member>
        <member name="C:SkiaSharp.SKBitmap(SkiaSharp.SKImageInfo,SkiaSharp.SKColorTable)">
            <param name="info">The description of the desired image format.</param>
            <param name="ctable">The color lookup table.</param>
            <summary>Constructor that configures the bitmap based on an <see cref="T:SkiaSharp.SKImageInfo" /> specification and a color table.</summary>
            <remarks>Use this method to create a bitmap that will use a color lookup table. The bitmap will be an 8-bit indexed bitmap, where each value represents an index into the color table, and the color is determined by the value in the specific location in the color table array.</remarks>
        </member>
        <member name="C:SkiaSharp.SKBitmap(SkiaSharp.SKImageInfo,System.Int32)">
            <param name="info">The description of the desired image format.</param>
            <param name="rowBytes">The number of bytes per row.</param>
            <summary>Constructor that configures the bitmap based on an <see cref="T:SkiaSharp.SKImageInfo" /> specification, and the specified number of bytes per row (the stride size)</summary>
            <remarks>This constructor might throw an exception if it is not possible to create a bitmap with the specified configuration (for example, the image info requires a color table, and there is no color table).</remarks>
        </member>
        <member name="C:SkiaSharp.SKBitmap(SkiaSharp.SKImageInfo,SkiaSharp.SKColorTable,SkiaSharp.SKBitmapAllocFlags)">
            <param name="info">The description of the desired image format.</param>
            <param name="ctable">The color lookup table.</param>
            <param name="flags">The additional flags.</param>
            <summary>Constructor that configures the bitmap based on an <see cref="T:SkiaSharp.SKImageInfo" /> specification and a color table.</summary>
            <remarks>Use this method to create a bitmap that will use a color lookup table. The bitmap will be an 8-bit indexed bitmap, where each value represents an index into the color table, and the color is determined by the value in the specific location in the color table array.</remarks>
        </member>
        <member name="C:SkiaSharp.SKBitmap(System.Int32,System.Int32,System.Boolean)">
            <param name="width">The desired width in pixels.</param>
            <param name="height">The desired height in pixels.</param>
            <param name="isOpaque">If true, sets the <see cref="T:SkiaSharp.SKAlphaType" /> to <see cref="F:SkiaSharp.SKAlphaType.Opaque" />, otherwise it sets it to <see cref="F:SkiaSharp.SKAlphaType.Premul" />.</param>
            <summary>Creates a bitmap with the given width, height and opacity with color type set to <see cref="F:SkiaSharp.SKImageInfo.PlatformColorType" /></summary>
            <remarks>This constructor might throw an exception if it is not possible to create a bitmap with the specified configuration (for example, the image info requires a color table, and there is no color table).</remarks>
        </member>
        <member name="C:SkiaSharp.SKBitmap(System.Int32,System.Int32,SkiaSharp.SKColorType,SkiaSharp.SKAlphaType)">
            <param name="width">The desired width in pixels.</param>
            <param name="height">The desired height in pixels.</param>
            <param name="colorType">The desired <see cref="T:SkiaSharp.SKColorType" />.</param>
            <param name="alphaType">The desired <see cref="T:SkiaSharp.SKAlphaType" />.</param>
            <summary>Creates a bitmap with the given width, height, color type and alpha type.</summary>
            <remarks>This constructor might throw an exception if it is not possible to create a bitmap with the specified configuration (for example, the image info requires a color table, and there is no color table).</remarks>
        </member>
        <member name="P:SkiaSharp.SKBitmap.AlphaType">
            <summary>Gets the configured <see cref="T:SkiaSharp.SKAlphaType" /> for the bitmap.</summary>
            <value>The configured <see cref="T:SkiaSharp.SKAlphaType" />.</value>
            <remarks>This determines the kind of encoding used for the alpha channel, opaque, premultiplied or unpremultiplied.</remarks>
        </member>
        <member name="P:SkiaSharp.SKBitmap.ByteCount">
            <summary>Returns the byte size of the pixels, based on the <see cref="P:SkiaSharp.SKBitmap.Height" /> and <see cref="P:SkiaSharp.SKBitmap.RowBytes" />.</summary>
            <value>The byte size of the pixels.</value>
            <remarks>Note: this truncates the result to 32-bits.</remarks>
        </member>
        <member name="P:SkiaSharp.SKBitmap.Bytes">
            <summary>Gets a copy of all the pixel data as a byte array.</summary>
            <value>The pixel data.</value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKBitmap.BytesPerPixel">
            <summary>Gets the number of bytes used per pixel.</summary>
            <value>
                <para />
            </value>
            <remarks>This is calculated from the <see cref="P:SkiaSharp.SKBitmap.ColorType" />. If the color type is <see cref="F:SkiaSharp.SKColorType.Unknown" />, then the value will be 0.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.CanCopyTo(SkiaSharp.SKColorType)">
            <param name="colorType">The color type to check with.</param>
            <summary>Returns true if this bitmap's pixels can be converted into the requested color type, such that <see cref="M:SkiaSharp.SKBitmap.Copy" /> or <see cref="M:SkiaSharp.SKBitmap.CopyTo" /> could succeed.</summary>
            <returns>Returns true if this bitmap's pixels can be converted into the requested color type.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKBitmap.ColorSpace">
            <summary>Gets the color space of the bitmap.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKBitmap.ColorTable">
            <summary>Gets the color table of the bitmap.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKBitmap.ColorType">
            <summary>Gets the color type of the bitmap.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Copy">
            <summary>Copies the contents of the bitmap and returns the copy.</summary>
            <returns>The copy of the bitmap, or <paramref name="null" /> on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Copy(SkiaSharp.SKColorType)">
            <param name="colorType">The color type to use for the copy of the bitmap.</param>
            <summary>Copies the contents of the bitmap with the specified color type and returns the copy.</summary>
            <returns>The copy of the bitmap, or <paramref name="null" /> on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.CopyTo(SkiaSharp.SKBitmap)">
            <param name="destination">The bitmap to recieved the copied contents.</param>
            <summary>Copies the contents of the bitmap into the specified bitmap.</summary>
            <returns>Returns true if the copy was made.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.CopyTo(SkiaSharp.SKBitmap,SkiaSharp.SKColorType)">
            <param name="destination">The bitmap to recieved the copied contents.</param>
            <param name="colorType">The color type to use for the copy of the bitmap.</param>
            <summary>Copies the contents of the bitmap into the specified bitmap.</summary>
            <returns>Returns true if the copy was made.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Decode(SkiaSharp.SKCodec)">
            <param name="codec">The codec to decode.</param>
            <summary>Decode a bitmap using the specified codec.</summary>
            <returns>The the decoded bitmap, or <paramref name="null" /> on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Decode(SkiaSharp.SKData)">
            <param name="data">The data to decode.</param>
            <summary>Decode a bitmap using the specified data.</summary>
            <returns>The the decoded bitmap, or <paramref name="null" /> on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Decode(SkiaSharp.SKStream)">
            <param name="stream">The stream to decode.</param>
            <summary>Decode a bitmap using the specified stream.</summary>
            <returns>The the decoded bitmap, or <paramref name="null" /> on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Decode(System.Byte[])">
            <param name="buffer">The byte buffer to decode.</param>
            <summary>Decode a bitmap using the specified byte buffer.</summary>
            <returns>The the decoded bitmap, or <paramref name="null" /> on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Decode(System.IO.Stream)">
            <param name="stream">The stream to decode.</param>
            <summary>Decode a bitmap using the specified stream and destination image information.</summary>
            <returns>The the decoded bitmap, or <paramref name="null" /> on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Decode(System.String)">
            <param name="filename">The filename of the bitmap to decode.</param>
            <summary>Decode a bitmap for the specified filename.</summary>
            <returns>The the decoded bitmap, or <paramref name="null" /> on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Decode(SkiaSharp.SKCodec,SkiaSharp.SKImageInfo)">
            <param name="codec">The codec to decode.</param>
            <param name="bitmapInfo">The destination image information.</param>
            <summary>Decode a bitmap using the specified codec and destination image information.</summary>
            <returns>The the decoded bitmap, or <paramref name="null" /> on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Decode(SkiaSharp.SKData,SkiaSharp.SKImageInfo)">
            <param name="data">The data to decode.</param>
            <param name="bitmapInfo">The destination image information.</param>
            <summary>Decode a bitmap using the specified data and destination image information.</summary>
            <returns>The the decoded bitmap, or <paramref name="null" /> on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Decode(SkiaSharp.SKStream,SkiaSharp.SKImageInfo)">
            <param name="stream">The stream to decode.</param>
            <param name="bitmapInfo">The destination image information.</param>
            <summary>Decode a bitmap using the specified stream and destination image information.</summary>
            <returns>The the decoded bitmap, or <paramref name="null" /> on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Decode(System.Byte[],SkiaSharp.SKImageInfo)">
            <param name="buffer">The byte buffer to decode.</param>
            <param name="bitmapInfo">The destination image information.</param>
            <summary>Decode a bitmap using the specified byte buffer and destination image information.</summary>
            <returns>The the decoded bitmap, or <paramref name="null" /> on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Decode(System.IO.Stream,SkiaSharp.SKImageInfo)">
            <param name="stream">The stream to decode.</param>
            <param name="bitmapInfo">The destination image information.</param>
            <summary>Decode a bitmap using the specified stream and destination image information.</summary>
            <returns>The the decoded bitmap, or <paramref name="null" /> on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Decode(System.String,SkiaSharp.SKImageInfo)">
            <param name="filename">The filename of the bitmap to decode.</param>
            <param name="bitmapInfo">The destination image information.</param>
            <summary>Decode a bitmap for the specified filename and destination image information.</summary>
            <returns>The the decoded bitmap, or <paramref name="null" /> on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.DecodeBounds(SkiaSharp.SKData)">
            <param name="data">The data to decode.</param>
            <summary>Decode the bitmap information using the specified data.</summary>
            <returns>The the decoded bitmap information, or <see cref="F:SkiaSharp.SKImageInfo.Empty" /> if there was an error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.DecodeBounds(SkiaSharp.SKStream)">
            <param name="stream">The stream to decode.</param>
            <summary>Decode the bitmap information using the specified stream.</summary>
            <returns>The the decoded bitmap information, or <see cref="F:SkiaSharp.SKImageInfo.Empty" /> if there was an error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.DecodeBounds(System.Byte[])">
            <param name="buffer">The byte buffer to decode.</param>
            <summary>Decode the bitmap information using the specified byte buffer.</summary>
            <returns>The the decoded bitmap information, or <see cref="F:SkiaSharp.SKImageInfo.Empty" /> if there was an error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.DecodeBounds(System.IO.Stream)">
            <param name="stream">The stream to decode.</param>
            <summary>Decode the bitmap information using the specified stream.</summary>
            <returns>The the decoded bitmap information, or <see cref="F:SkiaSharp.SKImageInfo.Empty" /> if there was an error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.DecodeBounds(System.String)">
            <param name="filename">The filename of the bitmap to decode.</param>
            <summary>Decode the bitmap information for the specified filename.</summary>
            <returns>The the decoded bitmap information, or <see cref="F:SkiaSharp.SKImageInfo.Empty" /> if there was an error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKBitmap.DrawsNothing">
            <summary>Gets a value indicating whether drawing this bitmap has any effect.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Encode(SkiaSharp.SKWStream,SkiaSharp.SKEncodedImageFormat,System.Int32)">
            <param name="dst">The stream to write the encoded image to.</param>
            <param name="format">The file format used to encode the image.</param>
            <param name="quality">The quality level to use for the image.</param>
            <summary>Encodes the image using the specified format.</summary>
            <returns>Returns <see langword="true" /> on success, or <see langword="false" /> if there was an error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Erase(SkiaSharp.SKColor)">
            <param name="color">The color to fill.</param>
            <summary>Fill the entire bitmap with the specified color.</summary>
            <remarks>If the bitmap's colortype does not support alpha (e.g. 565) then the alpha of the color is ignored (treated as opaque). If the colortype only supports alpha (e.g. A1 or A8) then the color's R, G, B components are ignored.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Erase(SkiaSharp.SKColor,SkiaSharp.SKRectI)">
            <param name="color">The color to fill.</param>
            <param name="rect">The area to fill.</param>
            <summary>Fill the specified area of this bitmap with the specified color.</summary>
            <remarks>If the bitmap's colortype does not support alpha (e.g. 565) then the alpha of the color is ignored (treated as opaque). If the colortype only supports alpha (e.g. A1 or A8) then the color's R, G, B components are ignored.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.ExtractAlpha(SkiaSharp.SKBitmap)">
            <param name="destination">The bitmap to be filled with alpha layer.</param>
            <summary>Retrieve the alpha layer of this bitmap.</summary>
            <returns>Returns true if the alpha layer was retrieved, false otherwise.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.ExtractAlpha(SkiaSharp.SKBitmap,SkiaSharp.SKPaint)">
            <param name="destination">The bitmap to be filled with alpha layer.</param>
            <param name="paint">The paint to draw with.</param>
            <summary>Retrieve the alpha layer of this bitmap after applying the specified paint.</summary>
            <returns>Returns true if the alpha layer was retrieved, false otherwise.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.ExtractAlpha(SkiaSharp.SKBitmap,SkiaSharp.SKPointI@)">
            <param name="destination">The bitmap to be filled with alpha layer.</param>
            <param name="offset">The top-left coordinate to position the retrieved bitmap so that it visually lines up with the original.</param>
            <summary>Retrieve the alpha layer of this bitmap.</summary>
            <returns>Returns true if the alpha layer was retrieved, false otherwise.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.ExtractAlpha(SkiaSharp.SKBitmap,SkiaSharp.SKPaint,SkiaSharp.SKPointI@)">
            <param name="destination">The bitmap to be filled with alpha layer.</param>
            <param name="paint">The paint to draw with.</param>
            <param name="offset">The top-left coordinate to position the retrieved bitmap so that it visually lines up with the original.</param>
            <summary>Retrieve the alpha layer of this bitmap after applying the specified paint.</summary>
            <returns>Returns true if the alpha layer was retrieved, false otherwise.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.ExtractSubset(SkiaSharp.SKBitmap,SkiaSharp.SKRectI)">
            <param name="destination">The bitmap that will be set to a subset of this bitmap.</param>
            <param name="subset">The rectangle of pixels in this bitmap that the destination will reference.</param>
            <summary>Retrieve a subset of this bitmap.</summary>
            <returns>Returns true if the subset was retrieved, false otherwise.</returns>
            <remarks>If possible, the retrieved bitmap will share the pixel memory, and just point into a subset of it. However, if the color type does not support this, a local copy will be made and associated with the destination bitmap.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.FromImage(SkiaSharp.SKImage)">
            <param name="image">The image to use to create a bitmap.</param>
            <summary>Creates a new bitmap from a copy of the pixel data in the specified image.</summary>
            <returns>Returns a new instance of <see cref="T:SkiaSharp.SKBitmap" />, or null if the bitmap could not be created.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.GetAddr(System.Int32,System.Int32)">
            <param name="x">The x-coordinate of the pixel.</param>
            <param name="y">The y-coordinate of the pixel.</param>
            <summary>Returns the address of the specified pixel.</summary>
            <returns>Returns the address of the specified pixel.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.GetAddr16(System.Int32,System.Int32)">
            <param name="x">The x-coordinate of the pixel.</param>
            <param name="y">The y-coordinate of the pixel.</param>
            <summary>Returns the 16-bit value of the specified pixel.</summary>
            <returns>Returns the 16-bit value of the specified pixel.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.GetAddr32(System.Int32,System.Int32)">
            <param name="x">The x-coordinate of the pixel.</param>
            <param name="y">The y-coordinate of the pixel.</param>
            <summary>Returns the 32-bit value of the specified pixel.</summary>
            <returns>Returns the 32-bit value of the specified pixel.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.GetAddr8(System.Int32,System.Int32)">
            <param name="x">The x-coordinate of the pixel.</param>
            <param name="y">The y-coordinate of the pixel.</param>
            <summary>Returns the 8-bit value of the specified pixel.</summary>
            <returns>Returns the 8-bit value of the specified pixel.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.GetIndex8Color(System.Int32,System.Int32)">
            <param name="x">The x-cordinate.</param>
            <param name="y">The y-cordinate.</param>
            <summary>Returns the color corresponding to the pixel specified by the coordinates for palette-based (color table) bitmaps.</summary>
            <returns>Returns the color corresponding to the pixel specified by the coordinates.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.GetPixel(System.Int32,System.Int32)">
            <param name="x">The x-cordinate.</param>
            <param name="y">The y-cordinate.</param>
            <summary>Returns the color for the pixel at the specified location.</summary>
            <returns>Alpha only color types return black with the appropriate alpha set. The value is undefined for <see cref="F:SkiaSharp.SKColorType.Unknown" />, if the coordinates are out of bounds, if the bitmap does not have any pixels, or has not be locked with <see cref="M:SkiaSharp.SKBitmap.LockPixels" />.</returns>
            <remarks>In most cases this will require un-premultiplying the color.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.GetPixels">
            <summary>Returns the address of the pixels for this bitmap.</summary>
            <returns>Returns a pointer to the region that contains the pixel data for this bitmap. This might return <see langword="IntPtr.Zero" /> if there is no pixel buffer associated with this bitmap.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.GetPixels(System.IntPtr@)">
            <param name="length">The length of the pixel buffer of the bitmap.</param>
            <summary>Returns the address of the pixels for this bitmap.</summary>
            <returns>Returns a pointer to the region that contains the pixel data for this bitmap. This might return <see langword="IntPtr.Zero" /> if there is no pixel buffer associated with this bitmap.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKBitmap.Height">
            <summary>Gets the height of the bitmap.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKBitmap.Info">
            <summary>Gets an instance of <see cref="T:SkiaSharp.SKImageInfo" /> with all the properties of the bitmap.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.InstallMaskPixels(SkiaSharp.SKMask)">
            <param name="mask">The mask to install.</param>
            <summary>Installs the specified mask’s pixels into the bitmap.</summary>
            <returns>Returns true on success, or false on failure. If there was an error, the bitmap will be set to empty.</returns>
            <remarks>The caller must ensure that the specified mask pixels are valid for the lifetime of the created bitmap.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.InstallPixels(SkiaSharp.SKPixmap)">
            <param name="pixmap">The pixels to install.</param>
            <summary>Installs the specified pixels into the bitmap.</summary>
            <returns>Returns true on success, or false on failure. If there was an error, the bitmap will be set to empty.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.InstallPixels(SkiaSharp.SKImageInfo,System.IntPtr)">
            <param name="info">The image information describing the pixels.</param>
            <param name="pixels">The pixels to install.</param>
            <summary>Installs the specified pixels into the bitmap.</summary>
            <returns>Returns true on success, or false on failure. If there was an error, the bitmap will be set to empty.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.InstallPixels(SkiaSharp.SKImageInfo,System.IntPtr,System.Int32)">
            <param name="info">The image information describing the pixels.</param>
            <param name="pixels">The pixels to install.</param>
            <param name="rowBytes">The stride of the pixels being installed.</param>
            <summary>Installs the specified pixels into the bitmap.</summary>
            <returns>Returns true on success, or false on failure. If there was an error, the bitmap will be set to empty.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.InstallPixels(SkiaSharp.SKImageInfo,System.IntPtr,System.Int32,SkiaSharp.SKColorTable)">
            <param name="info">The image information describing the pixels.</param>
            <param name="pixels">The pixels to install.</param>
            <param name="rowBytes">The stride of the pixels being installed.</param>
            <param name="ctable">The color table to use, if installing <see cref="F:SkiaSharp.SKColorType.Index8" /> pixels.</param>
            <summary>Installs the specified pixels into the bitmap.</summary>
            <returns>Returns true on success, or false on failure. If there was an error, the bitmap will be set to empty.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.InstallPixels(SkiaSharp.SKImageInfo,System.IntPtr,System.Int32,SkiaSharp.SKColorTable,SkiaSharp.SKBitmapReleaseDelegate,System.Object)">
            <param name="info">The image information describing the pixels.</param>
            <param name="pixels">The pixels to install.</param>
            <param name="rowBytes">The stride of the pixels being installed.</param>
            <param name="ctable">The color table to use, if installing <see cref="F:SkiaSharp.SKColorType.Index8" /> pixels.</param>
            <param name="releaseProc">The delegate to invoke when the pixels are no longer referenced.</param>
            <param name="context">The user data to use when invoking the delegate.</param>
            <summary>Installs the specified pixels into the bitmap, with an option to release the pixel buffer upon completion.</summary>
            <returns>Returns true on success, or false on failure. If there was an error, the bitmap will be set to empty.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKBitmap.IsEmpty">
            <summary>Gets a value indicating whether the bitmap has empty dimensions.</summary>
            <value>
                <para />
            </value>
            <remarks>In most cases, <see cref="P:SkiaSharp.SKBitmap.DrawsNothing" /> will return the desired result as it checks <see cref="P:SkiaSharp.SKBitmap.IsNull" /> as well.</remarks>
        </member>
        <member name="P:SkiaSharp.SKBitmap.IsImmutable">
            <summary>Indicates if the bitmap contents are immutable.</summary>
            <value>Returns <see langword="true" /> if it is immutable, <see langword="false" /> otherwise.</value>
            <remarks>Immutability means that the contents of its pixels will not change for the lifetime of the bitmap.</remarks>
        </member>
        <member name="P:SkiaSharp.SKBitmap.IsNull">
            <summary>Gets a value indicating whether the bitmap has any pixelref. </summary>
            <value>
                <para />
            </value>
            <remarks>This can return true even if the dimensions of the bitmap are not empty. In most cases, <see cref="P:SkiaSharp.SKBitmap.DrawsNothing" /> will return the desired result as it checks <see cref="P:SkiaSharp.SKBitmap.IsEmpty" /> as well.</remarks>
        </member>
        <member name="P:SkiaSharp.SKBitmap.IsVolatile">
            <summary>Gets a value indicating whether the bitmap should not be cached by devices.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.NotifyPixelsChanged">
            <summary>Indicates to consumers of the bitmap that the pixel data has changed.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.PeekPixels">
            <summary>Returns the pixels if they are available without having to lock the bitmap.</summary>
            <returns>Returns the pixels if they are available, otherwise <see langword="null" />.</returns>
            <remarks>If the pixels are available without locking, then the pixmap is only valid until the bitmap changes in any way, in which case the pixmap becomes invalid.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.PeekPixels(SkiaSharp.SKPixmap)">
            <param name="pixmap">The pixmap to receive the pixel information.</param>
            <summary>Returns the pixmap of the bitmap.</summary>
            <returns>Returns <see langword="true" /> on success, or <see langword="false" /> if the bitmap does not have access to pixel data.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKBitmap.Pixels">
            <summary>Gets all the pixels as an array of colors.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKBitmap.ReadyToDraw">
            <summary>Gets a value indicating whether or not the bitmap is valid enough to be drawn.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Reset">
            <summary>Reset the bitmap to its initial state.</summary>
            <remarks>The result is a bitmap with zero width and height, and no pixels. Its colortype is set to <see cref="E:SkiaSharp.SKColorType.Unknown." /> If we are a (shared) owner of the pixels, that ownership is decremented.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.Resize(SkiaSharp.SKBitmap,SkiaSharp.SKBitmapResizeMethod)">
            <param name="dst">The bitmap to store the resized pixels.</param>
            <param name="method">The resize method.</param>
            <summary>Resizes the current bitmap using the specified resize method.</summary>
            <returns>Returns <see langword="true" /> if the resize operation can be performed, otherwise <see langword="false" />.</returns>
            <remarks />
        </member>
        <member name="M:SkiaSharp.SKBitmap.Resize(SkiaSharp.SKImageInfo,SkiaSharp.SKBitmapResizeMethod)">
            <param name="info">The image information of the desired bitmap.</param>
            <param name="method">The resize method.</param>
            <summary>Resizes the current bitmap using the specified resize method.</summary>
            <returns>Returns the resized bitmap if the resize operation could be performed, otherwise <see langword="null" />.</returns>
            <remarks />
        </member>
        <member name="M:SkiaSharp.SKBitmap.Resize(SkiaSharp.SKBitmap,SkiaSharp.SKBitmap,SkiaSharp.SKBitmapResizeMethod)">
            <param name="dst">The bitmap to store the resized pixels.</param>
            <param name="src">The bitmap to resize.</param>
            <param name="method">The resize method.</param>
            <summary>Resizes the provided bitmap using the specified resize method.</summary>
            <returns>Returns <see langword="true" /> if the resize operation can be performed, otherwise <see langword="false" />.</returns>
            <remarks />
        </member>
        <member name="P:SkiaSharp.SKBitmap.RowBytes">
            <summary>The number of bytes per row.</summary>
            <value>
                <para />
            </value>
            <remarks>The same as <see cref="P:SkiaSharp.SKImageInfo.RowBytes" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.SetColorTable(SkiaSharp.SKColorTable)">
            <param name="ct">The new color table.</param>
            <summary>Replaces the current color table of the bitmap.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.SetImmutable">
            <summary>Marks the bitmap as immutable.</summary>
            <remarks>Marks this bitmap as immutable, meaning that the contents of its pixels will not change for the lifetime of the bitmap and of the underlying pixelref. This state can be set, but it cannot be cleared once it is set. This state propagates to all other bitmaps that share the same pixelref.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.SetPixel(System.Int32,System.Int32,SkiaSharp.SKColor)">
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="color">The color to set.</param>
            <summary>Sets the color of the pixel at a specified location.</summary>
            <remarks>This method will set the color of the pixel on the bitmap to the specified <paramref name="color" /> performing any necessary color conversions to the format of the bitmap.</remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.SetPixels(System.IntPtr)">
            <param name="pixels">The new pixel address.</param>
            <summary>Replaces the current pixel address for the bitmap.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKBitmap.SetPixels(System.IntPtr,SkiaSharp.SKColorTable)">
            <param name="pixels">The new pixel address.</param>
            <param name="ct">The color table to use, if changing <see cref="F:SkiaSharp.SKColorType.Index8" /> pixels, or <see langword="null" />.</param>
            <summary>Replaces the current pixel address for the bitmap.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKBitmap.Width">
            <summary>Gets the width of the bitmap.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKBitmapAllocFlags">
            <summary>Flags to use with <see cref="M:SkiaSharp.SKBitmap..ctor" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKBitmapAllocFlags.None">
            <summary>Default bitmap allocation flag.</summary>
        </member>
        <member name="F:SkiaSharp.SKBitmapAllocFlags.ZeroPixels">
            <summary>Initialize the bitmap with zeroed data.</summary>
        </member>
        <member name="T:SkiaSharp.SKBitmapReleaseDelegate">
            <param name="address">The memory address of the pixels being released.</param>
            <param name="context">The user data that was provided when installing the pixels.</param>
            <summary>The delegate that is used when releasing the memory for a bitmap.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKBitmapResizeMethod">
            <summary>Channel selector type for the <see cref="M:SkiaSharp.SKBitmap.Resize" /> method or the <see cref="M:SkiaSharp.SKPixmap.Resize" /> method.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKBitmapResizeMethod.Box">
            <summary>Use the box interpolated filter (Shrink: average color; Grow: pixel replication).</summary>
        </member>
        <member name="F:SkiaSharp.SKBitmapResizeMethod.Hamming">
            <summary>Use the Hamming windowed Sinc filter (cosine bell variant).</summary>
        </member>
        <member name="F:SkiaSharp.SKBitmapResizeMethod.Lanczos3">
            <summary>Use the Lanczos windowed Sinc filter.</summary>
        </member>
        <member name="F:SkiaSharp.SKBitmapResizeMethod.Mitchell">
            <summary>Use the Mitchell cubic filter.</summary>
        </member>
        <member name="F:SkiaSharp.SKBitmapResizeMethod.Triangle">
            <summary>Use the box triangle or bilinear filter.</summary>
        </member>
        <member name="T:SkiaSharp.SKBlendMode">
            <summary>Pre-defined blend modes.</summary>
            <remarks>
                <para>Porter Duff Compositing Operators - defined algebra of compositing. These operators control the results of mixing the four sub-pixel regions formed by the overlapping of graphical objects that have an alpha or pixel coverage channel/value.</para>
                <para>Separable Blend Mode - each component of the result color is completely determined by the corresponding components of the constituent backdrop and source colors.</para>
                <para>Non-Separable Blend Mode - considers all color components in combination as opposed to the separable ones that look at each component individually.</para>
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKBlendMode.Clear">
            <summary>No regions are enabled. [Porter Duff Compositing Operators] (https://drafts.fxtf.org/compositing-1/examples/PD_clr.svg)</summary>
        </member>
        <member name="F:SkiaSharp.SKBlendMode.Color">
            <summary>Creates a color with the hue and saturation of the source color and the luminosity of the backdrop color. [Non-Separable Blend Modes]</summary>
        </member>
        <member name="F:SkiaSharp.SKBlendMode.ColorBurn">
            <summary>Darkens the backdrop color to reflect the source color. [Separable Blend Modes]</summary>
        </member>
        <member name="F:SkiaSharp.SKBlendMode.ColorDodge">
            <summary>Brightens the backdrop color to reflect the source color. [Separable Blend Modes]</summary>
        </member>
        <member name="F:SkiaSharp.SKBlendMode.Darken">
            <summary>Selects the darker of the backdrop and source colors. [Separable Blend Modes]</summary>
        </member>
        <member name="F:SkiaSharp.SKBlendMode.Difference">
            <summary>Subtracts the darker of the two constituent colors from the lighter color. [Separable Blend Modes]</summary>
        </member>
        <member name="F:SkiaSharp.SKBlendMode.Dst">
            <summary>Only the destination will be present. [Porter Duff Compositing Operators] (https://drafts.fxtf.org/compositing-1/examples/PD_dst.svg)</summary>
        </member>
        <member name="F:SkiaSharp.SKBlendMode.DstATop">
            <summary>Destination which overlaps the source replaces the source. [Porter Duff Compositing Operators] (https://drafts.fxtf.org/compositing-1/examples/PD_dst-atop.svg)</summary>
        </member>
        <member name="F:SkiaSharp.SKBlendMode.DstIn">
            <summary>Destination which overlaps the source, replaces the source. [Porter Duff Compositing Operators] (https://drafts.fxtf.org/compositing-1/examples/PD_dst-in.svg)</summary>
        </member>
        <member name="F:SkiaSharp.SKBlendMode.DstOut">
            <summary>Destination is placed, where it falls outside of the source. [Porter Duff Compositing Operators] (https://drafts.fxtf.org/compositing-1/examples/PD_dst-out.svg)</summary>
        </member>
        <member name="F:SkiaSharp.SKBlendMode.DstOver">
            <summary>Destination is placed over the source. [Porter Duff Compositing Operators] (https://drafts.fxtf.org/compositing-1/examples/PD_dst-over.svg)</summary>
        </member>
        <member name="F:SkiaSharp.SKBlendMode.Exclusion">
            <summary>Produces an effect similar to that of the Difference mode but lower in contrast. [Separable Blend Modes]</summary>
        </member>
        <member name="F:SkiaSharp.SKBlendMode.HardLight">
            <summary>Multiplies or screens the colors, depending on the source color value. [Separable Blend Modes]</summary>
        </member>
        <member name="F:SkiaSharp.SKBlendMode.Hue">
            <summary>Creates a color with the hue of the source color and the saturation and luminosity of the backdrop color. [Non-Separable Blend Modes]</summary>
        </member>
        <member name="F:SkiaSharp.SKBlendMode.Lighten">
            <summary>Selects the lighter of the backdrop and source colors. [Separable Blend Modes]</summary>
        </member>
        <member name="F:SkiaSharp.SKBlendMode.Luminosity">
            <summary>Creates a color with the luminosity of the source color and the hue and saturation of the backdrop color. [Non-Separable Blend Modes]</summary>
        </member>
        <member name="F:SkiaSharp.SKBlendMode.Modulate">
            <summary>Multiplies all components (= alpha and color). [Separable Blend Modes]</summary>
        </member>
        <member name="F:SkiaSharp.SKBlendMode.Multiply">
            <summary>The source color is multiplied by the destination color and replaces the destination [Separable Blend Modes]</summary>
        </member>
        <member name="F:SkiaSharp.SKBlendMode.Overlay">
            <summary>Multiplies or screens the colors, depending on the backdrop color value. [Separable Blend Modes]</summary>
        </member>
        <member name="F:SkiaSharp.SKBlendMode.Plus">
            <summary>Display the sum of the source image and destination image. [Porter Duff Compositing Operators]</summary>
        </member>
        <member name="F:SkiaSharp.SKBlendMode.Saturation">
            <summary>Creates a color with the saturation of the source color and the hue and luminosity of the backdrop color. [Non-Separable Blend Modes]</summary>
        </member>
        <member name="F:SkiaSharp.SKBlendMode.Screen">
            <summary>Multiplies the complements of the backdrop and source color values, then complements the result. [Separable Blend Modes]</summary>
        </member>
        <member name="F:SkiaSharp.SKBlendMode.SoftLight">
            <summary>Darkens or lightens the colors, depending on the source color value. [Separable Blend Modes]</summary>
        </member>
        <member name="F:SkiaSharp.SKBlendMode.Src">
            <summary>Only the source will be present. [Porter Duff Compositing Operators] (https://drafts.fxtf.org/compositing-1/examples/PD_src.svg)</summary>
        </member>
        <member name="F:SkiaSharp.SKBlendMode.SrcATop">
            <summary>Source which overlaps the destination, replaces the destination. [Porter Duff Compositing Operators] (https://drafts.fxtf.org/compositing-1/examples/PD_src-atop.svg)</summary>
        </member>
        <member name="F:SkiaSharp.SKBlendMode.SrcIn">
            <summary>The source that overlaps the destination, replaces the destination. [Porter Duff Compositing Operators] (https://drafts.fxtf.org/compositing-1/examples/PD_src-in.svg)</summary>
        </member>
        <member name="F:SkiaSharp.SKBlendMode.SrcOut">
            <summary>Source is placed, where it falls outside of the destination. [Porter Duff Compositing Operators] (https://drafts.fxtf.org/compositing-1/examples/PD_src-out.svg)</summary>
        </member>
        <member name="F:SkiaSharp.SKBlendMode.SrcOver">
            <summary>Source is placed over the destination. [Porter Duff Compositing Operators] (https://drafts.fxtf.org/compositing-1/examples/PD_src-over.svg)</summary>
        </member>
        <member name="F:SkiaSharp.SKBlendMode.Xor">
            <summary>The non-overlapping regions of source and destination are combined. [Porter Duff Compositing Operators] (https://drafts.fxtf.org/compositing-1/examples/PD_xor.svg)</summary>
        </member>
        <member name="T:SkiaSharp.SKBlurMaskFilterFlags">
            <summary>Flags to use with <see cref="M:SkiaSharp.SKMaskFilter.CreateBlur" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKBlurMaskFilterFlags.All">
            <summary>Apply all the flags.</summary>
        </member>
        <member name="F:SkiaSharp.SKBlurMaskFilterFlags.HighQuality">
            <summary>Use a smother, higher qulity blur algorithm.</summary>
        </member>
        <member name="F:SkiaSharp.SKBlurMaskFilterFlags.IgnoreTransform">
            <summary>The blur layer's radius is not affected by transforms.</summary>
        </member>
        <member name="F:SkiaSharp.SKBlurMaskFilterFlags.None">
            <summary>Do not apply any of the flags.</summary>
        </member>
        <member name="T:SkiaSharp.SKBlurStyle">
            <summary>Blur types for the <see cref="M:SkiaSharp.SKMaskFilter.CreateBlur" /> method.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKBlurStyle.Inner">
            <summary>Fuzzy inside, nothing outside</summary>
        </member>
        <member name="F:SkiaSharp.SKBlurStyle.Normal">
            <summary>Fuzzy inside and outside</summary>
        </member>
        <member name="F:SkiaSharp.SKBlurStyle.Outer">
            <summary>Nothing inside, fuzzy outside</summary>
        </member>
        <member name="F:SkiaSharp.SKBlurStyle.Solid">
            <summary>Solid inside, fuzzy outside</summary>
        </member>
        <member name="T:SkiaSharp.SKCanvas">
            <summary>Encapsulates all of the state about drawing into a device (bitmap).</summary>
            <remarks>
                <para>Encapsulates all of the state about drawing into a device (bitmap).</para>
                <para />
                <para>This includes a reference to the device itself, and a stack of matrix/clip values. For any given draw call (e.g. drawRect), the geometry of the object being drawn is transformed by the concatenation of all the matrices in the stack. The transformed geometry is clipped by the intersection of all of the clips in the stack.</para>
                <para />
                <para>While the canvas holds the state of the drawing device, the state (style) of the object being drawn is held by the Paint, which is provided as a parameter to each of the draw() methods. The Paint holds attributes such as color, typeface, the text size, the stroke width, the shader (for example, gradients, patterns), etc.</para>
                <para />
                <para>The SKCanvas is returned when accessing the <see cref="P:SkiaSharp.SKSurface.Canvas" /> property of a surface.</para>
                <para>Transformations</para>
                <para>The <see cref="T:SkiaSharp.SKCanvas" /> supports a number of 2D transformations.   Unlike other 2D graphic systems like CoreGraphics or Cairo, SKCanvas extends the transformations to include perspectives.   </para>
                <para>You can use the <see cref="M:SkiaSharp.SKCanvas.Scale" />, <see cref="M:SkiaSharp.SKCanvas.Skew" />, <see cref="M:SkiaSharp.SKCanvas.Translate" />, <see cref="M:SkiaSharp.SKCanvas.RotateDegrees" />, <see cref="M:SkiaSharp.SKCanvas.RotateRadians" /> to perform some of the most common 2D transformations.   </para>
                <para>For more control you can use the <see cref="M:SkiaSharp.SKCanvas.SetMatrix" /> to set an arbitrary transformation using the <see cref="T:SkiaSharp.SKMatrix" /> and the <see cref="M:SkiaSharp.SKCanvas.Concat" /> to concatenate an <see cref="T:SkiaSharp.SKMatrix" /> transformation to the current matrix in use.</para>
                <para>The <see cref="M:SkiaSharp.SKCanvas.ResetMatrix" /> can be used to reset the state of the matrix</para>
                <para />
                <para>Drawing</para>
                <para>The drawing operations can take a <see cref="T:SkiaSharp.SKPaint" /> parameter to affect their drawing.  You use <see cref="T:SkiaSharp.SKPaint" /> objects to cache the style and color information to draw geometries, texts and bitmaps.</para>
                <para>Clipping Path</para>
                <para>State</para>
                <para>It is possible to save the current transformations by calling the <see cref="M:SkiaSharp.SKCanvas.Save" /> method which preserves the current transformation matrix, you can then alter the matrix and restore the previous state by using the <see cref="M:SkiaSharp.SKCanvas.Restore" /> or <see cref="M:SkiaSharp.SKCanvas.RestoreToCount" /> methods.   </para>
                <para>Additionally, it is possible to push a new state with <see cref="M:SkiaSharp.SKCanvas.SaveLayer" /> which will make an offscreen copy of a region, and once the drawing is completed, calling the <see cref="M:SkiaSharp.SKCanvas.Restore" /> method which copies the offscreen bitmap into this canvas.</para>
                <para>The example below shows a typical use:</para>
                <para />
                <para />
                <para />
                <example>
                    <code lang="C#"><![CDATA[using (var surface = SKSurface.Create (width: 640, height: 480, SKImageInfo.PlatformColorType, SKAlphaType.Premul)) {
    SKCanvas canvas = surface.Canvas;

    canvas.Clear (SKColors.White);
    
    // set up drawing tools
    using (var paint = new SKPaint ()) {
        paint.IsAntialias = true;
        paint.Color = new SKColor (0x2c, 0x3e, 0x50);
        paint.StrokeCap = SKStrokeCap.Round;
        
        // create the Xamagon path
        using (var path = new SKPath ()) {
            path.MoveTo (71.4311121f, 56f);
            path.CubicTo (68.6763107f, 56.0058575f, 65.9796704f, 57.5737917f, 64.5928855f, 59.965729f);
            path.LineTo (43.0238921f, 97.5342563f);
            path.CubicTo (41.6587026f, 99.9325978f, 41.6587026f, 103.067402f, 43.0238921f, 105.465744f);
            path.LineTo (64.5928855f, 143.034271f);
            path.CubicTo (65.9798162f, 145.426228f, 68.6763107f, 146.994582f, 71.4311121f, 147f);
            path.LineTo (114.568946f, 147f);
            path.CubicTo (117.323748f, 146.994143f, 120.020241f, 145.426228f, 121.407172f, 143.034271f);
            path.LineTo (142.976161f, 105.465744f);
            path.CubicTo (144.34135f, 103.067402f, 144.341209f, 99.9325978f, 142.976161f, 97.5342563f);
            path.LineTo (121.407172f, 59.965729f);
            path.CubicTo (120.020241f, 57.5737917f, 117.323748f, 56.0054182f, 114.568946f, 56f);
            path.LineTo (71.4311121f, 56f);
            path.Close ();
          
            // draw the Xamagon path
            canvas.DrawPath (path, paint);
        }
    }
}]]></code>
                </example>
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKCanvas(SkiaSharp.SKBitmap)">
            <param name="bitmap">The bitmap for the canvas to draw into.</param>
            <summary>Creates a canvas with the specified bitmap to draw into.</summary>
            <remarks>The structure of the bitmap is copied into the canvas.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.Clear">
            <summary>Replaces all the pixels in the canvas’ current clip with the <see cref="P:SkiaSharp.SKColors.Empty" /> color.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.Clear(SkiaSharp.SKColor)">
            <param name="color">The color to use to replace the pixels in the current clipping region.</param>
            <summary>Replaces all the pixels in the canvas’ current clip with the specified color.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.ClipPath(SkiaSharp.SKPath,SkiaSharp.SKClipOperation,System.Boolean)">
            <param name="path">The path to combine with the current clip.</param>
            <param name="operation">The clip operator to apply to the current clip</param>
            <param name="antialias">Whether or not the clip should be antialiased.</param>
            <summary>Modify the current clip with the specified path.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.ClipRect(SkiaSharp.SKRect,SkiaSharp.SKClipOperation,System.Boolean)">
            <param name="rect">The rectangle to combine with the current clip.</param>
            <param name="operation">The clip operator to apply to the current clip.</param>
            <param name="antialias">Whether or not the clip should be antialiased.</param>
            <summary>Modify the current clip with the specified rectangle.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.ClipRegion(SkiaSharp.SKRegion,SkiaSharp.SKClipOperation)">
            <param name="region">The region to combine with the current clip.</param>
            <param name="operation">The region operator to apply to the current clip.</param>
            <summary>Modify the current clip with the specified region.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.Concat(SkiaSharp.SKMatrix@)">
            <param name="m">Transformation matrix to pre-concatenate.</param>
            <summary>Pre-concatenates the provided transformation matrix with the current transformation matrix.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKCanvas.DeviceClipBounds">
            <summary>Gets the bounds of the current clip (in device coordinates).</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawAnnotation(SkiaSharp.SKRect,System.String,SkiaSharp.SKData)">
            <param name="rect">The bounds of the annotation.</param>
            <param name="key">The name of the annotation.</param>
            <param name="value">The blob of data to attach to the annotation.</param>
            <summary>Send an key/value pair "annotation" to the canvas.</summary>
            <remarks>
                <para>The caller still retains its ownership of the data (if any).</para>
                <para>Note: on may canvas types, this information is ignored, but some canvases (e.g. recording a picture or drawing to a PDF document) will pass on this information.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawBitmap(SkiaSharp.SKBitmap,SkiaSharp.SKPoint,SkiaSharp.SKPaint)">
            <param name="bitmap">The bitmap to draw.</param>
            <param name="p">The destination coordinates for the bitmap.</param>
            <param name="paint">The paint to use when drawing the bitmap.</param>
            <summary>Draws a bitmap on the canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawBitmap(SkiaSharp.SKBitmap,SkiaSharp.SKRect,SkiaSharp.SKPaint)">
            <param name="bitmap">The bitmap to draw.</param>
            <param name="dest">The region to draw the bitmap into.</param>
            <param name="paint">The paint to use when drawing the bitmap.</param>
            <summary>Draws a bitmap on the canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawBitmap(SkiaSharp.SKBitmap,SkiaSharp.SKRect,SkiaSharp.SKRect,SkiaSharp.SKPaint)">
            <param name="bitmap">The bitmap to draw.</param>
            <param name="source">The source region to copy.</param>
            <param name="dest">The region to draw the bitmap into.</param>
            <param name="paint">The paint to use when drawing the bitmap.</param>
            <summary>Draws a bitmap on the canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawBitmap(SkiaSharp.SKBitmap,System.Single,System.Single,SkiaSharp.SKPaint)">
            <param name="bitmap">The bitmap to draw.</param>
            <param name="x">The destination x-coordinate for the bitmap.</param>
            <param name="y">The destination y-coordinate for the bitmap.</param>
            <param name="paint">The paint to use when drawing the bitmap.</param>
            <summary>Draws a bitmap on the canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawBitmapLattice(SkiaSharp.SKBitmap,SkiaSharp.SKLattice,SkiaSharp.SKRect,SkiaSharp.SKPaint)">
            <param name="bitmap">The bitmap to draw.</param>
            <param name="lattice">The lattice that describes the areas of the bitmap to stretch or shrink.</param>
            <param name="dst">The region to draw the bitmap into.</param>
            <param name="paint">The paint to use when drawing the bitmap.</param>
            <summary>Draws the bitmap, stretched or shrunk differentially to fit into the destination rectangle.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawBitmapLattice(SkiaSharp.SKBitmap,System.Int32[],System.Int32[],SkiaSharp.SKRect,SkiaSharp.SKPaint)">
            <param name="bitmap">The bitmap to draw.</param>
            <param name="xDivs">The x-coordinates that divide the bitmap vertically, describing the areas to stretch or shrink.</param>
            <param name="yDivs">The y-coordinates that divide the bitmap horizontally, describing the areas to stretch or shrink.</param>
            <param name="dst">The region to draw the bitmap into.</param>
            <param name="paint">The paint to use when drawing the bitmap.</param>
            <summary>Draws the bitmap, stretched or shrunk differentially to fit into the destination rectangle.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawBitmapNinePatch(SkiaSharp.SKBitmap,SkiaSharp.SKRectI,SkiaSharp.SKRect,SkiaSharp.SKPaint)">
            <param name="bitmap">The bitmap to draw.</param>
            <param name="center">The center region within the bitmap to logically divide the bitmap into 9 sections (3x3).</param>
            <param name="dst">The region to draw the bitmap into.</param>
            <param name="paint">The paint to use when drawing the bitmap.</param>
            <summary>Draws the bitmap, stretched or shrunk differentially to fit into the destination rectangle.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawCircle(SkiaSharp.SKPoint,System.Single,SkiaSharp.SKPaint)">
            <param name="c">The center coordinates.</param>
            <param name="radius">The radius for the circle.</param>
            <param name="paint">The paint to use when drawing the circle.</param>
            <summary>Draws a circle on the canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawCircle(System.Single,System.Single,System.Single,SkiaSharp.SKPaint)">
            <param name="cx">The center x-coordinate.</param>
            <param name="cy">The center y-coordinate.</param>
            <param name="radius">The radius for the circle.</param>
            <param name="paint">The paint to use when drawing the circle.</param>
            <summary>Draws a circle on the canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawColor(SkiaSharp.SKColor,SkiaSharp.SKBlendMode)">
            <param name="color">The color to use to paint the clipping region.</param>
            <param name="mode">The blend mode for the color.</param>
            <summary>Fills the current clipping area with the specified color using the specified color and blend mode.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawImage(SkiaSharp.SKImage,SkiaSharp.SKPoint,SkiaSharp.SKPaint)">
            <param name="image">The image to draw.</param>
            <param name="p">The destination coordinates for the image.</param>
            <param name="paint">The paint to use when drawing the image, or <see langword="null" />.</param>
            <summary>Draws an image on the canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawImage(SkiaSharp.SKImage,SkiaSharp.SKRect,SkiaSharp.SKPaint)">
            <param name="image">The image to draw.</param>
            <param name="dest">The region to draw the image into.</param>
            <param name="paint">The paint to use when drawing the image, or <see langword="null" />.</param>
            <summary>Draws an image on the canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawImage(SkiaSharp.SKImage,SkiaSharp.SKRect,SkiaSharp.SKRect,SkiaSharp.SKPaint)">
            <param name="image">The image to draw.</param>
            <param name="source">The source region to copy.</param>
            <param name="dest">The region to draw the image into.</param>
            <param name="paint">The paint to use when drawing the image, or <see langword="null" />.</param>
            <summary>Draws an image on the canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawImage(SkiaSharp.SKImage,System.Single,System.Single,SkiaSharp.SKPaint)">
            <param name="image">The image to draw.</param>
            <param name="x">The destination x-coordinate for the image.</param>
            <param name="y">The destination y-coordinate for the image.</param>
            <param name="paint">The paint to use when drawing the image, or <see langword="null" />.</param>
            <summary>Draws an image on the canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawImageLattice(SkiaSharp.SKImage,SkiaSharp.SKLattice,SkiaSharp.SKRect,SkiaSharp.SKPaint)">
            <param name="image">The image to draw.</param>
            <param name="lattice">The lattice that describes the areas of the image to stretch or shrink.</param>
            <param name="dst">The region to draw the image into.</param>
            <param name="paint">The paint to use when drawing the image, or <see langword="null" />.</param>
            <summary>Draws the image, stretched or shrunk differentially to fit into the destination rectangle.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawImageLattice(SkiaSharp.SKImage,System.Int32[],System.Int32[],SkiaSharp.SKRect,SkiaSharp.SKPaint)">
            <param name="image">The image to draw.</param>
            <param name="xDivs">The x-coordinates that divide the image vertically, describing the areas to stretch or shrink.</param>
            <param name="yDivs">The Y-coordinates that divide the image horizontally, describing the areas to stretch or shrink.</param>
            <param name="dst">The region to draw the image into.</param>
            <param name="paint">The paint to use when drawing the image, or <see langword="null" />.</param>
            <summary>Draws the image, stretched or shrunk differentially to fit into the destination rectangle.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawImageNinePatch(SkiaSharp.SKImage,SkiaSharp.SKRectI,SkiaSharp.SKRect,SkiaSharp.SKPaint)">
            <param name="image">The image to draw.</param>
            <param name="center">The center region within the image to logically divide the image into 9 sections (3x3).</param>
            <param name="dst">The region to draw the image into.</param>
            <param name="paint">The paint to use when drawing the image, or <see langword="null" />.</param>
            <summary>Draws the image, stretched or shrunk differentially to fit into the destination rectangle.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawLine(SkiaSharp.SKPoint,SkiaSharp.SKPoint,SkiaSharp.SKPaint)">
            <param name="p0">The first point coordinates.</param>
            <param name="p1">The second point coordinates.</param>
            <param name="paint">The paint to use when drawing the line.</param>
            <summary>Draws a line on the canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawLine(System.Single,System.Single,System.Single,System.Single,SkiaSharp.SKPaint)">
            <param name="x0">The first point x-coordinate.</param>
            <param name="y0">The first point y-coordinate.</param>
            <param name="x1">The second point x-coordinate.</param>
            <param name="y1">The second point y-coordinate.</param>
            <param name="paint">The paint to use when drawing the line.</param>
            <summary>Draws a line on the canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawLinkDestinationAnnotation(SkiaSharp.SKRect,SkiaSharp.SKData)">
            <param name="rect">The bounds of the annotation.</param>
            <param name="value">The data that specifies the name of the link’s destination.</param>
            <summary>Annotates the canvas by making the specified rectangle link to a named destination (see <see cref="M:SkiaSharp.SKCanvas.DrawNamedDestinationAnnotation" />).</summary>
            <remarks>
                <para>The caller is responsible for managing its ownership of the data.</para>
                <para>If the backend of this canvas does not support annotations, this call is safely ignored.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawLinkDestinationAnnotation(SkiaSharp.SKRect,System.String)">
            <param name="rect">The bounds of the annotation.</param>
            <param name="value">The name of the link’s destination.</param>
            <summary>Annotates the canvas by making the specified rectangle link to a named destination (see <see cref="M:SkiaSharp.SKCanvas.DrawNamedDestinationAnnotation" />).</summary>
            <returns>Returns the actual data object that was attached to the canvas.</returns>
            <remarks>If the backend of this canvas does not support annotations, this call is safely ignored.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawNamedDestinationAnnotation(SkiaSharp.SKPoint,SkiaSharp.SKData)">
            <param name="point">The location of the destination.</param>
            <param name="value">The data that specifies the name of the destination.</param>
            <summary>Annotates the canvas by associating a name with the specified point (see <see cref="M:SkiaSharp.SKCanvas.DrawLinkDestinationAnnotation" />).</summary>
            <remarks>
                <para>The caller is responsible for managing its ownership of the data.</para>
                <para>If the backend of this canvas does not support annotations, this call is safely ignored.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawNamedDestinationAnnotation(SkiaSharp.SKPoint,System.String)">
            <param name="point">The location of the destination.</param>
            <param name="value">The name of the destination.</param>
            <summary>Annotates the canvas by associating a name with the specified point (see <see cref="M:SkiaSharp.SKCanvas.DrawLinkDestinationAnnotation" />).</summary>
            <returns>Returns the actual data object that was attached to the canvas.</returns>
            <remarks>If the backend of this canvas does not support annotations, this call is safely ignored.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawOval(SkiaSharp.SKRect,SkiaSharp.SKPaint)">
            <param name="rect">The bounding box for the oval.</param>
            <param name="paint">The paint to use when drawing the oval.</param>
            <summary>Draws an oval on the canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawOval(SkiaSharp.SKPoint,SkiaSharp.SKSize,SkiaSharp.SKPaint)">
            <param name="c">The center coordinates.</param>
            <param name="r">The radius for the oval.</param>
            <param name="paint">The paint to use when drawing the oval.</param>
            <summary>Draws an oval on the canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawOval(System.Single,System.Single,System.Single,System.Single,SkiaSharp.SKPaint)">
            <param name="cx">The center x-coordinate.</param>
            <param name="cy">The center y-coordinate.</param>
            <param name="rx">The vertical radius for the oval.</param>
            <param name="ry">The horizontal radius for the oval.</param>
            <param name="paint">The paint to use when drawing the oval.</param>
            <summary>Draws an oval on the canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawPaint(SkiaSharp.SKPaint)">
            <param name="paint">The paint used to fill the current clipping path.</param>
            <summary>Fills the current clipping path with the specified paint.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawPath(SkiaSharp.SKPath,SkiaSharp.SKPaint)">
            <param name="path">The path to draw.</param>
            <param name="paint">The paint to use when drawing the path.</param>
            <summary>Draws a path in the canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawPicture(SkiaSharp.SKPicture,SkiaSharp.SKPaint)">
            <param name="picture">The picture to draw.</param>
            <param name="paint">The paint to use when drawing the picture, or <see langword="null" />.</param>
            <summary>Draws a picture on the canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawPicture(SkiaSharp.SKPicture,SkiaSharp.SKMatrix@,SkiaSharp.SKPaint)">
            <param name="picture">The picture to draw.</param>
            <param name="matrix">The matrix to apply while painting.</param>
            <param name="paint">The paint to use when drawing the picture, or <see langword="null" />.</param>
            <summary>Draws a picture on the canvas.</summary>
            <remarks>
                <para>This is equivalent to calling <see cref="M:SkiaSharp.SKCanvas.Save" />, followed by <see cref="M:SkiaSharp.SKCanvas.Concat" /> with the specified <paramref name="matrix" />, <see cref="M:SkiaSharp.SKCanvas.DrawPicture" /> and then <see cref="M:SkiaSharp.SKCanvas.Restore" />.</para>
                <para />
                <para>If paint is non-null, the picture is drawn into a temporary buffer, and then the paint's alpha, color filter, image filter, blend mode are applied to that buffer as it is drawn to the canvas.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawPicture(SkiaSharp.SKPicture,SkiaSharp.SKPoint,SkiaSharp.SKPaint)">
            <param name="picture">The picture to draw.</param>
            <param name="p">The destination coordinates for the picture.</param>
            <param name="paint">The paint to use when drawing the picture, or <see langword="null" />.</param>
            <summary>Draws a picture on the canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawPicture(SkiaSharp.SKPicture,System.Single,System.Single,SkiaSharp.SKPaint)">
            <param name="picture">The picture to draw.</param>
            <param name="x">The destination x-coordinate for the picture.</param>
            <param name="y">The destination y-coordinate for the picture.</param>
            <param name="paint">The paint to use when drawing the picture, or <see langword="null" />.</param>
            <summary>Draws a picture on the canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawPoint(SkiaSharp.SKPoint,SkiaSharp.SKColor)">
            <param name="p">The coordinates for the point to draw.</param>
            <param name="color">The color to use.</param>
            <summary>Draws a point in the canvas with the specified color.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawPoint(SkiaSharp.SKPoint,SkiaSharp.SKPaint)">
            <param name="p">The coordinates for the point to draw.</param>
            <param name="paint">The paint to use when drawing the point.</param>
            <summary>Draws a point in the canvas with the specified color.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawPoint(System.Single,System.Single,SkiaSharp.SKColor)">
            <param name="x">The x-coordinate for the point to draw.</param>
            <param name="y">The y-coordinate for the point to draw.</param>
            <param name="color">The color to use.</param>
            <summary>Draws a point in the canvas with the specified color.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawPoint(System.Single,System.Single,SkiaSharp.SKPaint)">
            <param name="x">The x-coordinate for the point to draw.</param>
            <param name="y">The y-coordinate for the point to draw.</param>
            <param name="paint">The paint to use when drawing the point.</param>
            <summary>Draws a point in the canvas with the specified color.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawPoints(SkiaSharp.SKPointMode,SkiaSharp.SKPoint[],SkiaSharp.SKPaint)">
            <param name="mode">Determines how the points array will be interpreted: as points, as coordinates to draw lines, or as coordinates of a polygon.</param>
            <param name="points">The array of points to draw.</param>
            <param name="paint">The paint to use when drawing the points.</param>
            <summary>Draws an array of points, lines or a polygon in the canvas, one at a time.</summary>
            <remarks>
                <para>For <see cref="F:SkiaSharp.SKPointMode.Points" />, each point is drawn centered at its coordinate, and its size is specified by the paint's stroke-width. It draws as a square, unless the paint's <see cref="P:SkiaSharp.SKPaint.StrokeCap" /> is <see cref="F:SkiaSharp.SKStrokeCap.Round" />, in which the points are drawn as circles.</para>
                <para />
                <para>For <see cref="F:SkiaSharp.SKPointMode.Lines" />, each pair of points is drawn as a line segment, respecting the paint's settings for cap, join and width. </para>
                <para />
                <para>For <see cref="F:SkiaSharp.SKPointMode.Polygon" />, the entire array is drawn as a series of connected line segments.</para>
                <para />
                <para>Note that, while similar, the line and polygon modes draw slightly differently than the equivalent path built with a series of move to, line to calls, in that the path will draw all of its contours at once, with no interactions if contours intersect each other (think <see cref="F:SkiaSharp.SKBlendMode.Xor" />).</para>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawPositionedText(System.Byte[],SkiaSharp.SKPoint[],SkiaSharp.SKPaint)">
            <param name="text">The text to draw.</param>
            <param name="points">The positions for each glyph in the <paramref name="text" /> string.</param>
            <param name="paint">The paint to use when drawing the text.</param>
            <summary>Draws glyphs of the text at specified locations on the canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawPositionedText(System.String,SkiaSharp.SKPoint[],SkiaSharp.SKPaint)">
            <param name="text">The text to draw.</param>
            <param name="points">The positions for each glyph in the <paramref name="text" /> string.</param>
            <param name="paint">The paint to use when drawing the text.</param>
            <summary>Draws glyphs of the text at specified locations on the canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawPositionedText(System.IntPtr,System.Int32,SkiaSharp.SKPoint[],SkiaSharp.SKPaint)">
            <param name="buffer">The pointer to a region holding UTF-8 encoded text to draw.</param>
            <param name="length">The number of bytes to read from the <paramref name="buffer." /></param>
            <param name="points">The positions for each glyph in the <paramref name="buffer." /></param>
            <param name="paint">The paint to use when drawing the text.</param>
            <summary>Draws text from a UTF-8 buffer at specified locations on the canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawRect(SkiaSharp.SKRect,SkiaSharp.SKPaint)">
            <param name="rect">The rectangle to draw.</param>
            <param name="paint">The paint to use when drawing the rectagle.</param>
            <summary>Draws a rectangle in the canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawRect(System.Single,System.Single,System.Single,System.Single,SkiaSharp.SKPaint)">
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="w">The rectangle width.</param>
            <param name="h">The rectangle height.</param>
            <param name="paint">The paint to use when drawing the rectagle.</param>
            <summary>Draws a rectangle in the canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawRegion(SkiaSharp.SKRegion,SkiaSharp.SKPaint)">
            <param name="region">The region to be drawn.</param>
            <param name="paint">The paint to use when drawing the region.</param>
            <summary>Draws the outline of the specified region using the specified paint.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawRoundRect(SkiaSharp.SKRect,SkiaSharp.SKSize,SkiaSharp.SKPaint)">
            <param name="rect">The rectangle to draw.</param>
            <param name="r">The radius of the oval used to round the corners.</param>
            <param name="paint">The paint to use when drawing the rectagle.</param>
            <summary>Draws a rounded rectangle in the canvas.</summary>
            <remarks>The paint to use when drawing the rectagle.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawRoundRect(SkiaSharp.SKRect,System.Single,System.Single,SkiaSharp.SKPaint)">
            <param name="rect">The rectangle to draw.</param>
            <param name="rx">The x-radius of the oval used to round the corners.</param>
            <param name="ry">The y-radius of the oval used to round the corners.</param>
            <param name="paint">The paint to use when drawing the rectagle.</param>
            <summary>Draws a rounded rectangle in the canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawRoundRect(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,SkiaSharp.SKPaint)">
            <param name="x">The x-coordinate of the rectangle.</param>
            <param name="y">The y-coordinate of the rectangle.</param>
            <param name="w">The rectangle width.</param>
            <param name="h">The rectangle height.</param>
            <param name="rx">The x-radius of the oval used to round the corners.</param>
            <param name="ry">The y-radius of the oval used to round the corners.</param>
            <param name="paint">The paint to use when drawing the rectagle.</param>
            <summary>Draws a rounded rectangle in the canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawSurface(SkiaSharp.SKSurface,SkiaSharp.SKPoint,SkiaSharp.SKPaint)">
            <param name="surface">The surface to draw.</param>
            <param name="p">The destination coordinates for the surface.</param>
            <param name="paint">The paint to use when drawing the surface, or <see langword="null" />.</param>
            <summary>Draws a surface on the canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawSurface(SkiaSharp.SKSurface,System.Single,System.Single,SkiaSharp.SKPaint)">
            <param name="surface">The surface to draw.</param>
            <param name="x">The destination x-coordinate for the surface.</param>
            <param name="y">The destination y-coordinate for the surface.</param>
            <param name="paint">The paint to use when drawing the surface, or <see langword="null" />.</param>
            <summary>Draws a surface on the canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawText(System.Byte[],SkiaSharp.SKPoint,SkiaSharp.SKPaint)">
            <param name="text">The text to draw.</param>
            <param name="p">The coordinates of the origin of the text being drawn.</param>
            <param name="paint">The paint to use when drawing the text.</param>
            <summary>Draws text on the canvas at the specified coordinates.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawText(System.String,SkiaSharp.SKPoint,SkiaSharp.SKPaint)">
            <param name="text">The text to draw.</param>
            <param name="p">The coordinates of the origin of the text being drawn.</param>
            <param name="paint">The paint to use when drawing the text.</param>
            <summary>Draws text on the canvas at the specified coordinates.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawText(System.Byte[],System.Single,System.Single,SkiaSharp.SKPaint)">
            <param name="text">The text to draw.</param>
            <param name="x">The x-coordinate of the origin of the text being drawn.</param>
            <param name="y">The y-coordinate of the origin of the text being drawn.</param>
            <param name="paint">The paint to use when drawing the text.</param>
            <summary>Draws text on the canvas at the specified coordinates.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawText(System.IntPtr,System.Int32,SkiaSharp.SKPoint,SkiaSharp.SKPaint)">
            <param name="buffer">The pointer to a region holding UTF-8 encoded text to draw.</param>
            <param name="length">The number of bytes to read from the <paramref name="buffer." /></param>
            <param name="p">The coordinates of the origin of the text being drawn.</param>
            <param name="paint">The paint to use when drawing the text.</param>
            <summary>Draws text encoded in a UTF-8 buffer on the canvas at the specified coordinates.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawText(System.String,System.Single,System.Single,SkiaSharp.SKPaint)">
            <param name="text">The text to draw.</param>
            <param name="x">The x-coordinate of the origin of the text being drawn.</param>
            <param name="y">The y-coordinate of the origin of the text being drawn.</param>
            <param name="paint">The paint to use when drawing the text.</param>
            <summary>Draws text on the canvas at the specified coordinates.</summary>
            <remarks>
                <para />
                <example>
                    <code lang="C#"><![CDATA[public static void TextSample (SKCanvas canvas, int width, int height)
{
    canvas.DrawColor (SKColors.White);

    using (var paint = new SKPaint ()) {
        paint.TextSize = 64.0f;
        paint.IsAntialias = true;
        paint.Color = new SKColor (0x42, 0x81, 0xA4);
        paint.IsStroke = false;

        canvas.DrawText ("Skia", width / 2f, 64.0f, paint);
    }

    using (var paint = new SKPaint ()) {
        paint.TextSize = 64.0f;
        paint.IsAntialias = true;
        paint.Color = new SKColor (0x9C, 0xAF, 0xB7);
        paint.IsStroke = true;
        paint.StrokeWidth = 3;
        paint.TextAlign = SKTextAlign.Center;

        canvas.DrawText ("Skia", width / 2f, 144.0f, paint);
    }

    using (var paint = new SKPaint ()) {
        paint.TextSize = 64.0f;
        paint.IsAntialias = true;
        paint.Color = new SKColor (0xE6, 0xB8, 0x9C);
        paint.TextScaleX = 1.5f;
        paint.TextAlign = SKTextAlign.Right;

        canvas.DrawText ("Skia", width / 2f, 224.0f, paint);
    }
}]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawText(System.IntPtr,System.Int32,System.Single,System.Single,SkiaSharp.SKPaint)">
            <param name="buffer">The pointer to a region holding UTF-8 encoded text to draw.</param>
            <param name="length">The number of bytes to read from the <paramref name="buffer." /></param>
            <param name="x">The x-coordinate of the origin of the text being drawn.</param>
            <param name="y">The y-coordinate of the origin of the text being drawn.</param>
            <param name="paint">The paint to use when drawing the text.</param>
            <summary>Draws text encoded in a UTF-8 buffer on the canvas at the specified coordinates.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawTextOnPath(System.Byte[],SkiaSharp.SKPath,SkiaSharp.SKPoint,SkiaSharp.SKPaint)">
            <param name="text">The text to draw.</param>
            <param name="path">The path the text should follow for its baseline.</param>
            <param name="offset">The offset to the path to add to the text’s starting position.</param>
            <param name="paint">The paint to use when drawing the text.</param>
            <summary>Draws text on the canvas following a path.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawTextOnPath(System.String,SkiaSharp.SKPath,SkiaSharp.SKPoint,SkiaSharp.SKPaint)">
            <param name="text">The text to draw.</param>
            <param name="path">The path the text should follow for its baseline.</param>
            <param name="offset">The offset to the path to add to the text’s starting position.</param>
            <param name="paint">The paint to use when drawing the text.</param>
            <summary>Draws text on the canvas following a path.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawTextOnPath(System.Byte[],SkiaSharp.SKPath,System.Single,System.Single,SkiaSharp.SKPaint)">
            <param name="text">The text to draw.</param>
            <param name="path">The path the text should follow for its baseline.</param>
            <param name="hOffset">The distance along the path to add to the text’s starting position.</param>
            <param name="vOffset">The distance above (-) or below (+) the path to position the text.</param>
            <param name="paint">The paint to use when drawing the text.</param>
            <summary>Draws text on the canvas following a path.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawTextOnPath(System.IntPtr,System.Int32,SkiaSharp.SKPath,SkiaSharp.SKPoint,SkiaSharp.SKPaint)">
            <param name="buffer">The pointer to a region holding UTF-8 encoded text to draw.</param>
            <param name="length">The number of bytes to read from the <paramref name="buffer." /></param>
            <param name="path">The path the text should follow for its baseline.</param>
            <param name="offset">The offset to the path to add to the text’s starting position.</param>
            <param name="paint">The paint to use when drawing the text.</param>
            <summary>Draws text on the canvas following a path.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawTextOnPath(System.String,SkiaSharp.SKPath,System.Single,System.Single,SkiaSharp.SKPaint)">
            <param name="text">The text to draw.</param>
            <param name="path">The path the text should follow for its baseline.</param>
            <param name="hOffset">The distance along the path to add to the text’s starting position.</param>
            <param name="vOffset">The distance above (-) or below (+) the path to position the text.</param>
            <param name="paint">The paint to use when drawing the text.</param>
            <summary>Draws text on the canvas following a path.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawTextOnPath(System.IntPtr,System.Int32,SkiaSharp.SKPath,System.Single,System.Single,SkiaSharp.SKPaint)">
            <param name="buffer">The pointer to a region holding UTF-8 encoded text to draw.</param>
            <param name="length">The number of bytes to read from the <paramref name="buffer." /></param>
            <param name="path">The path the text should follow for its baseline.</param>
            <param name="hOffset">The distance along the path to add to the text’s starting position.</param>
            <param name="vOffset">The distance above (-) or below (+) the path to position the text.</param>
            <param name="paint">The paint to use when drawing the text.</param>
            <summary>Draws text encoded in a UTF-8 buffer on the canvas following a path.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawUrlAnnotation(SkiaSharp.SKRect,SkiaSharp.SKData)">
            <param name="rect">The bounds of the annotation.</param>
            <param name="value">The data that specifies the URL.</param>
            <summary>Annotates the canvas by associating the specified URL with the specified rectangle (in local coordinates, just like <see cref="M:SkiaSharp.SKCanvas.DrawRect" />).</summary>
            <remarks>
                <para>The caller is responsible for managing its ownership of the data.</para>
                <para>If the backend of this canvas does not support annotations, this call is safely ignored.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawUrlAnnotation(SkiaSharp.SKRect,System.String)">
            <param name="rect">The bounds of the annotation.</param>
            <param name="value">The URL.</param>
            <summary>Annotates the canvas by associating the specified URL with the specified rectangle (in local coordinates, just like <see cref="M:SkiaSharp.SKCanvas.DrawRect" />).</summary>
            <returns>Returns the actual data object that was attached to the canvas.</returns>
            <remarks>If the backend of this canvas does not support annotations, this call is safely ignored.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawVertices(SkiaSharp.SKVertices,SkiaSharp.SKBlendMode,SkiaSharp.SKPaint)">
            <param name="vertices">The mesh to draw.</param>
            <param name="mode">The blend mode to use to combine the colors with the texture, before being drawn using the paint. Used if both texture coordinates and colors are present.</param>
            <param name="paint">The shader/texture.</param>
            <summary>Draws a set of vertices.</summary>
            <remarks>If both textures and vertex-colors are <see langword="null" />, it strokes hairlines with the paint's color. This behavior is a useful debugging mode to visualize the mesh.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawVertices(SkiaSharp.SKVertexMode,SkiaSharp.SKPoint[],SkiaSharp.SKColor[],SkiaSharp.SKPaint)">
            <param name="vmode">How to interpret the array of vertices.</param>
            <param name="vertices">The array of vertices for the mesh.</param>
            <param name="colors">The color for each vertex, to be interpolated across the triangle. May be <see langword="null" />.</param>
            <param name="paint">The shader/texture.</param>
            <summary>Draws an array of vertices, interpreted as triangles (based on mode).</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawVertices(SkiaSharp.SKVertexMode,SkiaSharp.SKPoint[],SkiaSharp.SKPoint[],SkiaSharp.SKColor[],SkiaSharp.SKPaint)">
            <param name="vmode">How to interpret the array of vertices.</param>
            <param name="vertices">The array of vertices for the mesh.</param>
            <param name="texs">The coordinates in texture space (not uv space) for each vertex. May be <see langword="null" />.</param>
            <param name="colors">The color for each vertex, to be interpolated across the triangle. May be <see langword="null" />.</param>
            <param name="paint">The shader/texture.</param>
            <summary>Draws an array of vertices, interpreted as triangles (based on mode).</summary>
            <remarks>If both textures and vertex-colors are <see langword="null" />, it strokes hairlines with the paint's color. This behavior is a useful debugging mode to visualize the mesh.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawVertices(SkiaSharp.SKVertexMode,SkiaSharp.SKPoint[],SkiaSharp.SKPoint[],SkiaSharp.SKColor[],System.UInt16[],SkiaSharp.SKPaint)">
            <param name="vmode">How to interpret the array of vertices.</param>
            <param name="vertices">The array of vertices for the mesh.</param>
            <param name="texs">The coordinates in texture space (not uv space) for each vertex. May be <see langword="null" />.</param>
            <param name="colors">The color for each vertex, to be interpolated across the triangle. May be <see langword="null" />.</param>
            <param name="indices">The array of indices to reference into the vertex (texture coordinates, colors) array.</param>
            <param name="paint">The shader/texture.</param>
            <summary>Draws an array of vertices, interpreted as triangles (based on mode).</summary>
            <remarks>If both textures and vertex-colors are <see langword="null" />, it strokes hairlines with the paint's color. This behavior is a useful debugging mode to visualize the mesh.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.DrawVertices(SkiaSharp.SKVertexMode,SkiaSharp.SKPoint[],SkiaSharp.SKPoint[],SkiaSharp.SKColor[],SkiaSharp.SKBlendMode,System.UInt16[],SkiaSharp.SKPaint)">
            <param name="vmode">How to interpret the array of vertices.</param>
            <param name="vertices">The array of vertices for the mesh.</param>
            <param name="texs">The coordinates in texture space (not uv space) for each vertex. May be <see langword="null" />.</param>
            <param name="colors">The color for each vertex, to be interpolated across the triangle. May be <see langword="null" />.</param>
            <param name="mode">The blend mode to use to combine the colors with the texture, before being drawn using the paint. Used if both texture coordinates and colors are present.</param>
            <param name="indices">The array of indices to reference into the vertex (texture coordinates, colors) array.</param>
            <param name="paint">The shader/texture.</param>
            <summary>Draws an array of vertices, interpreted as triangles (based on mode).</summary>
            <remarks>If both textures and vertex-colors are <see langword="null" />, it strokes hairlines with the paint's color. This behavior is a useful debugging mode to visualize the mesh.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.Flush">
            <summary>Triggers the immediate execution of all pending draw operations.</summary>
            <remarks>For the GPU backend this will resolve all rendering to the GPU surface backing the surface that owns this canvas.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.GetDeviceClipBounds(SkiaSharp.SKRectI@)">
            <param name="bounds">The resulting clip bounds.</param>
            <summary>Returns the bounds of the current clip (in device coordinates).</summary>
            <returns>Returns true if the clip bounds are non-empty, otherwise false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.GetLocalClipBounds(SkiaSharp.SKRect@)">
            <param name="bounds">The resulting clip bounds.</param>
            <summary>Returns the bounds of the current clip (in local coordinates).</summary>
            <returns>Returns true if the clip bounds are non-empty, otherwise false.</returns>
            <remarks>This can be useful in that it tells you that drawing outside of these bounds will be clipped out.</remarks>
        </member>
        <member name="P:SkiaSharp.SKCanvas.LocalClipBounds">
            <summary>Gets the bounds of the current clip (in local coordinates).</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.QuickReject(SkiaSharp.SKPath)">
            <param name="path">The path to compare with the current clip.</param>
            <summary>Checks to see if the specified path, after being transformed by the current matrix, would lie completely outside of the current clip.</summary>
            <returns>Returns true if the path (transformed by the canvas' matrix) does not intersect with the canvas’ clip.</returns>
            <remarks>Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls).</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.QuickReject(SkiaSharp.SKRect)">
            <param name="rect">The rectangle to compare with the current clip.</param>
            <summary>Checks to see if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip.</summary>
            <returns>Returns true if the rectangle (transformed by the canvas' matrix) does not intersect with the canvas’ clip.</returns>
            <remarks>Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls).</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.ResetMatrix">
            <summary>Sets the current matrix to identity.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.Restore">
            <summary>Restore the canvas state.</summary>
            <remarks>This call balances a previous call to <see cref="M:SkiaSharp.SKCanvas.Save" />, and is used to remove all modifications to the matrix, clip and draw filter state since the last save call. It is an error to restore more times than was previously saved.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.RestoreToCount(System.Int32)">
            <param name="count">The number of <see cref="M:SkiaSharp.SKCanvas.Save" /> levels to restore from, or -1 to restore all the way back to the initial value.</param>
            <summary>Efficiently restores the state to a specific level.</summary>
            <remarks>Efficient way to pop any calls to <see cref="M:SkiaSharp.SKCanvas.Save" /> that happened after the save count reached <paramref name="count" />. It is an error for <paramref name="count" /> to be greater than <see cref="P:SkiaSharp.SKCanvas.SaveCount" />. To pop all the way back to the initial matrix/clip context set count to -1.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.RotateDegrees(System.Single)">
            <param name="degrees">The number of degrees to rotate.</param>
            <summary>Pre-concats the current matrix with the specified rotation.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.RotateDegrees(System.Single,System.Single,System.Single)">
            <param name="degrees">The number of degrees to rotate.</param>
            <param name="px">The x-coordinate of the point to rotate about.</param>
            <param name="py">The y-coordinate of the point to rotate about.</param>
            <summary>Pre-concats the current matrix with the specified rotation, around the specified point.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.RotateRadians(System.Single)">
            <param name="radians">The number of radians to rotate.</param>
            <summary>Pre-concats the current matrix with the specified rotation.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.RotateRadians(System.Single,System.Single,System.Single)">
            <param name="radians">The number of radians to rotate.</param>
            <param name="px">The x-coordinate of the point to rotate about.</param>
            <param name="py">The y-coordinate of the point to rotate about.</param>
            <summary>Pre-concats the current matrix with the specified rotation, around the specified point.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.Save">
            <summary>Saves the canvas state.</summary>
            <returns>The value to pass to <see cref="M:SkiaSharp.SKCanvas.RestoreToCount" /> to balance this save.</returns>
            <remarks>This call saves the current matrix, clip, and draw filter, and pushes a copy onto a private stack. Subsequent calls to translate, scale, rotate, skew, concat or clipping path or drawing filter all operate on this copy. When the balancing call to <see cref="M:SkiaSharp.SKCanvas.Restore" /> is made, the previous matrix, clipping, and drawing filters are restored.</remarks>
        </member>
        <member name="P:SkiaSharp.SKCanvas.SaveCount">
            <summary>Gets the number of matrix/clip states on the canvas' private stack.</summary>
            <value>
                <para />
            </value>
            <remarks>This will equal the number of <see cref="M:SkiaSharp.SKCanvas.Save" /> calls minus <see cref="M:SkiaSharp.SKCanvas.Restore" /> calls + 1. The save count on a new canvas is 1.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.SaveLayer(SkiaSharp.SKPaint)">
            <param name="paint">This is copied, and is applied to the offscreen when <see cref="M:SkiaSharp.SKCanvas.Restore" /> is called.</param>
            <summary>Saves the canvas state and allocates an offscreen bitmap.</summary>
            <returns>The value to pass to <see cref="M:SkiaSharp.SKCanvas.RestoreToCount" /> to balance this save.</returns>
            <remarks>This behaves the same as <see cref="M:SkiaSharp.SKCanvas.Save" /> but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to <see cref="M:SkiaSharp.SKCanvas.Restore" /> is made is that offscreen transfered to the canvas (or the previous layer).</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.SaveLayer(SkiaSharp.SKRect,SkiaSharp.SKPaint)">
            <param name="limit">This clipping rectangle hint to limit the size of the offscreen bitmap.</param>
            <param name="paint">This is copied, and is applied to the offscreen when <see cref="M:SkiaSharp.SKCanvas.Restore" /> is called.</param>
            <summary>Saves the canvas state and allocates an offscreen bitmap.</summary>
            <returns>The value to pass to <see cref="M:SkiaSharp.SKCanvas.RestoreToCount" /> to balance this save.</returns>
            <remarks>
                <para>This behaves the same as <see cref="M:SkiaSharp.SKCanvas.Save" /> but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to <see cref="M:SkiaSharp.SKCanvas.Restore" /> is made is that offscreen transfered to the canvas (or the previous layer).</para>
                <para>The limit rectangle, is used as a hint to limit the size of the offscreen bitmap, and thus drawing may be clipped to it, though that clipping is not guaranteed to happen. If exact clipping is desired, use <see cref="M:SkiaSharp.SKCanvas.ClipRect" />.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.Scale(SkiaSharp.SKPoint)">
            <param name="size">The amount to scale.</param>
            <summary>Pre-concats the current matrix with the specified scale.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.Scale(System.Single)">
            <param name="s">The amount to scale.</param>
            <summary>Pre-concats the current matrix with the specified scale.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.Scale(System.Single,System.Single)">
            <param name="sx">The amount to scale in the x-direction.</param>
            <param name="sy">The amount to scale in the y-direction.</param>
            <summary>Pre-concats the current matrix with the specified scale.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.Scale(System.Single,System.Single,System.Single,System.Single)">
            <param name="sx">The amount to scale in the x-direction.</param>
            <param name="sy">The amount to scale in the y-direction.</param>
            <param name="px">The x-coordinate for the scaling center.</param>
            <param name="py">The y-coordinate for the scaling center.</param>
            <summary>Pre-concats the current matrix with the specified scale, at the specific offset.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.SetMatrix(SkiaSharp.SKMatrix)">
            <param name="matrix">The matrix that will be copied into the current matrix.</param>
            <summary>Replaces the current matrix with a copy of the specified matrix.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.Skew(SkiaSharp.SKPoint)">
            <param name="skew">The amount to skew.</param>
            <summary>Pre-concats the current matrix with the specified skew.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.Skew(System.Single,System.Single)">
            <param name="sx">The amount to skew in the x-direction.</param>
            <param name="sy">The amount to skew in the y-direction.</param>
            <summary>Pre-concats the current matrix with the specified skew.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKCanvas.TotalMatrix">
            <summary>Gets the current matrix on the canvas.</summary>
            <value>
                <para />
            </value>
            <remarks>This does not account for the translate in any of the devices.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.Translate(SkiaSharp.SKPoint)">
            <param name="point">The distance to translate.</param>
            <summary>Pre-concats the current matrix with the specified translation.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCanvas.Translate(System.Single,System.Single)">
            <param name="dx">The distance to translate in the x-direction</param>
            <param name="dy">The distance to translate in the y-direction.</param>
            <summary>Pre-concats the current matrix with the specified translation.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKClipOperation">
            <summary>The logical operations that can be performed when combining two regions.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKClipOperation.Difference">
            <summary>Subtract the op region from the first region.</summary>
        </member>
        <member name="F:SkiaSharp.SKClipOperation.Intersect">
            <summary>Intersect the two regions.</summary>
        </member>
        <member name="T:SkiaSharp.SKCodec">
            <summary>An abstraction layer directly on top of an image codec.</summary>
            <remarks />
        </member>
        <member name="M:SkiaSharp.SKCodec.Create(SkiaSharp.SKData)">
            <param name="data">The data to use when creating the codec.</param>
            <summary>Creates a codec from the specified data.</summary>
            <returns>Returns the new instance of the codec, or null if there was an error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.Create(SkiaSharp.SKStream)">
            <param name="stream">The stream to use when creating the codec.</param>
            <summary>Creates a codec from the specified stream.</summary>
            <returns>Returns the new instance of the codec, or null if there was an error.</returns>
            <remarks>If null is returned, the stream is deleted immediately. Otherwise, the codec takes ownership of it, and will delete it when done with it.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKCodec.EncodedFormat">
            <summary>Gets the image encoding from the codec.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKCodec.EncodedInfo">
            <summary>Gets the encoded image information from the codec.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKCodec.FrameCount">
            <summary>Gets the number of frames in the encoded image.</summary>
            <value>
                <para />
            </value>
            <remarks>May require reading through the stream to determine info about the frames. As such, future decoding calls may require a rewind. For single-frame images, this will be zero.</remarks>
        </member>
        <member name="P:SkiaSharp.SKCodec.FrameInfo">
            <summary>Gets information about the frames in the encoded image.</summary>
            <value>
                <para />
            </value>
            <remarks>May require reading through the stream to determine info about the frames. As such, future decoding calls may require a rewind. For single-frame images, this will be an empty array.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.GetOutputScanline(System.Int32)">
            <param name="inputScanline">The scanline that is located in the encoded data.</param>
            <summary>Returns the output y-coordinate of the row that corresponds to an input y-coordinate.</summary>
            <returns>Returns the output y-coordinate of the row.</returns>
            <remarks>This will equal <paramref name="inputScanline" />, except in the case of strangely encoded image types (bottom-up bmps, interlaced gifs).</remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.GetPixels(System.Byte[]@)">
            <param name="pixels">The memory block with the decoded bitmap.</param>
            <summary>Decode the bitmap into the specified memory block.</summary>
            <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.GetPixels(SkiaSharp.SKImageInfo,System.Byte[])">
            <param name="info">The description of the desired output format expected by the caller.</param>
            <param name="pixels">The memory block to hold the decoded bitmap, with a length of at least <see cref="P:SkiaSharp.SKImageInfo.BytesSize" />.</param>
            <summary>Decode the bitmap into the specified memory block.</summary>
            <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
            <remarks>
                <para>The specified <see cref="T:SkiaSharp.SKImageInfo" />, can either be <see cref="P:SkiaSharp.SKCodec.Info" />, or a new instance with a different configuration - which the codec may choose to ignore.</para>
                <para>If the spcified size is different from the size from <see cref="P:SkiaSharp.SKCodec.Info" />, then the codec will attempt to scale the resulting bitmap. If the codec cannot perform this scale, this method will return <see cref="F:SkiaSharp.SKCodecResult.InvalidScale" />.</para>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.GetPixels(SkiaSharp.SKImageInfo,System.Byte[]@)">
            <param name="info">The description of the desired output format expected by the caller.</param>
            <param name="pixels">The memory block with the decoded bitmap.</param>
            <summary>Decode the bitmap into the specified memory block.</summary>
            <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
            <remarks>
                <para>The specified <see cref="T:SkiaSharp.SKImageInfo" />, can either be <see cref="P:SkiaSharp.SKCodec.Info" />, or a new instance with a different configuration - which the codec may choose to ignore.</para>
                <para>If the spcified size is different from the size from <see cref="P:SkiaSharp.SKCodec.Info" />, then the codec will attempt to scale the resulting bitmap. If the codec cannot perform this scale, this method will return <see cref="F:SkiaSharp.SKCodecResult.InvalidScale" />.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.GetPixels(SkiaSharp.SKImageInfo,System.IntPtr)">
            <param name="info">The description of the desired output format expected by the caller.</param>
            <param name="pixels">The memory block to hold the decoded bitmap, with a total size of at least <see cref="P:SkiaSharp.SKImageInfo.BytesSize" />.</param>
            <summary>Decode the bitmap into the specified memory block.</summary>
            <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
            <remarks>
                <para>The specified <see cref="T:SkiaSharp.SKImageInfo" />, can either be <see cref="P:SkiaSharp.SKCodec.Info" />, or a new instance with a different configuration - which the codec may choose to ignore.</para>
                <para>If the spcified size is different from the size from <see cref="P:SkiaSharp.SKCodec.Info" />, then the codec will attempt to scale the resulting bitmap. If the codec cannot perform this scale, this method will return <see cref="F:SkiaSharp.SKCodecResult.InvalidScale" />.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.GetPixels(SkiaSharp.SKImageInfo,System.IntPtr,SkiaSharp.SKCodecOptions)">
            <param name="info">The description of the desired output format expected by the caller.</param>
            <param name="pixels">The memory block to hold the decoded bitmap, with a total size of at least <see cref="P:SkiaSharp.SKImageInfo.BytesSize" />.</param>
            <param name="options">The bitmap decoding options.</param>
            <summary>Decode the bitmap into the specified memory block.</summary>
            <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
            <remarks>
                <para>The specified <see cref="T:SkiaSharp.SKImageInfo" />, can either be <see cref="P:SkiaSharp.SKCodec.Info" />, or a new instance with a different configuration - which the codec may choose to ignore.</para>
                <para>If the spcified size is different from the size from <see cref="P:SkiaSharp.SKCodec.Info" />, then the codec will attempt to scale the resulting bitmap. If the codec cannot perform this scale, this method will return <see cref="F:SkiaSharp.SKCodecResult.InvalidScale" />.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.GetPixels(SkiaSharp.SKImageInfo,System.IntPtr,SkiaSharp.SKColorTable,System.Int32@)">
            <param name="info">The description of the desired output format expected by the caller.</param>
            <param name="pixels">The memory block to hold the decoded bitmap, with a total size of at least <see cref="P:SkiaSharp.SKImageInfo.BytesSize" />.</param>
            <param name="colorTable">The color table to hold the color entries.</param>
            <param name="colorTableCount">The logical number of color table entries.</param>
            <summary>Decode the bitmap into the specified memory block.</summary>
            <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
            <remarks>
                <para>The specified <see cref="T:SkiaSharp.SKImageInfo" />, can either be <see cref="P:SkiaSharp.SKCodec.Info" />, or a new instance with a different configuration - which the codec may choose to ignore.</para>
                <para>If the spcified size is different from the size from <see cref="P:SkiaSharp.SKCodec.Info" />, then the codec will attempt to scale the resulting bitmap. If the codec cannot perform this scale, this method will return <see cref="F:SkiaSharp.SKCodecResult.InvalidScale" />.</para>
                <para>If specified color type is <see cref="F:SkiaSharp.SKColorType.Index8" />, then the caller must provide a <see cref="T:SkiaSharp.SKColorTable" />. On success, the codec will copy the colors into that storage, and set colorTableCount to the logical number of table entries.</para>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.GetPixels(SkiaSharp.SKImageInfo,System.IntPtr,System.Int32,SkiaSharp.SKCodecOptions)">
            <param name="info">The description of the desired output format expected by the caller.</param>
            <param name="pixels">The memory block to hold the decoded bitmap, with a total size of at least <see cref="P:SkiaSharp.SKImageInfo.BytesSize" />.</param>
            <param name="rowBytes">The number of bytes in a row, typically <see cref="P:SkiaSharp.SKImageInfo.RowBytes" />.</param>
            <param name="options">The bitmap decoding options.</param>
            <summary>Decode the bitmap into the specified memory block.</summary>
            <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
            <remarks>
                <para>The specified <see cref="T:SkiaSharp.SKImageInfo" />, can either be <see cref="P:SkiaSharp.SKCodec.Info" />, or a new instance with a different configuration - which the codec may choose to ignore.</para>
                <para>If the spcified size is different from the size from <see cref="P:SkiaSharp.SKCodec.Info" />, then the codec will attempt to scale the resulting bitmap. If the codec cannot perform this scale, this method will return <see cref="F:SkiaSharp.SKCodecResult.InvalidScale" />.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.GetPixels(SkiaSharp.SKImageInfo,System.IntPtr,System.IntPtr,System.Int32@)">
            <param name="info">The description of the desired output format expected by the caller.</param>
            <param name="pixels">The memory block to hold the decoded bitmap, with a total size of at least <see cref="P:SkiaSharp.SKImageInfo.BytesSize" />.</param>
            <param name="colorTable">The pointer to the color table to hold the color entries, with a length of at least <see cref="F:SkiaSharp.SKColorTable.MaxLength" /> (256).</param>
            <param name="colorTableCount">The logical number of color table entries.</param>
            <summary>Decode the bitmap into the specified memory block.</summary>
            <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
            <remarks>
                <para>The specified <see cref="T:SkiaSharp.SKImageInfo" />, can either be <see cref="P:SkiaSharp.SKCodec.Info" />, or a new instance with a different configuration - which the codec may choose to ignore.</para>
                <para>If the spcified size is different from the size from <see cref="P:SkiaSharp.SKCodec.Info" />, then the codec will attempt to scale the resulting bitmap. If the codec cannot perform this scale, this method will return <see cref="F:SkiaSharp.SKCodecResult.InvalidScale" />.</para>
                <para>If specified color type is <see cref="F:SkiaSharp.SKColorType.Index8" />, then the caller must provide a color table array, with a length of at least 256. On success, the codec will copy the colors into that storage, and set colorTableCount to the logical number of table entries.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.GetPixels(SkiaSharp.SKImageInfo,System.IntPtr,SkiaSharp.SKCodecOptions,SkiaSharp.SKColorTable,System.Int32@)">
            <param name="info">The description of the desired output format expected by the caller.</param>
            <param name="pixels">The memory block to hold the decoded bitmap, with a total size of at least <see cref="P:SkiaSharp.SKImageInfo.BytesSize" />.</param>
            <param name="options">The bitmap decoding options.</param>
            <param name="colorTable">The color table to hold the color entries.</param>
            <param name="colorTableCount">The logical number of color table entries.</param>
            <summary>Decode the bitmap into the specified memory block.</summary>
            <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
            <remarks>
                <para>The specified <see cref="T:SkiaSharp.SKImageInfo" />, can either be <see cref="P:SkiaSharp.SKCodec.Info" />, or a new instance with a different configuration - which the codec may choose to ignore.</para>
                <para>If the spcified size is different from the size from <see cref="P:SkiaSharp.SKCodec.Info" />, then the codec will attempt to scale the resulting bitmap. If the codec cannot perform this scale, this method will return <see cref="F:SkiaSharp.SKCodecResult.InvalidScale" />.</para>
                <para>If specified color type is <see cref="F:SkiaSharp.SKColorType.Index8" />, then the caller must provide a <see cref="T:SkiaSharp.SKColorTable" />. On success, the codec will copy the colors into that storage, and set colorTableCount to the logical number of table entries.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.GetPixels(SkiaSharp.SKImageInfo,System.IntPtr,SkiaSharp.SKCodecOptions,System.IntPtr,System.Int32@)">
            <param name="info">The description of the desired output format expected by the caller.</param>
            <param name="pixels">The memory block to hold the decoded bitmap, with a total size of at least <see cref="P:SkiaSharp.SKImageInfo.BytesSize" />.</param>
            <param name="options">The bitmap decoding options.</param>
            <param name="colorTable">The pointer to the color table to hold the color entries, with a length of at least <see cref="F:SkiaSharp.SKColorTable.MaxLength" /> (256).</param>
            <param name="colorTableCount">The logical number of color table entries.</param>
            <summary>Decode the bitmap into the specified memory block.</summary>
            <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
            <remarks>
                <para>The specified <see cref="T:SkiaSharp.SKImageInfo" />, can either be <see cref="P:SkiaSharp.SKCodec.Info" />, or a new instance with a different configuration - which the codec may choose to ignore.</para>
                <para>If the spcified size is different from the size from <see cref="P:SkiaSharp.SKCodec.Info" />, then the codec will attempt to scale the resulting bitmap. If the codec cannot perform this scale, this method will return <see cref="F:SkiaSharp.SKCodecResult.InvalidScale" />.</para>
                <para>If specified color type is <see cref="F:SkiaSharp.SKColorType.Index8" />, then the caller must provide a color table array, with a length of at least 256. On success, the codec will copy the colors into that storage, and set colorTableCount to the logical number of table entries.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.GetPixels(SkiaSharp.SKImageInfo,System.IntPtr,System.Int32,SkiaSharp.SKCodecOptions,SkiaSharp.SKColorTable,System.Int32@)">
            <param name="info">The description of the desired output format expected by the caller.</param>
            <param name="pixels">The memory block to hold the decoded bitmap, with a total size of at least <see cref="P:SkiaSharp.SKImageInfo.BytesSize" />.</param>
            <param name="rowBytes">The number of bytes in a row, typically <see cref="P:SkiaSharp.SKImageInfo.RowBytes" />.</param>
            <param name="options">The bitmap decoding options.</param>
            <param name="colorTable">The color table to hold the color entries.</param>
            <param name="colorTableCount">The logical number of color table entries.</param>
            <summary>Decode the bitmap into the specified memory block.</summary>
            <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
            <remarks>
                <para>The specified <see cref="T:SkiaSharp.SKImageInfo" />, can either be <see cref="P:SkiaSharp.SKCodec.Info" />, or a new instance with a different configuration - which the codec may choose to ignore.</para>
                <para>If the spcified size is different from the size from <see cref="P:SkiaSharp.SKCodec.Info" />, then the codec will attempt to scale the resulting bitmap. If the codec cannot perform this scale, this method will return <see cref="F:SkiaSharp.SKCodecResult.InvalidScale" />.</para>
                <para>If specified color type is <see cref="F:SkiaSharp.SKColorType.Index8" />, then the caller must provide a <see cref="T:SkiaSharp.SKColorTable" />. On success, the codec will copy the colors into that storage, and set colorTableCount to the logical number of table entries.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.GetPixels(SkiaSharp.SKImageInfo,System.IntPtr,System.Int32,SkiaSharp.SKCodecOptions,System.IntPtr,System.Int32@)">
            <param name="info">The description of the desired output format expected by the caller.</param>
            <param name="pixels">The memory block to hold the decoded bitmap, with a total size of at least <see cref="P:SkiaSharp.SKImageInfo.BytesSize" />.</param>
            <param name="rowBytes">The number of bytes in a row, typically <see cref="P:SkiaSharp.SKImageInfo.RowBytes" />.</param>
            <param name="options">The bitmap decoding options.</param>
            <param name="colorTable">The pointer to the color table to hold the color entries, with a length of at least <see cref="F:SkiaSharp.SKColorTable.MaxLength" /> (256).</param>
            <param name="colorTableCount">The logical number of color table entries.</param>
            <summary>Decode the bitmap into the specified memory block.</summary>
            <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
            <remarks>
                <para>The specified <see cref="T:SkiaSharp.SKImageInfo" />, can either be <see cref="P:SkiaSharp.SKCodec.Info" />, or a new instance with a different configuration - which the codec may choose to ignore.</para>
                <para>If the spcified size is different from the size from <see cref="P:SkiaSharp.SKCodec.Info" />, then the codec will attempt to scale the resulting bitmap. If the codec cannot perform this scale, this method will return <see cref="F:SkiaSharp.SKCodecResult.InvalidScale" />.</para>
                <para>If specified color type is <see cref="F:SkiaSharp.SKColorType.Index8" />, then the caller must provide a color table array, with a length of at least 256. On success, the codec will copy the colors into that storage, and set colorTableCount to the logical number of table entries.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.GetScaledDimensions(System.Single)">
            <param name="desiredScale">The desired scale factor.</param>
            <summary>Returns a size that approximately supports the desired scale factor.</summary>
            <returns>Returns a supported size.</returns>
            <remarks>The codec may not be able to scale efficiently to the exact scale factor requested, so return a size that approximates that scale. Upscaling is not supported, so the original size will be returned.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.GetScanlines(System.IntPtr,System.Int32,System.Int32)">
            <param name="dst">The memory location to store the scanlines.</param>
            <param name="countLines">The number of lines to write.</param>
            <param name="rowBytes">The number of bytes per row.</param>
            <summary>Writes the next set of scanlines into the destination.</summary>
            <returns>Returns the number of lines successfully decoded.</returns>
            <remarks>If number of lines successfully decoded is less than <paramref name="countLines" />, this will fill the remaining lines with a default value.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.GetValidSubset(SkiaSharp.SKRectI@)">
            <param name="desiredSubset">The desired subset of the original bounds, which may be modified to a subset which is supported.</param>
            <summary>Modifies the specified subset to one that can decoded from this codec.</summary>
            <returns>Returns true if this codec supports decoding the desired subset, otherwise false. The final subset can be used with <see cref="P:SkiaSharp.SKCodecOptions.Subset" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.IncrementalDecode">
            <summary>Start or continue the incremental decode.</summary>
            <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> if all lines requested in <see cref="M:SkiaSharp.SKCodec.StartIncrementalDecode" /> have been completely decoded. <see cref="F:SkiaSharp.SKCodecResult.IncompleteInput" /> otherwise.</returns>
            <remarks>Unlike <see cref="M:SkiaSharp.SKCodec.GetPixels" />, this does not do any filling. This is left up to the caller, since they may be skipping lines or continuing the decode later.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.IncrementalDecode(System.Int32@)">
            <param name="rowsDecoded">The total number of lines initialized. Only meaningful if this method returns <see cref="F:SkiaSharp.SKCodecResult.IncompleteInput" />.</param>
            <summary>Start or continue the incremental decode.</summary>
            <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> if all lines requested in <see cref="M:SkiaSharp.SKCodec.StartIncrementalDecode" /> have been completely decoded. <see cref="F:SkiaSharp.SKCodecResult.IncompleteInput" /> otherwise.</returns>
            <remarks>Unlike <see cref="M:SkiaSharp.SKCodec.GetPixels" />, this does not do any filling. This is left up to the caller, since they may be skipping lines or continuing the decode later.</remarks>
        </member>
        <member name="P:SkiaSharp.SKCodec.Info">
            <summary>Gets the image information from the codec.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKCodec.MinBufferedBytesNeeded">
            <summary>Gets the minimum number of bytes that must be buffered in stream input.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKCodec.NextScanline">
            <summary>Gets the y-coordinate of the next row to be returned by the scanline decoder.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKCodec.Origin">
            <summary>Gets the image origin from the codec.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKCodec.Pixels">
            <summary>Gets the image data from the codec using the current <see cref="P:SkiaSharp.SKCodec.Info" />.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKCodec.RepetitionCount">
            <summary>Gets the number of times to repeat, if this image is animated.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para>For infinite repetition of frames, this will be -1.</para>
                <para>May require reading the stream to find the repetition count. As such, future decoding calls may require a rewind. For single-frame images, this will be 0.</para>
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKCodec.ScanlineOrder">
            <summary>Gets the order in which scanlines will be returned by the scanline decoder.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.SkipScanlines(System.Int32)">
            <param name="countLines">The number of scanlines to skip.</param>
            <summary>Skip the specified number of scanlines.</summary>
            <returns>Returns <see langword="true" /> if the scanlines were successfully skipped, otherwise <see langword="false" /> on failure (incomplete input, the number of lines is less than zero, read all the lines).</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.StartIncrementalDecode(SkiaSharp.SKImageInfo,System.IntPtr,System.Int32)">
            <param name="info">The image information of the destination. If the dimensions do not match those of <see cref="P:SkiaSharp.SKCodec.Info" />, this implies a scale.</param>
            <param name="pixels">The memory to write to. Needs to be large enough to hold the subset, if present, or the full image.</param>
            <param name="rowBytes">The stride of the memory to write to.</param>
            <summary>Prepare for an incremental decode with the specified options.</summary>
            <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.StartIncrementalDecode(SkiaSharp.SKImageInfo,System.IntPtr,System.Int32,SkiaSharp.SKCodecOptions)">
            <param name="info">The image information of the destination. If the dimensions do not match those of <see cref="P:SkiaSharp.SKCodec.Info" />, this implies a scale.</param>
            <param name="pixels">The memory to write to. Needs to be large enough to hold the subset, if present, or the full image.</param>
            <param name="rowBytes">The stride of the memory to write to.</param>
            <param name="options">The decoding options, including if memory is zero initialized and whether to decode a subset.</param>
            <summary>Prepare for an incremental decode with the specified options.</summary>
            <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.StartIncrementalDecode(SkiaSharp.SKImageInfo,System.IntPtr,System.Int32,SkiaSharp.SKCodecOptions,SkiaSharp.SKColorTable,System.Int32@)">
            <param name="info">The image information of the destination. If the dimensions do not match those of <see cref="P:SkiaSharp.SKCodec.Info" />, this implies a scale.</param>
            <param name="pixels">The memory to write to. Needs to be large enough to hold the subset, if present, or the full image.</param>
            <param name="rowBytes">The stride of the memory to write to.</param>
            <param name="options">The decoding options, including if memory is zero initialized and whether to decode a subset.</param>
            <param name="colorTable">The color table to use.</param>
            <param name="colorTableCount">The size of the color table.</param>
            <summary>Prepare for an incremental decode with the specified options.</summary>
            <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.StartIncrementalDecode(SkiaSharp.SKImageInfo,System.IntPtr,System.Int32,SkiaSharp.SKCodecOptions,System.IntPtr,System.Int32@)">
            <param name="info">The image information of the destination. If the dimensions do not match those of <see cref="P:SkiaSharp.SKCodec.Info" />, this implies a scale.</param>
            <param name="pixels">The memory to write to. Needs to be large enough to hold the subset, if present, or the full image.</param>
            <param name="rowBytes">The stride of the memory to write to.</param>
            <param name="options">The decoding options, including if memory is zero initialized and whether to decode a subset.</param>
            <param name="colorTable">The pointer to the color table to use.</param>
            <param name="colorTableCount">The size of the color table.</param>
            <summary>Prepare for an incremental decode with the specified options.</summary>
            <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.StartScanlineDecode(SkiaSharp.SKImageInfo)">
            <param name="info">The image information of the destination. If the dimensions do not match those of <see cref="P:SkiaSharp.SKCodec.Info" />, this implies a scale.</param>
            <summary>Prepare for a scanline decode.</summary>
            <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
            <remarks>Not all codecs support this.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.StartScanlineDecode(SkiaSharp.SKImageInfo,SkiaSharp.SKCodecOptions)">
            <param name="info">The image information of the destination. If the dimensions do not match those of <see cref="P:SkiaSharp.SKCodec.Info" />, this implies a scale.</param>
            <param name="options">The decoding options, including if memory is zero initialized and whether to decode a subset.</param>
            <summary>Prepare for a scanline decode with the specified options.</summary>
            <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
            <remarks>Not all codecs support this.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.StartScanlineDecode(SkiaSharp.SKImageInfo,SkiaSharp.SKCodecOptions,SkiaSharp.SKColorTable,System.Int32@)">
            <param name="info">The image information of the destination. If the dimensions do not match those of <see cref="P:SkiaSharp.SKCodec.Info" />, this implies a scale.</param>
            <param name="options">The decoding options, including if memory is zero initialized and whether to decode a subset.</param>
            <param name="colorTable">The color table to use.</param>
            <param name="colorTableCount">The size of the color table.</param>
            <summary>Prepare for a scanline decode with the specified options.</summary>
            <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
            <remarks>Not all codecs support this.</remarks>
        </member>
        <member name="M:SkiaSharp.SKCodec.StartScanlineDecode(SkiaSharp.SKImageInfo,SkiaSharp.SKCodecOptions,System.IntPtr,System.Int32@)">
            <param name="info">The image information of the destination. If the dimensions do not match those of <see cref="P:SkiaSharp.SKCodec.Info" />, this implies a scale.</param>
            <param name="options">The decoding options, including if memory is zero initialized and whether to decode a subset.</param>
            <param name="colorTable">The pointer to the color table to use.</param>
            <param name="colorTableCount">The size of the color table.</param>
            <summary>Prepare for a scanline decode with the specified options.</summary>
            <returns>Returns <see cref="F:SkiaSharp.SKCodecResult.Success" /> on success, or another value explaining the type of failure.</returns>
            <remarks>Not all codecs support this.</remarks>
        </member>
        <member name="T:SkiaSharp.SKCodecFrameInfo">
            <summary>Information about individual frames in a multi-framed image.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKCodecFrameInfo.AlphaType">
            <summary>Gets or sets a value indicating the frame’s alpha value.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKCodecFrameInfo.Duration">
            <summary>Gets or sets the number of milliseconds to show this frame.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKCodecFrameInfo.FullyRecieved">
            <summary>Gets or sets a value indicating whether the end marker for this frame is contained in the stream.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKCodecFrameInfo.RequiredFrame">
            <summary>Gets or sets the frame that this frame needs to be blended with, or -1.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKCodecOptions">
            <summary>Additional options to pass to <see cref="M:SkiaSharp.SKCodec.GetPixels" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKCodecOptions(SkiaSharp.SKRectI)">
            <param name="subset">The subset rectangle.</param>
            <summary>Create a new instance of <see cref="T:SkiaSharp.SKCodecOptions" /> with the specified subset rectangle.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKCodecOptions(SkiaSharp.SKZeroInitialized)">
            <param name="zeroInitialized">The zero-initialization.</param>
            <summary>Create a new instance of <see cref="T:SkiaSharp.SKCodecOptions" /> with the specified zero-initialization.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKCodecOptions(SkiaSharp.SKZeroInitialized,SkiaSharp.SKRectI)">
            <param name="zeroInitialized">The zero-initialization.</param>
            <param name="subset">The subset rectangle.</param>
            <summary>Create a new instance of <see cref="T:SkiaSharp.SKCodecOptions" /> with the specified subset rectangle and zero-initialization.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKCodecOptions(System.Int32,System.Boolean)">
            <param name="frameIndex">The frame to decode.</param>
            <param name="hasPriorFrame">Whether the decode destination already contains the prior frame.</param>
            <summary>Create a new instance of <see cref="T:SkiaSharp.SKCodecOptions" />.</summary>
            <remarks>Only meaningful for multi-frame images.</remarks>
        </member>
        <member name="F:SkiaSharp.SKCodecOptions.Default">
            <summary>Gets the default options.</summary>
            <remarks>The default value is not zero-initialized and without a subset rectangle.</remarks>
        </member>
        <member name="P:SkiaSharp.SKCodecOptions.FrameIndex">
            <summary>Gets or sets the frame to decode.</summary>
            <value>
                <para />
            </value>
            <remarks>Only meaningful for multi-frame images.</remarks>
        </member>
        <member name="P:SkiaSharp.SKCodecOptions.HasPriorFrame">
            <summary>Gets or sets a value indicating whether the decode destination already contains the prior frame.</summary>
            <value>
                <para />
            </value>
            <remarks>Only meaningful for multi-frame images.</remarks>
        </member>
        <member name="P:SkiaSharp.SKCodecOptions.HasSubset">
            <summary>Gets a value indicating whether the options has a subset rectangle.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKCodecOptions.PremulBehavior">
            <summary>Gets or sets a value indicating whether the decode should do a linear premultiply or a legacy premultiply.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKCodecOptions.Subset">
            <summary>Gets or sets the subset rectangle.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKCodecOptions.ZeroInitialized">
            <summary>Gets or sets the zero-initialization.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKCodecOrigin">
            <summary>The various origins of a bitmap.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKCodecOrigin.BottomLeft">
            <summary>Reflected across x-axis.</summary>
        </member>
        <member name="F:SkiaSharp.SKCodecOrigin.BottomRight">
            <summary>Rotated 180°.</summary>
        </member>
        <member name="F:SkiaSharp.SKCodecOrigin.LeftBottom">
            <summary>Rotated 90° counter-clockwise.</summary>
        </member>
        <member name="F:SkiaSharp.SKCodecOrigin.LeftTop">
            <summary>Reflected across x-axis, Rotated 90° counter-clockwise.</summary>
        </member>
        <member name="F:SkiaSharp.SKCodecOrigin.RightBottom">
            <summary>Reflected across x-axis, Rotated 90° clockwise.</summary>
        </member>
        <member name="F:SkiaSharp.SKCodecOrigin.RightTop">
            <summary>Rotated 90° clockwise.</summary>
        </member>
        <member name="F:SkiaSharp.SKCodecOrigin.TopLeft">
            <summary>Default.</summary>
        </member>
        <member name="F:SkiaSharp.SKCodecOrigin.TopRight">
            <summary>Reflected across y-axis.</summary>
        </member>
        <member name="T:SkiaSharp.SKCodecResult">
            <summary>Used to describe the result of a call to <see cref="M:SkiaSharp.SKCodec.GetPixels" />.</summary>
            <remarks>Result is the union of possible results from subclasses.</remarks>
        </member>
        <member name="F:SkiaSharp.SKCodecResult.CouldNotRewind">
            <summary>Fulfilling this request requires rewinding the input, which is not supported for this input.</summary>
        </member>
        <member name="F:SkiaSharp.SKCodecResult.IncompleteInput">
            <summary>The input is incomplete. A partial image was generated.</summary>
        </member>
        <member name="F:SkiaSharp.SKCodecResult.InvalidConversion">
            <summary>The codec cannot convert to match the request, ignoring dimensions.</summary>
        </member>
        <member name="F:SkiaSharp.SKCodecResult.InvalidInput">
            <summary>The input did not contain a valid image.</summary>
        </member>
        <member name="F:SkiaSharp.SKCodecResult.InvalidParameters">
            <summary>The parameters (besides info) are invalid. e.g. null pixels, row bytes too small, etc.</summary>
        </member>
        <member name="F:SkiaSharp.SKCodecResult.InvalidScale">
            <summary>The generator cannot scale to requested size.</summary>
        </member>
        <member name="F:SkiaSharp.SKCodecResult.Success">
            <summary>The general return value for success.</summary>
        </member>
        <member name="F:SkiaSharp.SKCodecResult.Unimplemented">
            <summary>This method is not supported by this codec.</summary>
        </member>
        <member name="T:SkiaSharp.SKCodecScanlineOrder">
            <summary>The orders in which scanlines can be returned.</summary>
            <remarks>These values are obtained through the <see cref="P:SkiaSharp.SKCodec.ScanlineOrder" /> property.</remarks>
        </member>
        <member name="F:SkiaSharp.SKCodecScanlineOrder.BottomUp">
            <summary>Indicates that the scanline decoder reliably outputs rows, but they will be returned in reverse order. The <see cref="P:SkiaSharp.SKCodec.NextScanline" /> property can be used to determine the actual y-coordinate of the next output row.</summary>
        </member>
        <member name="F:SkiaSharp.SKCodecScanlineOrder.TopDown">
            <summary>Indicates that the image can be decoded reliably using the scanline decoder, and that rows will be output in the logical order.</summary>
        </member>
        <member name="T:SkiaSharp.SKColor">
            <summary>32-bit ARGB unpremultiplied color value.</summary>
            <remarks>The color components are always in a known order.</remarks>
        </member>
        <member name="C:SkiaSharp.SKColor(System.UInt32)">
            <param name="value">The integer value of the unpremultiplied color.</param>
            <summary>Creates a color from the specified integer.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKColor(System.Byte,System.Byte,System.Byte)">
            <param name="red">The red component.</param>
            <param name="green">The green component.</param>
            <param name="blue">The blue component.</param>
            <summary>Creates a color from the specified red, green and blue components.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKColor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <param name="red">The red component.</param>
            <param name="green">The green component.</param>
            <param name="blue">The blue component.</param>
            <param name="alpha">The alpha component.</param>
            <summary>Creates a color from the specified red, green, blue and alpha components.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKColor.Alpha">
            <summary>Gets the alpha component of the color.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKColor.Blue">
            <summary>Gets the blue component of the color.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKColor.Empty">
            <summary>Gets an “empty” color, with zero for all the components.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColor.Equals(System.Object)">
            <param name="other">The object to compare with the current object.</param>
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>Returns <see langword="true" /> if the specified object is equal to the current object; otherwise, <see langword="false" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColor.FromHsl(System.Single,System.Single,System.Single,System.Byte)">
            <param name="h">The hue value.</param>
            <param name="s">The saturation value.</param>
            <param name="l">The lightness/luminosity value.</param>
            <param name="a">The alpha value.</param>
            <summary>Creates a color from the specified hue, saturation, lightness/luminosity and alpha values.</summary>
            <returns>The new <see cref="T:SkiaSharp.SKColor" /> instance.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColor.FromHsv(System.Single,System.Single,System.Single,System.Byte)">
            <param name="h">The hue value.</param>
            <param name="s">The saturation value.</param>
            <param name="v">The value/brightness value.</param>
            <param name="a">The alpha value.</param>
            <summary>Creates a color from the specified hue, saturation, value/brightness and alpha values.</summary>
            <returns>The new <see cref="T:SkiaSharp.SKColor" /> instance.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColor.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>Returns a hash code for the current object.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKColor.Green">
            <summary>Gets the green component of the color.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKColor.Hue">
            <summary>Gets the hue value.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColor.op_Equality(SkiaSharp.SKColor,SkiaSharp.SKColor)">
            <param name="left">The first color to compare.</param>
            <param name="right">The second color to compare.</param>
            <summary>Indicates whether two <see cref="T:SkiaSharp.SKColor" /> objects are equal.</summary>
            <returns>Returns <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />, otherwise <see langword="false" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColor.op_Explicit(SkiaSharp.SKColor)~System.UInt32">
            <param name="color">The color to convert.</param>
            <summary>Converts a <see cref="T:SkiaSharp.SKColor" /> to a UInt32.</summary>
            <returns>The UInt32 value for the color.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColor.op_Implicit(System.UInt32)~SkiaSharp.SKColor">
            <param name="color">The UInt32 representation of a color.</param>
            <summary>Converts a UInt32 to a <see cref="T:SkiaSharp.SKColor" />.</summary>
            <returns>The new <see cref="T:SkiaSharp.SKColor" /> instance.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColor.op_Inequality(SkiaSharp.SKColor,SkiaSharp.SKColor)">
            <param name="left">The first color to compare.</param>
            <param name="right">The second color to compare.</param>
            <summary>Indicates whether two <see cref="T:SkiaSharp.SKColor" /> objects are different.</summary>
            <returns>Returns <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />, otherwise <see langword="false" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColor.Parse(System.String)">
            <param name="hexString">The hexadecimal string representation of a color.</param>
            <summary>Converts the hexadecimal string representation of a color to its <see cref="T:SkiaSharp.SKColor" /> equivalent.</summary>
            <returns>The new <see cref="T:SkiaSharp.SKColor" /> instance.</returns>
            <remarks>This method can parse a string in the forms with or without a preceding ‘#’ character: AARRGGB, RRGGBB, ARGB, RGB.</remarks>
        </member>
        <member name="P:SkiaSharp.SKColor.Red">
            <summary>Gets the red component of the color.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColor.ToHsl(System.Single@,System.Single@,System.Single@)">
            <param name="h">The hue value.</param>
            <param name="s">The saturation value.</param>
            <param name="l">The lightness/luminosity value.</param>
            <summary>Converts the current color into it’s hue, saturation and lightness/luminosity values.</summary>
            <remarks>The alpha value is separate from the HSL calculation and will always be the same as <see cref="P:SkiaSharp.SKColor.Alpha" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKColor.ToHsv(System.Single@,System.Single@,System.Single@)">
            <param name="h">The hue value.</param>
            <param name="s">The saturation value.</param>
            <param name="v">The value/brightness value.</param>
            <summary>Converts the current color into it’s hue, saturation and value/brightness values.</summary>
            <remarks>The alpha value is separate from the HSV/HSB calculation and will always be the same as <see cref="P:SkiaSharp.SKColor.Alpha" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKColor.ToString">
            <summary>Returns the color as a string in the format: #AARRGGBB.</summary>
            <returns>
                <para />
            </returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColor.TryParse(System.String,SkiaSharp.SKColor@)">
            <param name="hexString">The hexadecimal string representation of a color.</param>
            <param name="color">The new <see cref="T:SkiaSharp.SKColor" /> instance.</param>
            <summary>Converts the hexadecimal string representation of a color to its <see cref="T:SkiaSharp.SKColor" /> equivalent.</summary>
            <returns>Returns tru if the conversion was successful, otherwise false.</returns>
            <remarks>This method can parse a string in the forms with or without a preceding ‘#’ character: AARRGGB, RRGGBB, ARGB, RGB.</remarks>
        </member>
        <member name="M:SkiaSharp.SKColor.WithAlpha(System.Byte)">
            <param name="alpha">The new alpha component.</param>
            <summary>Returns a new color based on this current instance, but with the new alpha channel value.</summary>
            <returns>
                <para />
            </returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColor.WithBlue(System.Byte)">
            <param name="blue">The new blue component.</param>
            <summary>Returns a new color based on this current instance, but with the new blue channel value.</summary>
            <returns>
                <para />
            </returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColor.WithGreen(System.Byte)">
            <param name="green">The new green component.</param>
            <summary>Returns a new color based on this current instance, but with the new green channel value.</summary>
            <returns>
                <para />
            </returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColor.WithRed(System.Byte)">
            <param name="red">The new red component.</param>
            <summary>Returns a new color based on this current instance, but with the new red channel value.</summary>
            <returns>
                <para />
            </returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKColorFilter">
            <summary>Color filters for use with the <see cref="P:SkiaSharp.SKPaint.ColorFilter" /> property of a <see cref="T:SkiaSharp.SKPaint" />.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColorFilter.ColorMatrixSize">
            <summary>The size of the color matrix.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColorFilter.CreateBlendMode(SkiaSharp.SKColor,SkiaSharp.SKBlendMode)">
            <param name="c">The source color used with the specified mode.</param>
            <param name="mode">The blend mode mode that is applied to each color.</param>
            <summary>Creates a new color filter that uses the specified color and mode.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKColorFilter" />, or <see langword="null" /> if the mode will have no effect.</returns>
            <remarks>If the <paramref name="mode" /> is <see cref="F:SkiaSharp.SKBlendMode.Dst" />, this function will return <see langword="null" /> (since that mode will have no effect on the result).</remarks>
        </member>
        <member name="M:SkiaSharp.SKColorFilter.CreateColorMatrix(System.Single[])">
            <param name="matrix">An array of <see cref="F:SkiaSharp.SKColorFilter.ColorMatrixSize" /> elements.</param>
            <summary>Creates a new color filter that transforms a color by a 4x5 (row-major) matrix.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKColorFilter" />.</returns>
            <remarks>The matrix is in row-major order and the translation column is specified in unnormalized, 0...255, space.</remarks>
        </member>
        <member name="M:SkiaSharp.SKColorFilter.CreateCompose(SkiaSharp.SKColorFilter,SkiaSharp.SKColorFilter)">
            <param name="outer">The outer (second) filter to apply.</param>
            <param name="inner">The inner (first) filter to apply.</param>
            <summary>Creates a new composition color filter, whose effect is to first apply the inner filter and then apply the outer filter to the result of the inner's.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKColorFilter" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColorFilter.CreateHighContrast(SkiaSharp.SKHighContrastConfig)">
            <param name="config">The high contrast configuration settings.</param>
            <summary>Creates a new high contrast color filter which provides transformations to improve contrast for users with low vision.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKColorFilter" />.</returns>
            <remarks>Applies the following transformations in this order: conversion to grayscale, color inversion, increasing the resulting contrast.</remarks>
        </member>
        <member name="M:SkiaSharp.SKColorFilter.CreateHighContrast(System.Boolean,SkiaSharp.SKHighContrastConfigInvertStyle,System.Single)">
            <param name="grayscale">Whether or not the color will be converted to grayscale.</param>
            <param name="invertStyle">Whether or not to invert brightness, lightness, or neither.</param>
            <param name="contrast">The amount to adjust the contrast by, in the range -1.0 through 1.0.</param>
            <summary>Creates a new high contrast color filter which provides transformations to improve contrast for users with low vision.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKColorFilter" />.</returns>
            <remarks>Applies the following transformations in this order: conversion to grayscale, color inversion, increasing the resulting contrast.</remarks>
        </member>
        <member name="M:SkiaSharp.SKColorFilter.CreateLighting(SkiaSharp.SKColor,SkiaSharp.SKColor)">
            <param name="mul">The color to multiply the source color by. The alpha component is ignored.</param>
            <param name="add">The color to add to the source color. The alpha component is ignored.</param>
            <summary>Creates a new lighting color filter that multiplies the RGB channels by one color, and then adds a second color, pinning the result for each component to [0..255].</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKColorFilter" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColorFilter.CreateLumaColor">
            <summary>Creates a new luminance-to-alpha color filter.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKColorFilter" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColorFilter.CreateTable(System.Byte[])">
            <param name="table">The table of values for each color component, with a length of <see cref="F:SkiaSharp.SKColorTable.MaxLength" />.</param>
            <summary>Creates a new table color filter.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKColorFilter" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColorFilter.CreateTable(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <param name="tableA">The table of values for the alpha component, with a length of <see cref="F:SkiaSharp.SKColorTable.MaxLength" />.</param>
            <param name="tableR">The table of values for the red component, with a length of <see cref="F:SkiaSharp.SKColorTable.MaxLength" />.</param>
            <param name="tableG">The table of values for the green component, with a length of <see cref="F:SkiaSharp.SKColorTable.MaxLength" />.</param>
            <param name="tableB">The table of values for the blue component, with a length of <see cref="F:SkiaSharp.SKColorTable.MaxLength" />.</param>
            <summary>Creates a new table color filter.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKColorFilter" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColorFilter.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKColors">
            <summary>Definitions for some common color names.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.AliceBlue">
            <summary>Gets the pre-defined color of alice blue, or #FFF0F8FF.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.AntiqueWhite">
            <summary>Gets the pre-defined color of antique white, or #FFFAEBD7.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Aqua">
            <summary>Gets the pre-defined color of aqua, or #FF00FFFF.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Aquamarine">
            <summary>Gets the pre-defined color of aquamarine, or #FF7FFFD4.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Azure">
            <summary>Gets the pre-defined color of azure, or #FFF0FFFF.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Beige">
            <summary>Gets the pre-defined color of beige, or #FFF5F5DC.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Bisque">
            <summary>Gets the pre-defined color of bisque, or #FFFFE4C4.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Black">
            <summary>Gets the pre-defined color of black, or #FF000000.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.BlanchedAlmond">
            <summary>Gets the pre-defined color of blanched almond, or #FFFFEBCD.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Blue">
            <summary>Gets the pre-defined color of blue, or #FF0000FF.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.BlueViolet">
            <summary>Gets the pre-defined color of blue violet, or #FF8A2BE2.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Brown">
            <summary>Gets the pre-defined color of brown, or #FFA52A2A.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.BurlyWood">
            <summary>Gets the pre-defined color of burly wood, or #FFDEB887.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.CadetBlue">
            <summary>Gets the pre-defined color of cadet blue, or #FF5F9EA0.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Chartreuse">
            <summary>Gets the pre-defined color of chartreuse, or #FF7FFF00.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Chocolate">
            <summary>Gets the pre-defined color of chocolate, or #FFD2691E.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Coral">
            <summary>Gets the pre-defined color of coral, or #FFFF7F50.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.CornflowerBlue">
            <summary>Gets the pre-defined color of cornflower blue, or #FF6495ED.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Cornsilk">
            <summary>Gets the pre-defined color of cornsilk, or #FFFFF8DC.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Crimson">
            <summary>Gets the pre-defined color of crimson, or #FFDC143C.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Cyan">
            <summary>Gets the pre-defined color of cyan, or #FF00FFFF.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.DarkBlue">
            <summary>Gets the pre-defined color of dark blue, or #FF00008B.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.DarkCyan">
            <summary>Gets the pre-defined color of dark cyan, or #FF008B8B.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.DarkGoldenrod">
            <summary>Gets the pre-defined color of dark goldenrod, or #FFB8860B.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.DarkGray">
            <summary>Gets the pre-defined color of dark gray, or #FFA9A9A9.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.DarkGreen">
            <summary>Gets the pre-defined color of dark green, or #FF006400.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.DarkKhaki">
            <summary>Gets the pre-defined color of dark khaki, or #FFBDB76B.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.DarkMagenta">
            <summary>Gets the pre-defined color of dark magenta, or #FF8B008B.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.DarkOliveGreen">
            <summary>Gets the pre-defined color of dark olive green, or #FF556B2F.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.DarkOrange">
            <summary>Gets the pre-defined color of dark orange, or #FFFF8C00.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.DarkOrchid">
            <summary>Gets the pre-defined color of dark orchid, or #FF9932CC.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.DarkRed">
            <summary>Gets the pre-defined color of dark red, or #FF8B0000.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.DarkSalmon">
            <summary>Gets the pre-defined color of dark salmon, or #FFE9967A.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.DarkSeaGreen">
            <summary>Gets the pre-defined color of dark sea green, or #FF8FBC8B.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.DarkSlateBlue">
            <summary>Gets the pre-defined color of dark slate blue, or #FF483D8B.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.DarkSlateGray">
            <summary>Gets the pre-defined color of dark slate gray, or #FF2F4F4F.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.DarkTurquoise">
            <summary>Gets the pre-defined color of dark turquoise, or #FF00CED1.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.DarkViolet">
            <summary>Gets the pre-defined color of dark violet, or #FF9400D3.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.DeepPink">
            <summary>Gets the pre-defined color of deep pink, or #FFFF1493.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.DeepSkyBlue">
            <summary>Gets the pre-defined color of deep sky blue, or #FF00BFFF.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.DimGray">
            <summary>Gets the pre-defined color of dim gray, or #FF696969.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.DodgerBlue">
            <summary>Gets the pre-defined color of dodger blue, or #FF1E90FF.</summary>
            <remarks />
        </member>
        <member name="P:SkiaSharp.SKColors.Empty">
            <summary>Gets the pre-defined empty color (black transparent), or #00000000.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKColors.Firebrick">
            <summary>Gets the pre-defined color of firebrick, or #FFB22222.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.FloralWhite">
            <summary>Gets the pre-defined color of floral white, or #FFFFFAF0.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.ForestGreen">
            <summary>Gets the pre-defined color of forest green, or #FF228B22.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Fuchsia">
            <summary>Gets the pre-defined color of fuchsia, or #FFFF00FF.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Gainsboro">
            <summary>Gets the pre-defined color of gainsboro, or #FFDCDCDC.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.GhostWhite">
            <summary>Gets the pre-defined color of ghost white, or #FFF8F8FF.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Gold">
            <summary>Gets the pre-defined color of gold, or #FFFFD700.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Goldenrod">
            <summary>Gets the pre-defined color of goldenrod, or #FFDAA520.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Gray">
            <summary>Gets the pre-defined color of gray, or #FF808080.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Green">
            <summary>Gets the pre-defined color of green, or #FF008000.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.GreenYellow">
            <summary>Gets the pre-defined color of green yellow, or #FFADFF2F.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Honeydew">
            <summary>Gets the pre-defined color of honeydew, or #FFF0FFF0.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.HotPink">
            <summary>Gets the pre-defined color of hot pink, or #FFFF69B4.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.IndianRed">
            <summary>Gets the pre-defined color of indian red, or #FFCD5C5C.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Indigo">
            <summary>Gets the pre-defined color of indigo, or #FF4B0082.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Ivory">
            <summary>Gets the pre-defined color of ivory, or #FFFFFFF0.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Khaki">
            <summary>Gets the pre-defined color of khaki, or #FFF0E68C.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Lavender">
            <summary>Gets the pre-defined color of lavender, or #FFE6E6FA.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.LavenderBlush">
            <summary>Gets the pre-defined color of lavender blush, or #FFFFF0F5.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.LawnGreen">
            <summary>Gets the pre-defined color of lawn green, or #FF7CFC00.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.LemonChiffon">
            <summary>Gets the pre-defined color of lemon chiffon, or #FFFFFACD.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.LightBlue">
            <summary>Gets the pre-defined color of light blue, or #FFADD8E6.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.LightCoral">
            <summary>Gets the pre-defined color of light coral, or #FFF08080.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.LightCyan">
            <summary>Gets the pre-defined color of light cyan, or #FFE0FFFF.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.LightGoldenrodYellow">
            <summary>Gets the pre-defined color of light goldenrod yellow, or #FFFAFAD2.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.LightGray">
            <summary>Gets the pre-defined color of light gray, or #FFD3D3D3.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.LightGreen">
            <summary>Gets the pre-defined color of light green, or #FF90EE90.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.LightPink">
            <summary>Gets the pre-defined color of light pink, or #FFFFB6C1.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.LightSalmon">
            <summary>Gets the pre-defined color of light salmon, or #FFFFA07A.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.LightSeaGreen">
            <summary>Gets the pre-defined color of light sea green, or #FF20B2AA.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.LightSkyBlue">
            <summary>Gets the pre-defined color of light sky blue, or #FF87CEFA.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.LightSlateGray">
            <summary>Gets the pre-defined color of light slate gray, or #FF778899.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.LightSteelBlue">
            <summary>Gets the pre-defined color of light steel blue, or #FFB0C4DE.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.LightYellow">
            <summary>Gets the pre-defined color of light yellow, or #FFFFFFE0.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Lime">
            <summary>Gets the pre-defined color of lime, or #FF00FF00.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.LimeGreen">
            <summary>Gets the pre-defined color of lime green, or #FF32CD32.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Linen">
            <summary>Gets the pre-defined color of linen, or #FFFAF0E6.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Magenta">
            <summary>Gets the pre-defined color of magenta, or #FFFF00FF.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Maroon">
            <summary>Gets the pre-defined color of maroon, or #FF800000.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.MediumAquamarine">
            <summary>Gets the pre-defined color of medium aquamarine, or #FF66CDAA.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.MediumBlue">
            <summary>Gets the pre-defined color of medium blue, or #FF0000CD.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.MediumOrchid">
            <summary>Gets the pre-defined color of medium orchid, or #FFBA55D3.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.MediumPurple">
            <summary>Gets the pre-defined color of medium purple, or #FF9370DB.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.MediumSeaGreen">
            <summary>Gets the pre-defined color of medium sea green, or #FF3CB371.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.MediumSlateBlue">
            <summary>Gets the pre-defined color of medium slate blue, or #FF7B68EE.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.MediumSpringGreen">
            <summary>Gets the pre-defined color of medium spring green, or #FF00FA9A.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.MediumTurquoise">
            <summary>Gets the pre-defined color of medium turquoise, or #FF48D1CC.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.MediumVioletRed">
            <summary>Gets the pre-defined color of medium violet red, or #FFC71585.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.MidnightBlue">
            <summary>Gets the pre-defined color of midnight blue, or #FF191970.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.MintCream">
            <summary>Gets the pre-defined color of mint cream, or #FFF5FFFA.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.MistyRose">
            <summary>Gets the pre-defined color of misty rose, or #FFFFE4E1.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Moccasin">
            <summary>Gets the pre-defined color of moccasin, or #FFFFE4B5.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.NavajoWhite">
            <summary>Gets the pre-defined color of navajo white, or #FFFFDEAD.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Navy">
            <summary>Gets the pre-defined color of navy, or #FF000080.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.OldLace">
            <summary>Gets the pre-defined color of old lace, or #FFFDF5E6.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Olive">
            <summary>Gets the pre-defined color of olive, or #FF808000.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.OliveDrab">
            <summary>Gets the pre-defined color of olive drab, or #FF6B8E23.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Orange">
            <summary>Gets the pre-defined color of orange, or #FFFFA500.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.OrangeRed">
            <summary>Gets the pre-defined color of orange red, or #FFFF4500.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Orchid">
            <summary>Gets the pre-defined color of orchid, or #FFDA70D6.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.PaleGoldenrod">
            <summary>Gets the pre-defined color of pale goldenrod, or #FFEEE8AA.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.PaleGreen">
            <summary>Gets the pre-defined color of pale green, or #FF98FB98.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.PaleTurquoise">
            <summary>Gets the pre-defined color of pale turquoise, or #FFAFEEEE.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.PaleVioletRed">
            <summary>Gets the pre-defined color of pale violet red, or #FFDB7093.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.PapayaWhip">
            <summary>Gets the pre-defined color of papaya whip, or #FFFFEFD5.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.PeachPuff">
            <summary>Gets the pre-defined color of peach puff, or #FFFFDAB9.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Peru">
            <summary>Gets the pre-defined color of peru, or #FFCD853F.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Pink">
            <summary>Gets the pre-defined color of pink, or #FFFFC0CB.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Plum">
            <summary>Gets the pre-defined color of plum, or #FFDDA0DD.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.PowderBlue">
            <summary>Gets the pre-defined color of powder blue, or #FFB0E0E6.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Purple">
            <summary>Gets the pre-defined color of purple, or #FF800080.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Red">
            <summary>Gets the pre-defined color of red, or #FFFF0000.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.RosyBrown">
            <summary>Gets the pre-defined color of rosy brown, or #FFBC8F8F.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.RoyalBlue">
            <summary>Gets the pre-defined color of royal blue, or #FF4169E1.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.SaddleBrown">
            <summary>Gets the pre-defined color of saddle brown, or #FF8B4513.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Salmon">
            <summary>Gets the pre-defined color of salmon, or #FFFA8072.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.SandyBrown">
            <summary>Gets the pre-defined color of sandy brown, or #FFF4A460.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.SeaGreen">
            <summary>Gets the pre-defined color of sea green, or #FF2E8B57.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.SeaShell">
            <summary>Gets the pre-defined color of sea shell, or #FFFFF5EE.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Sienna">
            <summary>Gets the pre-defined color of sienna, or #FFA0522D.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Silver">
            <summary>Gets the pre-defined color of silver, or #FFC0C0C0.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.SkyBlue">
            <summary>Gets the pre-defined color of sky blue, or #FF87CEEB.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.SlateBlue">
            <summary>Gets the pre-defined color of slate blue, or #FF6A5ACD.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.SlateGray">
            <summary>Gets the pre-defined color of slate gray, or #FF708090.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Snow">
            <summary>Gets the pre-defined color of snow, or #FFFFFAFA.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.SpringGreen">
            <summary>Gets the pre-defined color of spring green, or #FF00FF7F.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.SteelBlue">
            <summary>Gets the pre-defined color of steel blue, or #FF4682B4.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Tan">
            <summary>Gets the pre-defined color of tan, or #FFD2B48C.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Teal">
            <summary>Gets the pre-defined color of teal, or #FF008080.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Thistle">
            <summary>Gets the pre-defined color of thistle, or #FFD8BFD8.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Tomato">
            <summary>Gets the pre-defined color of tomato, or #FFFF6347.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Transparent">
            <summary>Gets the pre-defined color of white transparent, or #00FFFFFF.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Turquoise">
            <summary>Gets the pre-defined color of turquoise, or #FF40E0D0.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Violet">
            <summary>Gets the pre-defined color of violet, or #FFEE82EE.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Wheat">
            <summary>Gets the pre-defined color of wheat, or #FFF5DEB3.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.White">
            <summary>Gets the pre-defined color of white, or #FFFFFFFF.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.WhiteSmoke">
            <summary>Gets the pre-defined color of white smoke, or #FFF5F5F5.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.Yellow">
            <summary>Gets the pre-defined color of yellow, or #FFFFFF00.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColors.YellowGreen">
            <summary>Gets the pre-defined color of yellow green, or #FF9ACD32.</summary>
            <remarks />
        </member>
        <member name="T:SkiaSharp.SKColorSpace">
            <summary>Represents a color space.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColorSpace.CreateIcc(System.Byte[])">
            <param name="input">The ICC profile data.</param>
            <summary>Creates a new instance of <see cref="T:SkiaSharp.SKColorSpace" /> from an ICC profile.</summary>
            <returns>Returns the new instance of <see cref="T:SkiaSharp.SKColorSpace" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColorSpace.CreateIcc(System.Byte[],System.Int64)">
            <param name="input">The ICC profile data.</param>
            <param name="length">The size of the data.</param>
            <summary>Creates a new instance of <see cref="T:SkiaSharp.SKColorSpace" /> from an ICC profile.</summary>
            <returns>Returns the new instance of <see cref="T:SkiaSharp.SKColorSpace" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColorSpace.CreateIcc(System.IntPtr,System.Int64)">
            <param name="input">The ICC profile data.</param>
            <param name="length">The size of the data.</param>
            <summary>Creates a new instance of <see cref="T:SkiaSharp.SKColorSpace" /> from an ICC profile.</summary>
            <returns>Returns the new instance of <see cref="T:SkiaSharp.SKColorSpace" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColorSpace.CreateRgb(SkiaSharp.SKColorSpaceRenderTargetGamma,SkiaSharp.SKColorSpaceGamut,SkiaSharp.SKColorSpaceFlags)">
            <param name="gamma">The gamma transfer function.</param>
            <param name="gamut">The color gamut.</param>
            <param name="flags">The optional flags.</param>
            <summary>Creates a new instance of <see cref="T:SkiaSharp.SKColorSpace" /> from a transfer function and a color gamut.</summary>
            <returns>Returns the new instance of <see cref="T:SkiaSharp.SKColorSpace" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColorSpace.CreateRgb(SkiaSharp.SKColorSpaceRenderTargetGamma,SkiaSharp.SKMatrix44,SkiaSharp.SKColorSpaceFlags)">
            <param name="gamma">The gamma transfer function.</param>
            <param name="toXyzD50">The matrix transformation to XYZ D50.</param>
            <param name="flags">The optional flags.</param>
            <summary>Creates a new instance of <see cref="T:SkiaSharp.SKColorSpace" /> from a transfer function and a color gamut.</summary>
            <returns>Returns the new instance of <see cref="T:SkiaSharp.SKColorSpace" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColorSpace.CreateRgb(SkiaSharp.SKColorSpaceTransferFn,SkiaSharp.SKColorSpaceGamut,SkiaSharp.SKColorSpaceFlags)">
            <param name="coeffs">The coefficients for a common transfer function equation.</param>
            <param name="gamut">The color gamut.</param>
            <param name="flags">The optional flags.</param>
            <summary>Creates a new instance of <see cref="T:SkiaSharp.SKColorSpace" /> from a transfer function and a color gamut.</summary>
            <returns>Returns the new instance of <see cref="T:SkiaSharp.SKColorSpace" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColorSpace.CreateRgb(SkiaSharp.SKColorSpaceTransferFn,SkiaSharp.SKMatrix44,SkiaSharp.SKColorSpaceFlags)">
            <param name="coeffs">The coefficients for a common transfer function equation.</param>
            <param name="toXyzD50">The matrix transformation to XYZ D50.</param>
            <param name="flags">The optional flags.</param>
            <summary>Creates a new instance of <see cref="T:SkiaSharp.SKColorSpace" /> from a transfer function and a color gamut.</summary>
            <returns>Returns the new instance of <see cref="T:SkiaSharp.SKColorSpace" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColorSpace.CreateSrgb">
            <summary>Creates a new instance of <see cref="T:SkiaSharp.SKColorSpace" /> that represents the sRGB color space.</summary>
            <returns>Returns the new instance of <see cref="T:SkiaSharp.SKColorSpace" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColorSpace.CreateSrgbLinear">
            <summary>Creates a new instance of <see cref="T:SkiaSharp.SKColorSpace" /> with the sRGB primaries, but a linear (1.0) gamma</summary>
            <returns>Returns the new instance of <see cref="T:SkiaSharp.SKColorSpace" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColorSpace.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKColorSpace.Equal(SkiaSharp.SKColorSpace,SkiaSharp.SKColorSpace)">
            <param name="left">The first color space.</param>
            <param name="right">The second color space.</param>
            <summary>Comapre two color spaces to determine if they are equivalent.</summary>
            <returns>Returns <see langword="true" /> if both color spaces are equivalent, otherwise <see langword="false" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKColorSpace.GammaIsCloseToSrgb">
            <summary>Gets a value indicating whether or not the color space gamma is near enough to be approximated as sRGB.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKColorSpace.GammaIsLinear">
            <summary>Gets a value indicating whether or not the color space gamma is linear.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKColorSpace.IsSrgb">
            <summary>Gets a value indicating whether or not the color space is sRGB.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColorSpace.ToXyzD50">
            <summary>Converts the color space to a XYZ D50 matrix that describes the color space.</summary>
            <returns>Returns the matrix if the color gamut can be described as a matrix, otherwise <see langword="null" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColorSpace.ToXyzD50(SkiaSharp.SKMatrix44)">
            <param name="toXyzD50">The matrix that describes the color space.</param>
            <summary>Converts the color space to a XYZ D50 matrix that describes the color space.</summary>
            <returns>Returns <see langword="true" /> if the color gamut can be described as a matrix, otherwise <see langword="false" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKColorSpaceFlags">
            <summary>Various flags that are used when creating a <see cref="T:SkiaSharp.SKColorSpace" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKColorSpaceFlags.None">
            <summary>Default construction.</summary>
        </member>
        <member name="F:SkiaSharp.SKColorSpaceFlags.NonLinearBlending">
            <summary>Blending is non-linear.</summary>
        </member>
        <member name="T:SkiaSharp.SKColorSpaceGamut">
            <summary>Various gamut values for use with a <see cref="T:SkiaSharp.SKColorSpace" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKColorSpaceGamut.AdobeRgb">
            <summary>Adobe RGB.</summary>
        </member>
        <member name="F:SkiaSharp.SKColorSpaceGamut.Dcip3D65">
            <summary>DCI-P3 D65.</summary>
        </member>
        <member name="F:SkiaSharp.SKColorSpaceGamut.Rec2020">
            <summary>Rec. 2020 (ITU-R Recommendation BT.2020).</summary>
        </member>
        <member name="F:SkiaSharp.SKColorSpaceGamut.Srgb">
            <summary>sRGB.</summary>
        </member>
        <member name="T:SkiaSharp.SKColorSpacePrimaries">
            <summary>Describes a color gamut with primaries and a white point.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKColorSpacePrimaries(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <param name="rx">The red X-coordinate.</param>
            <param name="ry">The red Y-coordinate.</param>
            <param name="gx">The green X-coordinate.</param>
            <param name="gy">The green Y-coordinate.</param>
            <param name="bx">The blue X-coordinate.</param>
            <param name="by">The blue Y-coordinate.</param>
            <param name="wx">The white X-coordinate.</param>
            <param name="wy">The white Y-coordinate.</param>
            <summary>Creates a new <see cref="T:SkiaSharp.SKColorSpacePrimaries" /> instance.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKColorSpacePrimaries.BX">
            <summary>Gets or sets the blue X-coordinate.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKColorSpacePrimaries.BY">
            <summary>Gets or sets the blue Y-coordinate.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKColorSpacePrimaries.GX">
            <summary>Gets or sets the green X-coordinate.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKColorSpacePrimaries.GY">
            <summary>Gets or sets the green Y-coordinate.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKColorSpacePrimaries.RX">
            <summary>Gets or sets the red X-coordinate.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKColorSpacePrimaries.RY">
            <summary>Gets or sets the red Y-coordinate.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColorSpacePrimaries.ToXyzD50">
            <summary>Converts primaries and a white point to a XYZ D50 matrix, the preferred color gamut representation of <see cref="T:SkiaSharp.SKColorSpace" />.</summary>
            <returns>Returns the XYZ D50 matrix, or <see langword="null" /> if the conversion is not possible.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColorSpacePrimaries.ToXyzD50(SkiaSharp.SKMatrix44)">
            <param name="toXyzD50">The XYZ D50 matrix.</param>
            <summary>Converts primaries and a white point to a XYZ D50 matrix, the preferred color gamut representation of <see cref="T:SkiaSharp.SKColorSpace" />.</summary>
            <returns>Returns <see langword="true" /> if the conversion succeeded, otherwise <see langword="false" /> if the conversion is not possible.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKColorSpacePrimaries.WX">
            <summary>Gets or sets the white X-coordinate.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKColorSpacePrimaries.WY">
            <summary>Gets or sets the white Y-coordinate.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKColorSpaceRenderTargetGamma">
            <summary>Represents gamma transfer functions.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKColorSpaceRenderTargetGamma.Linear">
            <summary>The transfer function is linear.</summary>
        </member>
        <member name="F:SkiaSharp.SKColorSpaceRenderTargetGamma.Srgb">
            <summary>The transfer function is the canonical sRGB curve, which has a short linear segment followed by a 2.4f exponential.</summary>
        </member>
        <member name="T:SkiaSharp.SKColorSpaceTransferFn">
            <summary>Represents the coefficients for a common transfer function equation.</summary>
            <remarks>
                <para>The coefficients are specified as a transformation from a curved space to linear. </para>
                <para />
                <para>LinearVal = C*InputVal + F;   (for 0.0f &lt;= InputVal &lt; D)</para>
                <para>LinearVal = (A*InputVal + B)^G + E;   (forD &lt;= InputVal &lt;= 1.0f)</para>
                <para />
                <para>Function is undefined if InputVal is not in [ 0.0f, 1.0f ].</para>
                <para>Resulting LinearVals must be in [ 0.0f, 1.0f ].</para>
                <para>Function must be positive and increasing.</para>
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKColorSpaceTransferFn(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <param name="g">The G coefficient.</param>
            <param name="a">The A coefficient.</param>
            <param name="b">The B coefficient.</param>
            <param name="c">The C coefficient.</param>
            <param name="d">The D coefficient.</param>
            <param name="e">The E coefficient.</param>
            <param name="f">The F coefficient.</param>
            <summary>Creates a new intance of <see cref="T:SkiaSharp.SKColorSpaceTransferFn" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKColorSpaceTransferFn.A">
            <summary>Gets or sets the A coefficient.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKColorSpaceTransferFn.B">
            <summary>Gets or sets the B coefficient.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKColorSpaceTransferFn.C">
            <summary>Gets or sets the C coefficient.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKColorSpaceTransferFn.D">
            <summary>Gets or sets the D coefficient.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKColorSpaceTransferFn.E">
            <summary>Gets or sets the E coefficient.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKColorSpaceTransferFn.F">
            <summary>Gets or sets the F coefficient.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKColorSpaceTransferFn.G">
            <summary>Gets or sets the G coefficient.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColorSpaceTransferFn.Invert">
            <summary>Inverts coefficients for a common transfer function equation.</summary>
            <returns>Returns the mathematically inverted parametric transfer function equation.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKColorTable">
            <summary>Holds a premultiplied color table for indexed 8-bit bitmaps.</summary>
            <remarks>This class is used to represent a color lookup table for indexed bitmap images. The table can contain up to <see cref="F:SkiaSharp.SKColorTable.MaxLength" /> (256) colors (8 bits). The colors are stored are premultiplied 32-bit colors.</remarks>
        </member>
        <member name="C:SkiaSharp.SKColorTable">
            <summary>Creates a new emtpy color table with 256 empty elements.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKColorTable(SkiaSharp.SKColor[])">
            <param name="colors">The unpremultiplied colors to initialize with.</param>
            <summary>Creates a color table with the provided unpremultiplied colors, up to <see cref="F:SkiaSharp.SKColorTable.MaxLength" /> (256) colors can be provided.</summary>
            <remarks>The colors will be automatically premultiplied.</remarks>
        </member>
        <member name="C:SkiaSharp.SKColorTable(SkiaSharp.SKPMColor[])">
            <param name="colors">The premultiplied colors to initialize with.</param>
            <summary>Creates a color table with the provided premultiplied colors, up to <see cref="F:SkiaSharp.SKColorTable.MaxLength" /> (256) colors can be provided.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKColorTable(System.Int32)">
            <param name="count">The number of empty colors to initialize with.</param>
            <summary>Creates a color table with the specified number of elements, with empty colors.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKColorTable(SkiaSharp.SKColor[],System.Int32)">
            <param name="colors">The unpremultiplied colors to initialize with.</param>
            <param name="count">The number of colors to initialize with.</param>
            <summary>Creates a color table with the provided unpremultiplied colors, but only consumes the first count elements from the colors array.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKColorTable(SkiaSharp.SKPMColor[],System.Int32)">
            <param name="colors">The premultiplied colors to initialize with.</param>
            <param name="count">The number of colors to initialize with.</param>
            <summary>Creates a color table with the provided premultiplied colors, but only consumes the first count elements from the colors array.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKColorTable.Colors">
            <summary>Gets a copy of the premultiplied colors in the color table.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKColorTable.Count">
            <summary>Gets the number of colors in the lookup table.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColorTable.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKColorTable.GetUnPreMultipliedColor(System.Int32)">
            <param name="index">The index of the color to get.</param>
            <summary>Returns the unpremultiplied color at the specified index.</summary>
            <returns>Returns the unpremultiplied color.</returns>
            <remarks>This is equivalent to premultiplying the value from <see cref="P:SkiaSharp.SKColorTable.Item" />.</remarks>
        </member>
        <member name="P:SkiaSharp.SKColorTable.Item(System.Int32)">
            <param name="index">
                <para />
            </param>
            <summary>Gets the premultiplied color at the specified index.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKColorTable.MaxLength">
            <summary>Gets the maximum number of colors in the color lookup table.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKColorTable.ReadColors">
            <summary>Returns an unmanaged pointer to the color lookup table.</summary>
            <returns>
                <para />
            </returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKColorTable.UnPreMultipledColors">
            <summary>Gets a copy of the unpremultiplied colors in the color table.</summary>
            <value>
                <para />
            </value>
            <remarks>The is equivalent to premultiplying the value of <see cref="P:SkiaSharp.SKColorTable.Colors" />.</remarks>
        </member>
        <member name="T:SkiaSharp.SKColorType">
            <summary>Describes how to interpret the components of a pixel.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKColorType.Alpha8">
            <summary>Represents a 8-bit alpha-only color.</summary>
        </member>
        <member name="F:SkiaSharp.SKColorType.Argb4444">
            <summary>Represents a 16-bit color with the format ARGB.</summary>
        </member>
        <member name="F:SkiaSharp.SKColorType.Bgra8888">
            <summary>Represents a 32-bit color with the format BGRA.</summary>
        </member>
        <member name="F:SkiaSharp.SKColorType.Gray8">
            <summary>Represents a 8-bit grayscale color.</summary>
        </member>
        <member name="F:SkiaSharp.SKColorType.Index8">
            <summary>Represents a 8-bit indexed color.</summary>
        </member>
        <member name="F:SkiaSharp.SKColorType.Rgb565">
            <summary>Represents a 16-bit color with the format RGB, with the red and blue components being 5-bits and the green component being 6-bits.</summary>
        </member>
        <member name="F:SkiaSharp.SKColorType.Rgba8888">
            <summary>Represents a 32-bit color with the format RGBA.</summary>
        </member>
        <member name="F:SkiaSharp.SKColorType.RgbaF16">
            <summary>Represents a floating-point based color with the format RGBA.</summary>
        </member>
        <member name="F:SkiaSharp.SKColorType.Unknown">
            <summary>Unknown encoding.</summary>
        </member>
        <member name="T:SkiaSharp.SKCropRectFlags">
            <summary>Flags used by the <see cref="T:SkiaSharp.SKImageFilter.CropRect" /> method.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKCropRectFlags.HasAll">
            <summary>Consume all edges of the rectangle.</summary>
        </member>
        <member name="F:SkiaSharp.SKCropRectFlags.HasHeight">
            <summary>Only use the height component of the rectangle.</summary>
        </member>
        <member name="F:SkiaSharp.SKCropRectFlags.HasLeft">
            <summary>Only use the left component of the rectangle.</summary>
        </member>
        <member name="F:SkiaSharp.SKCropRectFlags.HasNone">
            <summary>None of the edges have been specified.</summary>
        </member>
        <member name="F:SkiaSharp.SKCropRectFlags.HasTop">
            <summary>Only use the top component of the rectangle.</summary>
        </member>
        <member name="F:SkiaSharp.SKCropRectFlags.HasWidth">
            <summary>Only use the width component of the rectangle.</summary>
        </member>
        <member name="T:SkiaSharp.SKData">
            <summary>The <see cref="T:SkiaSharp.SKData" /> holds an immutable data buffer.</summary>
            <remarks>
                <para>Not only is the data immutable, but the actual pointer that is returned by the <see cref="P:SkiaSharp.SKData.Data" /> property is guaranteed to always be the same for the life of this instance.</para>
                <para>The <see cref="M:SkiaSharp.SKData.AsStream" /> method can be used to return a <see cref="T:System.IO.Stream" /> that wraps this <see cref="T:SkiaSharp.SKData" /> and allows for .NET APIs to scan the contents of the <see cref="T:SkiaSharp.SKData" /> as a stream.</para>
                <para />
                <para>You can use the constructors for this object to make copies of the data, or you can use the <see cref="M:SkiaSharp.SKData.FromMallocMemory" /> to wrap a block of memory that has been allocated with the platform “malloc" function.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKData.AsStream">
            <summary>Wraps the <see cref="T:SkiaSharp.SKData" /> as a <see cref="T:System.IO.Stream" />.</summary>
            <returns>Returns the new <see cref="T:System.IO.Stream" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKData.AsStream(System.Boolean)">
            <param name="streamDisposesData">Whether or not to dispose the data object when the stream is disposed.</param>
            <summary>Wraps the <see cref="T:SkiaSharp.SKData" /> as a <see cref="T:System.IO.Stream" />.</summary>
            <returns>Returns the new <see cref="T:System.IO.Stream" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKData.Create(SkiaSharp.SKStream)">
            <param name="stream">The stream to read.</param>
            <summary>Returns a new <see cref="T:SkiaSharp.SKData" /> instance with a copy of the data from the stream.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKData" /> instance.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKData.Create(System.Int32)">
            <param name="size">The size of the data buffer to create.</param>
            <summary>Returns a new <see cref="T:SkiaSharp.SKData" /> instance with uninitialized data.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKData" /> instance.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKData.Create(System.IO.Stream)">
            <param name="stream">The stream to read.</param>
            <summary>Returns a new <see cref="T:SkiaSharp.SKData" /> instance with a copy of the data from the stream.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKData" /> instance.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKData.Create(System.String)">
            <param name="filename">The file to open.</param>
            <summary>Returns a new <see cref="T:SkiaSharp.SKData" /> instance with the data from the file.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKData" /> instance.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKData.Create(System.UInt64)">
            <param name="size">The size of the data buffer to create.</param>
            <summary>Returns a new <see cref="T:SkiaSharp.SKData" /> instance with uninitialized data.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKData" /> instance.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKData.Create(SkiaSharp.SKStream,System.Int32)">
            <param name="stream">The stream to read.</param>
            <param name="length">The amount of data to read.</param>
            <summary>Returns a new <see cref="T:SkiaSharp.SKData" /> instance with a copy of the data from the stream.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKData" /> instance.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKData.Create(SkiaSharp.SKStream,System.Int64)">
            <param name="stream">The stream to read.</param>
            <param name="length">The amount of data to read.</param>
            <summary>Returns a new <see cref="T:SkiaSharp.SKData" /> instance with a copy of the data from the stream.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKData" /> instance.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKData.Create(SkiaSharp.SKStream,System.UInt64)">
            <param name="stream">The stream to read.</param>
            <param name="length">The amount of data to read.</param>
            <summary>Returns a new <see cref="T:SkiaSharp.SKData" /> instance with a copy of the data from the stream.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKData" /> instance.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKData.Create(System.IntPtr,System.Int32)">
            <param name="address">The pointer to a buffer.</param>
            <param name="length">The length of the buffer.</param>
            <summary>Returns a new <see cref="T:SkiaSharp.SKData" /> instance with reference to the specified data.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKData" /> instance with reference to the specified data.</returns>
            <remarks>The caller is responsible for ensuring the data buffer lives as long as the <see cref="T:SkiaSharp.SKData" /> instance.</remarks>
        </member>
        <member name="M:SkiaSharp.SKData.Create(System.IO.Stream,System.Int32)">
            <param name="stream">The stream to read.</param>
            <param name="length">The amount of data to read.</param>
            <summary>Returns a new <see cref="T:SkiaSharp.SKData" /> instance with a copy of the data from the stream.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKData" /> instance.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKData.Create(System.IO.Stream,System.Int64)">
            <param name="stream">The stream to read.</param>
            <param name="length">The amount of data to read.</param>
            <summary>Returns a new <see cref="T:SkiaSharp.SKData" /> instance with a copy of the data from the stream.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKData" /> instance.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKData.Create(System.IO.Stream,System.UInt64)">
            <param name="stream">The stream to read.</param>
            <param name="length">The amount of data to read.</param>
            <summary>Returns a new <see cref="T:SkiaSharp.SKData" /> instance with a copy of the data from the stream.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKData" /> instance.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKData.Create(System.IntPtr,System.Int32,SkiaSharp.SKDataReleaseDelegate)">
            <param name="address">The pointer to a buffer.</param>
            <param name="length">The length of the buffer.</param>
            <param name="releaseProc">The delegate to invoke when the <see cref="T:SkiaSharp.SKData" /> instance is ready to be discarded.</param>
            <summary>Returns a new <see cref="T:SkiaSharp.SKData" /> instance with reference to the specified data.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKData" /> instance with reference to the specified data.</returns>
            <remarks>The caller is responsible for ensuring the data buffer lives as long as the <see cref="T:SkiaSharp.SKData" /> instance.</remarks>
        </member>
        <member name="M:SkiaSharp.SKData.Create(System.IntPtr,System.Int32,SkiaSharp.SKDataReleaseDelegate,System.Object)">
            <param name="address">The pointer to a buffer.</param>
            <param name="length">The length of the buffer.</param>
            <param name="releaseProc">The delegate to invoke when the <see cref="T:SkiaSharp.SKData" /> instance is ready to be discarded.</param>
            <param name="context">The user state to pass to the delegate when it is invoked.</param>
            <summary>Returns a new <see cref="T:SkiaSharp.SKData" /> instance with reference to the specified data.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKData" /> instance with reference to the specified data.</returns>
            <remarks>The caller is responsible for ensuring the data buffer lives as long as the <see cref="T:SkiaSharp.SKData" /> instance.</remarks>
        </member>
        <member name="M:SkiaSharp.SKData.CreateCopy(System.Byte[])">
            <param name="bytes">The array of bytes that will be copied.</param>
            <summary>Returns a new <see cref="T:SkiaSharp.SKData" /> instance with a copy of the provided byte array.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKData" /> instance with a copy of the data.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKData.CreateCopy(System.Byte[],System.UInt64)">
            <param name="bytes">The array of bytes that will be copied.</param>
            <param name="length">The size of the buffer to create.</param>
            <summary>Returns a new <see cref="T:SkiaSharp.SKData" /> instance with a copy of the provided byte array.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKData" /> instance with a copy of the data.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKData.CreateCopy(System.IntPtr,System.UInt64)">
            <param name="bytes">The pointer to a buffer.</param>
            <param name="length">The length of the buffer.</param>
            <summary>Returns a new <see cref="T:SkiaSharp.SKData" /> instance with a copy of the provided byte buffer.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKData" /> instance with a copy of the data.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKData.Data">
            <summary>Gets a pointer to the data wrapped by this <see cref="T:SkiaSharp.SKData" />.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKData.Dispose(System.Boolean)">
            <param name="disposing">Specify true to release both managed and unmanaged resources, false to release only unmanaged resources.</param>
            <summary>Releases the resources associated with the data. If this <see cref="T:SkiaSharp.SKData" /> was created with one of the <see cref="M:SkiaSharp.SKData.FromMallocMemory" /> methods, then the operating system’s “free” method will be called on the data.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKData.Empty">
            <summary>Gets a reference to the empty data instance.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKData.IsEmpty">
            <summary>Gets a value indicating whether or not the data is empty.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKData.SaveTo(System.IO.Stream)">
            <param name="target">The stream to save the data into.</param>
            <summary>Saves the buffer into the provided stream.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKData.Size">
            <summary>Gets the size of this data object in bytes.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKData.Subset(System.UInt64,System.UInt64)">
            <param name="offset">The offset of the data.</param>
            <param name="length">The length for the new <see cref="T:SkiaSharp.SKData" />.</param>
            <summary>Creates a new <see cref="T:SkiaSharp.SKData" /> that points to a slice in this <see cref="T:SkiaSharp.SKData" />.</summary>
            <returns>
                <para />
            </returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKData.ToArray">
            <summary>Copies the data object into a byte array.</summary>
            <returns>Returns the byte array of the data.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKDataReleaseDelegate">
            <param name="address">The pointer to the byte buffer.</param>
            <param name="context">The user state passed to <see cref="M:SkiaSharp.SKData.Create" />.</param>
            <summary>The delegate that is used when a <see cref="T:SkiaSharp.SKData" /> instance is about to be released.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKDisplacementMapEffectChannelSelectorType">
            <summary>Channel selector type for the <see cref="M:SkiaSharp.SKImageFilter.CreateDisplacementMapEffect" /> method.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKDisplacementMapEffectChannelSelectorType.A">
            <summary>The alpha channel.</summary>
        </member>
        <member name="F:SkiaSharp.SKDisplacementMapEffectChannelSelectorType.B">
            <summary>The blue channel.</summary>
        </member>
        <member name="F:SkiaSharp.SKDisplacementMapEffectChannelSelectorType.G">
            <summary>The green channel.</summary>
        </member>
        <member name="F:SkiaSharp.SKDisplacementMapEffectChannelSelectorType.R">
            <summary>The red channel.</summary>
        </member>
        <member name="F:SkiaSharp.SKDisplacementMapEffectChannelSelectorType.Unknown">
            <summary>The channel is not known.</summary>
        </member>
        <member name="T:SkiaSharp.SKDocument">
            <summary>A high-level API for creating a document-based canvas.</summary>
            <remarks>For each page, call <see cref="M:SkiaSharp.SKDocument.BeginPage" /> to get the canvas, and then complete the page with a call to <see cref="M:SkiaSharp.SKDocument.EndPage" />. Finally, call <see cref="M:SkiaSharp.SKDocument.Close" /> to complete the document.</remarks>
        </member>
        <member name="M:SkiaSharp.SKDocument.Abort">
            <summary>Stops producing the document immediately.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKDocument.BeginPage(System.Single,System.Single)">
            <param name="width">The width of the page.</param>
            <param name="height">The height of the page.</param>
            <summary>Begins a new page for the document, returning the canvas that will draw into the page.</summary>
            <returns>Returns a canvas for the new page.</returns>
            <remarks>The document owns this canvas, and it will go out of scope when <see cref="M:SkiaSharp.SKDocument.EndPage" /> or <see cref="M:SkiaSharp.SKDocument.Close" /> is called, or the document is deleted.</remarks>
        </member>
        <member name="M:SkiaSharp.SKDocument.BeginPage(System.Single,System.Single,SkiaSharp.SKRect)">
            <param name="width">The width of the page.</param>
            <param name="height">The height of the page.</param>
            <param name="content">The area for the page contents.</param>
            <summary>Begins a new page for the document, returning the canvas that will draw into the page.</summary>
            <returns>Returns a canvas for the new page.</returns>
            <remarks>The document owns this canvas, and it will go out of scope when <see cref="M:SkiaSharp.SKDocument.EndPage" /> or <see cref="M:SkiaSharp.SKDocument.Close" /> is called, or the document is deleted.</remarks>
        </member>
        <member name="M:SkiaSharp.SKDocument.Close">
            <summary>Closes the current file or stream holding the document’s contents.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKDocument.CreatePdf(SkiaSharp.SKWStream,System.Single)">
            <param name="stream">The stream to write to.</param>
            <param name="dpi">The DPI (pixels-per-inch) at which features without native PDF support will be rasterized.</param>
            <summary>Create a PDF-backed document, writing the results into a stream.</summary>
            <returns>Returns the new PDF-backed document.</returns>
            <remarks>PDF pages are sized in point units. 1 pt == 1/72 inch == 127/360 mm.</remarks>
        </member>
        <member name="M:SkiaSharp.SKDocument.CreatePdf(System.String,System.Single)">
            <param name="path">The path of the file to write to.</param>
            <param name="dpi">The DPI (pixels-per-inch) at which features without native PDF support will be rasterized.</param>
            <summary>Create a PDF-backed document, writing the results into a file.</summary>
            <returns>Returns the new PDF-backed document.</returns>
            <remarks>PDF pages are sized in point units. 1 pt == 1/72 inch == 127/360 mm.</remarks>
        </member>
        <member name="M:SkiaSharp.SKDocument.CreatePdf(SkiaSharp.SKWStream,SkiaSharp.SKDocumentPdfMetadata,System.Single)">
            <param name="stream">The stream to write to.</param>
            <param name="metadata">The document metadata to include.</param>
            <param name="dpi">The DPI (pixels-per-inch) at which features without native PDF support will be rasterized.</param>
            <summary>Create a PDF-backed document with the specified metadata, writing the results into a stream.</summary>
            <returns>Returns the new PDF-backed document.</returns>
            <remarks>PDF pages are sized in point units. 1 pt == 1/72 inch == 127/360 mm.</remarks>
        </member>
        <member name="M:SkiaSharp.SKDocument.CreateXps(SkiaSharp.SKWStream,System.Single)">
            <param name="stream">The stream to write to.</param>
            <param name="dpi">The DPI (pixels-per-inch) at which features without native XPS support will be rasterized.</param>
            <summary>Create a XPS-backed document, writing the results into a stream.</summary>
            <returns>Returns the new XPS-backed document.</returns>
            <remarks>XPS pages are sized in point units. 1 pt == 1/72 inch == 127/360 mm.</remarks>
        </member>
        <member name="M:SkiaSharp.SKDocument.CreateXps(System.String,System.Single)">
            <param name="path">The path of the file to write to.</param>
            <param name="dpi">The DPI (pixels-per-inch) at which features without native XPS support will be rasterized.</param>
            <summary>Create a XPS-backed document, writing the results into a stream.</summary>
            <returns>Returns the new XPS-backed document.</returns>
            <remarks>XPS pages are sized in point units. 1 pt == 1/72 inch == 127/360 mm.</remarks>
        </member>
        <member name="F:SkiaSharp.SKDocument.DefaultRasterDpi">
            <summary>Gets the default DPI for raster graphics.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKDocument.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKDocument.EndPage">
            <summary>Completes the drawing for the current page created by <see cref="M:SkiaSharp.SKDocument.BeginPage" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKDocumentPdfMetadata">
            <summary>Optional metadata to be passed into the PDF factory function.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKDocumentPdfMetadata.Author">
            <summary>The name of the person who created the document.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKDocumentPdfMetadata.Creation">
            <summary>The date and time the document was created.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKDocumentPdfMetadata.Creator">
            <summary>The name of the product that created the original document, if the document was converted to PDF from another format.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKDocumentPdfMetadata.Keywords">
            <summary>Comma-separated keywords associated with the document.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKDocumentPdfMetadata.Modified">
            <summary>The date and time the document was most recently modified.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKDocumentPdfMetadata.Producer">
            <summary>The product that is converting this document to PDF.</summary>
            <value>
                <para />
            </value>
            <remarks>Leave empty to get the default, correct value.</remarks>
        </member>
        <member name="P:SkiaSharp.SKDocumentPdfMetadata.Subject">
            <summary>The subject of the document.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKDocumentPdfMetadata.Title">
            <summary>The document’s title.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKDropShadowImageFilterShadowMode">
            <summary>The various types of shadow modes for use with the <see cref="M:SkiaSharp.SKImageFilter.CreateDropShadow" /> method.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKDropShadowImageFilterShadowMode.DrawShadowAndForeground">
            <summary>Draw both the shadow and the foreground.</summary>
        </member>
        <member name="F:SkiaSharp.SKDropShadowImageFilterShadowMode.DrawShadowOnly">
            <summary>Draw the shadow only.</summary>
        </member>
        <member name="T:SkiaSharp.SKDynamicMemoryWStream">
            <summary>A writeable, dynamically-sized, memory-based stream.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKDynamicMemoryWStream">
            <summary>Create a new instance of <see cref="T:SkiaSharp.SKDynamicMemoryWStream" /> with an empty buffer.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKDynamicMemoryWStream.CopyTo(SkiaSharp.SKWStream)">
            <param name="dst">The stream to copy the data to.</param>
            <summary>Copies the data from the current stream to the specified stream.</summary>
            <returns>
                <para />
            </returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKDynamicMemoryWStream.CopyTo(System.IntPtr)">
            <param name="data">The memory location to copy the data to.</param>
            <summary>Copies the data from the current stream to a memory location.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKDynamicMemoryWStream.CopyToData">
            <summary>Returns a copy of the data written so far.</summary>
            <returns>A copy of the data.</returns>
            <remarks>The caller is responsible for releasing the memory.</remarks>
        </member>
        <member name="M:SkiaSharp.SKDynamicMemoryWStream.DetachAsData">
            <summary>Returns a <see cref="T:SkiaSharp.SKData" /> instance of the data in the current stream, and then resets the current stream.</summary>
            <returns>Returns the <see cref="T:SkiaSharp.SKData" /> instance.</returns>
            <remarks>After calling this method, this stream is reset to it’s empty state.</remarks>
        </member>
        <member name="M:SkiaSharp.SKDynamicMemoryWStream.DetachAsStream">
            <summary>Returns a read-only stream with the current data, and then resets the current stream.</summary>
            <returns>The stream with the data.</returns>
            <remarks>After calling this method, this stream is reset to it’s empty state.</remarks>
        </member>
        <member name="M:SkiaSharp.SKDynamicMemoryWStream.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKEncodedImageFormat">
            <summary>The various formats used by a <see cref="T:SkiaSharp.SKCodec" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKEncodedImageFormat.Astc">
            <summary>The ASTC image format.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedImageFormat.Bmp">
            <summary>The BMP image format.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedImageFormat.Dng">
            <summary>The Adobe DNG image format.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedImageFormat.Gif">
            <summary>The GIF image format.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedImageFormat.Ico">
            <summary>The ICO image format.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedImageFormat.Jpeg">
            <summary>The JPEG image format.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedImageFormat.Ktx">
            <summary>The KTX image format.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedImageFormat.Pkm">
            <summary>The PKM image format.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedImageFormat.Png">
            <summary>The PNG image format.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedImageFormat.Wbmp">
            <summary>The WBMP image format.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedImageFormat.Webp">
            <summary>The WEBP image format.</summary>
        </member>
        <member name="T:SkiaSharp.SKEncodedInfo">
            <summary>Describes the encoded image information.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKEncodedInfo(SkiaSharp.SKEncodedInfoColor)">
            <param name="color">The color format.</param>
            <summary>Creates a new <see cref="T:SkiaSharp.SKEncodedInfo" /> with the specified color format.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKEncodedInfo(SkiaSharp.SKEncodedInfoColor,SkiaSharp.SKEncodedInfoAlpha,System.Byte)">
            <param name="color">The color format.</param>
            <param name="alpha">The alpha format.</param>
            <param name="bitsPerComponent">The number of bits per color component.</param>
            <summary>Creates a new <see cref="T:SkiaSharp.SKEncodedInfo" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKEncodedInfo.Alpha">
            <summary>Gets the encoded alpha format.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKEncodedInfo.BitsPerComponent">
            <summary>Gets the number of bits per color component.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKEncodedInfo.BitsPerPixel">
            <summary>Gets the number of bits per pixel.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKEncodedInfo.Color">
            <summary>Gets the encoded color format.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKEncodedInfoAlpha">
            <summary>The various alpha formats used by a <see cref="T:SkiaSharp.SKEncodedInfo" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKEncodedInfoAlpha.Binary">
            <summary>Each pixel is either fully opaque or fully transparent.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedInfoAlpha.Opaque">
            <summary>Each pixel is opaque.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedInfoAlpha.Unpremul">
            <summary>Each pixel has an unpremultiplied alpha.</summary>
        </member>
        <member name="T:SkiaSharp.SKEncodedInfoColor">
            <summary>The various color formats used by a <see cref="T:SkiaSharp.SKEncodedInfo" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKEncodedInfoColor.Bgr">
            <summary>The color format is BGR, without transparency. Typically found in BMP.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedInfoColor.Bgra">
            <summary>The color format is BGRA, with transparency. Typically found in BMP.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedInfoColor.Bgrx">
            <summary>The color format is BGR, without transparency. Typically found in BMP.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedInfoColor.Gray">
            <summary>The color format is grayscale, without transparency. Typically found in PNG and WBMP.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedInfoColor.GrayAlpha">
            <summary>The color format is grayscale, with transparency. Typically found in PNG.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedInfoColor.InvertedCmyk">
            <summary>The color format is CMYK, without transparency. Typically found in JPG.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedInfoColor.Palette">
            <summary>The color format is palette based. Typically found in PNG, GIF and BMP.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedInfoColor.Rgb">
            <summary>The color format is RGB, without transparency. Typically found in PNG and RAW.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedInfoColor.Rgba">
            <summary>The color format is RGBA, with transparency. Typically found in PNG and RAW.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedInfoColor.Ycck">
            <summary>The color format is YCCK, without transparency. Typically found in JPEG.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedInfoColor.Yuv">
            <summary>The color format is YUV, without transparency. Typically found in JPEG and WEBP.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncodedInfoColor.Yuva">
            <summary>The color format is YUVA, without transparency. Typically found in PNG and RAW.</summary>
        </member>
        <member name="T:SkiaSharp.SKEncoding">
            <summary>Text encoding definition.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKEncoding.Utf16">
            <summary>UTF-16 encoding.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncoding.Utf32">
            <summary>UTF-32 encoding.</summary>
        </member>
        <member name="F:SkiaSharp.SKEncoding.Utf8">
            <summary>UTF-8 encoding.</summary>
        </member>
        <member name="T:SkiaSharp.SKFileStream">
            <summary>A seekable stream backed by a file on the file system.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKFileStream(System.String)">
            <param name="path">The existing file to open for reading.</param>
            <summary>Creates a new <see cref="T:SkiaSharp.SKFileStream" /> that wraps the file with the specified path.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKFileStream.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKFileStream.IsPathSupported(System.String)">
            <param name="path">The path to check.</param>
            <summary>Determines whether the specified path is supported by a <see cref="T:SkiaSharp.SKFileStream" />.</summary>
            <returns>Returns <see langword="true" /> if the path is supported, otherwise <see langword="false" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKFileStream.OpenStream(System.String)">
            <param name="path">The path to the file to open.</param>
            <summary>Opens a read-only stream to the specified file.</summary>
            <returns>Returns a stream that contains the file contents.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKFileWStream">
            <summary>A writeable stream backed by a file on the file system.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKFileWStream(System.String)">
            <param name="path">The new or existing file to open for writing.</param>
            <summary>Creates a new <see cref="T:SkiaSharp.SKFileWStream" /> that wraps the file with the specified path.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKFileWStream.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKFileWStream.IsPathSupported(System.String)">
            <param name="path">The path to check.</param>
            <summary>Determines whether the specified path is supported by a <see cref="T:SkiaSharp.SKFileWStream" />.</summary>
            <returns>Returns <see langword="true" /> if the path is supported, otherwise <see langword="false" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKFileWStream.OpenStream(System.String)">
            <param name="path">The path to the file to open.</param>
            <summary>Opens a write-only stream to the specified file.</summary>
            <returns>Returns a stream that contains the file contents.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKFilterQuality">
            <summary>Filter quality settings.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKFilterQuality.High">
            <summary>High quality.</summary>
        </member>
        <member name="F:SkiaSharp.SKFilterQuality.Low">
            <summary>Low quality.</summary>
        </member>
        <member name="F:SkiaSharp.SKFilterQuality.Medium">
            <summary>Medium quality.</summary>
        </member>
        <member name="F:SkiaSharp.SKFilterQuality.None">
            <summary>Unspecified.</summary>
        </member>
        <member name="T:SkiaSharp.SKFontManager">
            <summary>Manages a collection of fonts.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKFontManager.Default">
            <summary>Gets the default font manager.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKFontManager.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKFontManager.FontFamilyCount">
            <summary>Gets the number of font families available.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKFontManager.GetFamilyName(System.Int32)">
            <param name="index">The index of the font family name to retrieve.</param>
            <summary>Returns the font family name for the specified index.</summary>
            <returns>Returns the font family name.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKFontManager.GetFontFamilies">
            <summary>Returns all the font family names.</summary>
            <returns>Returns an array of all the font family names.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKFontManager.MatchCharacter(System.Char)">
            <param name="character">The character to find a typeface for.</param>
            <summary>Use the system fallback to find a typeface for the given character.</summary>
            <returns>Returns the <see cref="T:SkiaSharp.SKTypeface" /> that containes the given character, or <see langword="null" /> if none was found.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKFontManager.MatchCharacter(System.Int32)">
            <param name="character">The character to find a typeface for.</param>
            <summary>Use the system fallback to find a typeface for the given character.</summary>
            <returns>Returns the <see cref="T:SkiaSharp.SKTypeface" /> that containes the given character, or <see langword="null" /> if none was found.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKFontManager.MatchCharacter(System.String,System.Char)">
            <param name="familyName">The family name to use when searching.</param>
            <param name="character">The character to find a typeface for.</param>
            <summary>Use the system fallback to find a typeface for the given character.</summary>
            <returns>Returns the <see cref="T:SkiaSharp.SKTypeface" /> that containes the given character, or <see langword="null" /> if none was found.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKFontManager.MatchCharacter(System.String,System.Int32)">
            <param name="familyName">The family name to use when searching.</param>
            <param name="character">The character to find a typeface for.</param>
            <summary>Use the system fallback to find a typeface for the given character.</summary>
            <returns>Returns the <see cref="T:SkiaSharp.SKTypeface" /> that containes the given character, or <see langword="null" /> if none was found.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKFontManager.MatchCharacter(System.String,System.String[],System.Char)">
            <param name="familyName">The family name to use when searching.</param>
            <param name="bcp47">The ISO 639, 15924, and 3166-1 code to use when searching, such as “ja” and “zh”.</param>
            <param name="character">The character to find a typeface for.</param>
            <summary>Use the system fallback to find a typeface for the given character.</summary>
            <returns>Returns the <see cref="T:SkiaSharp.SKTypeface" /> that containes the given character, or <see langword="null" /> if none was found.</returns>
            <remarks>Note that <paramref name="bcp47" /> is a combination of ISO 639, 15924, and 3166-1 codes, so it is fine to just pass a ISO 639 here. The first item is the least significant fallback, and the last is the most significant. If no specified codes match, any font with the requested character will be matched.</remarks>
        </member>
        <member name="M:SkiaSharp.SKFontManager.MatchCharacter(System.String,System.String[],System.Int32)">
            <param name="familyName">The family name to try and use.</param>
            <param name="bcp47">The ISO 639, 15924, and 3166-1 code to use when searching, such as “ja” and “zh”.</param>
            <param name="character">The character to find a typeface for.</param>
            <summary>Use the system fallback to find a typeface for the given character.</summary>
            <returns>Returns the <see cref="T:SkiaSharp.SKTypeface" /> that containes the given character, or <see langword="null" /> if none was found.</returns>
            <remarks>Note that <paramref name="bcp47" /> is a combination of ISO 639, 15924, and 3166-1 codes, so it is fine to just pass a ISO 639 here. The first item is the least significant fallback, and the last is the most significant. If no specified codes match, any font with the requested character will be matched.</remarks>
        </member>
        <member name="M:SkiaSharp.SKFontManager.MatchCharacter(System.String,SkiaSharp.SKFontStyleWeight,SkiaSharp.SKFontStyleWidth,SkiaSharp.SKFontStyleSlant,System.String[],System.Char)">
            <param name="familyName">The family name to use when searching.</param>
            <param name="weight">The font weight to use when searching.</param>
            <param name="width">The font width to use when searching.</param>
            <param name="slant">The font slant to use when searching.</param>
            <param name="bcp47">The ISO 639, 15924, and 3166-1 code to use when searching, such as “ja” and “zh”.</param>
            <param name="character">The character to find a typeface for.</param>
            <summary>Use the system fallback to find a typeface for the given character.</summary>
            <returns>Returns the <see cref="T:SkiaSharp.SKTypeface" /> that containes the given character, or <see langword="null" /> if none was found.</returns>
            <remarks>Note that <paramref name="bcp47" /> is a combination of ISO 639, 15924, and 3166-1 codes, so it is fine to just pass a ISO 639 here. The first item is the least significant fallback, and the last is the most significant. If no specified codes match, any font with the requested character will be matched.</remarks>
        </member>
        <member name="M:SkiaSharp.SKFontManager.MatchCharacter(System.String,SkiaSharp.SKFontStyleWeight,SkiaSharp.SKFontStyleWidth,SkiaSharp.SKFontStyleSlant,System.String[],System.Int32)">
            <param name="familyName">The family name to use when searching.</param>
            <param name="weight">The font weight to use when searching.</param>
            <param name="width">The font width to use when searching.</param>
            <param name="slant">The font slant to use when searching.</param>
            <param name="bcp47">The ISO 639, 15924, and 3166-1 code to use when searching, such as “ja” and “zh”.</param>
            <param name="character">The character to find a typeface for.</param>
            <summary>Use the system fallback to find a typeface for the given character.</summary>
            <returns>Returns the <see cref="T:SkiaSharp.SKTypeface" /> that containes the given character, or <see langword="null" /> if none was found.</returns>
            <remarks>Note that <paramref name="bcp47" /> is a combination of ISO 639, 15924, and 3166-1 codes, so it is fine to just pass a ISO 639 here. The first item is the least significant fallback, and the last is the most significant. If no specified codes match, any font with the requested character will be matched.</remarks>
        </member>
        <member name="M:SkiaSharp.SKFontManager.MatchCharacter(System.String,System.Int32,System.Int32,SkiaSharp.SKFontStyleSlant,System.String[],System.Int32)">
            <param name="familyName">The family name to use when searching.</param>
            <param name="weight">The font weight to use when searching.</param>
            <param name="width">The font width to use when searching.</param>
            <param name="slant">The font slant to use when searching.</param>
            <param name="bcp47">The ISO 639, 15924, and 3166-1 code to use when searching, such as “ja” and “zh”.</param>
            <param name="character">The character to find a typeface for.</param>
            <summary>Use the system fallback to find a typeface for the given character.</summary>
            <returns>Returns the <see cref="T:SkiaSharp.SKTypeface" /> that containes the given character, or <see langword="null" /> if none was found.</returns>
            <remarks>Note that <paramref name="bcp47" /> is a combination of ISO 639, 15924, and 3166-1 codes, so it is fine to just pass a ISO 639 here. The first item is the least significant fallback, and the last is the most significant. If no specified codes match, any font with the requested character will be matched.</remarks>
        </member>
        <member name="T:SkiaSharp.SKFontMetrics">
            <summary>Structure to represent measurements for a font.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKFontMetrics.Ascent">
            <summary>Gets the recommended distance above the baseline.</summary>
            <value>
                <para />
            </value>
            <remarks>Will be &lt;= 0.</remarks>
        </member>
        <member name="P:SkiaSharp.SKFontMetrics.AverageCharacterWidth">
            <summary>Gets the average character width.</summary>
            <value>
                <para />
            </value>
            <remarks>Will be &gt;= 0.</remarks>
        </member>
        <member name="P:SkiaSharp.SKFontMetrics.Bottom">
            <summary>Gets the greatest distance below the baseline for any glyph.</summary>
            <value>
                <para />
            </value>
            <remarks>Will be &gt;= 0.</remarks>
        </member>
        <member name="P:SkiaSharp.SKFontMetrics.CapHeight">
            <summary>Gets the cap height.</summary>
            <value>
                <para />
            </value>
            <remarks>Will be &gt; 0, or 0 if cannot be determined.</remarks>
        </member>
        <member name="P:SkiaSharp.SKFontMetrics.Descent">
            <summary>Gets the recommended distance below the baseline.</summary>
            <value>
                <para />
            </value>
            <remarks>Will be &gt;= 0.</remarks>
        </member>
        <member name="P:SkiaSharp.SKFontMetrics.Leading">
            <summary>Gets the recommended distance to add between lines of text.</summary>
            <value>
                <para />
            </value>
            <remarks>Will be &gt;= 0.</remarks>
        </member>
        <member name="P:SkiaSharp.SKFontMetrics.MaxCharacterWidth">
            <summary>Gets the max character width.</summary>
            <value>
                <para />
            </value>
            <remarks>Will be &gt;= 0.</remarks>
        </member>
        <member name="P:SkiaSharp.SKFontMetrics.Top">
            <summary>Gets the greatest distance above the baseline for any glyph.</summary>
            <value>
                <para />
            </value>
            <remarks>Will be &lt;= 0.</remarks>
        </member>
        <member name="P:SkiaSharp.SKFontMetrics.UnderlinePosition">
            <summary>Gets the position of the top of the underline stroke relative to the baseline.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para>Negative - underline should be drawn above baseline.</para>
                <para>Positive - underline should be drawn below baseline.</para>
                <para>Zero - underline should be drawn on baseline.underline position, or 0 if cannot be determined.</para>
                <para>null - does not have an UnderlinePosition.</para>
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKFontMetrics.UnderlineThickness">
            <summary>Gets the thickness of the underline.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para>0 - if the thickness can not be determined</para>
                <para>null - if the thickness is not set.</para>
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKFontMetrics.XHeight">
            <summary>Gets the height of an 'x' in px.</summary>
            <value>
                <para />
            </value>
            <remarks>0 if no 'x' in face.</remarks>
        </member>
        <member name="P:SkiaSharp.SKFontMetrics.XMax">
            <summary>Gets the maximum bounding box x value for all glyphs.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKFontMetrics.XMin">
            <summary>Gets the minimum bounding box x value for all glyphs.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKFontStyleSlant">
            <summary>Various font slants for use with <see cref="T:SkiaSharp.SKTypeface" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKFontStyleSlant.Italic">
            <summary>The italic font slant, in which the slanted characters appear as they were designed.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleSlant.Oblique">
            <summary>The oblique font slant, in which the characters are artificially slanted.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleSlant.Upright">
            <summary>The upright/normal font slant.</summary>
        </member>
        <member name="T:SkiaSharp.SKFontStyleWeight">
            <summary>Various pre-defined font weights for use with <see cref="T:SkiaSharp.SKTypeface" />.</summary>
            <remarks>Font weights can range from anywhere between 100 to 1000 (inclusive).</remarks>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWeight.Black">
            <summary>A thick font weight of 900.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWeight.Bold">
            <summary>A thick font weight of 700. This is the default for a bold font.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWeight.ExtraBlack">
            <summary>A thick font weight of 1000.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWeight.ExtraBold">
            <summary>A thick font weight of 800.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWeight.ExtraLight">
            <summary>A thin font weight of 200.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWeight.Invisible">
            <summary>The font has no thickness at all.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWeight.Light">
            <summary>A thin font weight of 300.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWeight.Medium">
            <summary>A thicker font weight of 500.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWeight.Normal">
            <summary>A typical font weight of 400. This is the default font weight.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWeight.SemiBold">
            <summary>A thick font weight of 600.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWeight.Thin">
            <summary>A thin font weight of 100.</summary>
        </member>
        <member name="T:SkiaSharp.SKFontStyleWidth">
            <summary>Various pre-defined font widths for use with <see cref="T:SkiaSharp.SKTypeface" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWidth.Condensed">
            <summary>A condensed font width of 3.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWidth.Expanded">
            <summary>An expanded font width of 7.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWidth.ExtraCondensed">
            <summary>A condensed font width of 2.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWidth.ExtraExpanded">
            <summary>An expanded font width of 8.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWidth.Normal">
            <summary>A normal font width of 5. This is the default font width.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWidth.SemiCondensed">
            <summary>A condensed font width of 4.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWidth.SemiExpanded">
            <summary>An expanded font width of 6.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWidth.UltraCondensed">
            <summary>A condensed font width of 1.</summary>
        </member>
        <member name="F:SkiaSharp.SKFontStyleWidth.UltraExpanded">
            <summary>An expanded font width of 9.</summary>
        </member>
        <member name="T:SkiaSharp.SKFrontBufferedManagedStream">
            <summary>A read-only stream that buffers the specified first chunk of bytes.</summary>
            <remarks>This is useful for decoding images using streams that are not seekable, since <see cref="T:SkiaSharp.SKCodec" /> needs to read the first few bytes to determine the codec to use.</remarks>
        </member>
        <member name="C:SkiaSharp.SKFrontBufferedManagedStream(SkiaSharp.SKStream,System.Int32)">
            <param name="nativeStream">The stream to buffer.</param>
            <param name="bufferSize">The number of bytes to buffer.</param>
            <summary>Creates a new instance of <see cref="T:SkiaSharp.SKFrontBufferedStream" /> that wraps the specified stream.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKFrontBufferedManagedStream(System.IO.Stream,System.Int32)">
            <param name="managedStream">The stream to buffer.</param>
            <param name="bufferSize">The number of bytes to buffer.</param>
            <summary>Creates a new instance of <see cref="T:SkiaSharp.SKFrontBufferedStream" /> that wraps the specified stream.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKFrontBufferedManagedStream(SkiaSharp.SKStream,System.Int32,System.Boolean)">
            <param name="nativeStream">The stream to buffer.</param>
            <param name="bufferSize">The number of bytes to buffer.</param>
            <param name="disposeUnderlyingStream">Whether or not to dispose the underlying stream when this stream is disposed.</param>
            <summary>Creates a new instance of <see cref="T:SkiaSharp.SKFrontBufferedStream" /> that wraps the specified stream.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKFrontBufferedManagedStream(System.IO.Stream,System.Int32,System.Boolean)">
            <param name="managedStream">The stream to buffer.</param>
            <param name="bufferSize">The number of bytes to buffer.</param>
            <param name="disposeUnderlyingStream">Whether or not to dispose the underlying stream when this stream is disposed.</param>
            <summary>Creates a new instance of <see cref="T:SkiaSharp.SKFrontBufferedStream" /> that wraps the specified stream.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKFrontBufferedManagedStream.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKFrontBufferedManagedStream.OnCreateNew">
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to copy the current stream.</summary>
            <returns>Returns a pointer to the new <see cref="T:SkiaSharp.SKStreamAsset" /> instance.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKFrontBufferedManagedStream.OnGetLength">
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to return the total length of the stream.</summary>
            <returns>Returns the total length of the stream.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKFrontBufferedManagedStream.OnGetPosition">
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to get the current position in the stream</summary>
            <returns>Returns the current position in the stream.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKFrontBufferedManagedStream.OnHasLength">
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to indicate whether this stream can report it's total length.</summary>
            <returns>Returns a value indicating whether this stream can report it's total length.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKFrontBufferedManagedStream.OnHasPosition">
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to indicate whether this stream can report it's current position.</summary>
            <returns>Returns a value indicating whether this stream can report it's current position.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKFrontBufferedManagedStream.OnIsAtEnd">
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to indicate whether all the bytes in the stream have been read.</summary>
            <returns>Returns a value indicating whether all the bytes in the stream have been read.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKFrontBufferedManagedStream.OnMove(System.Int32)">
            <param name="offset">The relative offset.</param>
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to seek to a relative offset.</summary>
            <returns>Returns <see langword="true" /> if seeking is supported and the seek was successful, otherwise <see langword="false" />.</returns>
            <remarks>If an attempt is made to move to a position outside the stream, the position must be set to the closest point within the stream (beginning or end).</remarks>
        </member>
        <member name="M:SkiaSharp.SKFrontBufferedManagedStream.OnPeek(System.IntPtr,System.IntPtr)">
            <param name="buffer">The buffer to read into.</param>
            <param name="size">The number of bytes to read.</param>
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to copy the specified number of bytes into the specified buffer.</summary>
            <returns>Returns the number of bytes actually peeked/copied.</returns>
            <remarks>The stream’s cursor must be returned to the position before this method was called.</remarks>
        </member>
        <member name="M:SkiaSharp.SKFrontBufferedManagedStream.OnRead(System.IntPtr,System.IntPtr)">
            <param name="buffer">The buffer to read into.</param>
            <param name="size">The number of bytes to read.</param>
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to copy the specified number of bytes into the specified buffer.</summary>
            <returns>Returns the number of bytes actually read.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKFrontBufferedManagedStream.OnRewind">
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to rewind the current stream.</summary>
            <returns>Returns <see langword="true" /> if the stream is known to be at the beginning after this call returns.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKFrontBufferedManagedStream.OnSeek(System.IntPtr)">
            <param name="position">The absolute position.</param>
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to seek to an absolute position.</summary>
            <returns>Returns <see langword="true" /> if seeking is supported and the seek was successful, otherwise <see langword="false" />.</returns>
            <remarks>If an attempt is made to move to a position outside the stream, the position must be set to the closest point within the stream (beginning or end).</remarks>
        </member>
        <member name="T:SkiaSharp.SKFrontBufferedStream">
            <summary>A read-only stream that buffers the specified first chunk of bytes.</summary>
            <remarks>This is useful for decoding images using streams that are not seekable, since <see cref="T:SkiaSharp.SKCodec" /> needs to read the first few bytes to determine the codec to use.</remarks>
        </member>
        <member name="C:SkiaSharp.SKFrontBufferedStream(System.IO.Stream)">
            <param name="stream">The stream to buffer.</param>
            <summary>Creates a new instance of <see cref="T:SkiaSharp.SKFrontBufferedStream" /> that wraps the specified stream.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKFrontBufferedStream(System.IO.Stream,System.Boolean)">
            <param name="stream">The stream to buffer.</param>
            <param name="disposeUnderlyingStream">Whether or not to dispose the underlying stream when this stream is disposed.</param>
            <summary>Creates a new instance of <see cref="T:SkiaSharp.SKFrontBufferedStream" /> that wraps the specified stream.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKFrontBufferedStream(System.IO.Stream,System.Int64)">
            <param name="stream">The stream to buffer.</param>
            <param name="bufferSize">The number of bytes to buffer.</param>
            <summary>Creates a new instance of <see cref="T:SkiaSharp.SKFrontBufferedStream" /> that wraps the specified stream.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKFrontBufferedStream(System.IO.Stream,System.Int64,System.Boolean)">
            <param name="stream">The stream to buffer.</param>
            <param name="bufferSize">The number of bytes to buffer.</param>
            <param name="disposeUnderlyingStream">Whether or not to dispose the underlying stream when this stream is disposed.</param>
            <summary>Creates a new instance of <see cref="T:SkiaSharp.SKFrontBufferedStream" /> that wraps the specified stream.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKFrontBufferedStream.CanRead">
            <summary>Gets a value indicating whether the current stream supports reading.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKFrontBufferedStream.CanSeek">
            <summary>Gets a value indicating whether the current stream supports seeking.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKFrontBufferedStream.CanWrite">
            <summary>Gets a value indicating whether the current stream supports writing.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKFrontBufferedStream.DefaultBufferSize">
            <summary>The default number of bytes to buffer (4096 bytes).</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKFrontBufferedStream.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKFrontBufferedStream.Flush">
            <summary>Clears all buffers for this stream and causes any buffered data to be written to the underlying device.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKFrontBufferedStream.Length">
            <summary>Gets the stream length in bytes.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKFrontBufferedStream.Position">
            <summary>Gets the position within the current stream.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKFrontBufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <param name="buffer">The buffer to which bytes are to be copied.</param>
            <param name="offset">The byte offset in the buffer at which to begin reading bytes.</param>
            <param name="count">The number of bytes to be read.</param>
            <summary>Copies bytes from the current buffered stream to an array.</summary>
            <returns>Returns the total number of bytes read into the buffer array.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKFrontBufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <param name="offset">The byte offset relative to the specified origin.</param>
            <param name="origin">The reference point from which to obtain the new position.</param>
            <summary>Sets the position within the current buffered stream.</summary>
            <returns>Returns the new position within the current buffered stream.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKFrontBufferedStream.SetLength(System.Int64)">
            <param name="value">An integer indicating the desired length of the current buffered stream in bytes.</param>
            <summary>Sets the length of the buffered stream.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKFrontBufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <param name="buffer">The byte array from which to copy count bytes to the current buffered stream.</param>
            <param name="offset">The offset in the buffer at which to begin copying bytes to the current buffered stream.</param>
            <param name="count">The number of bytes to be written to the current buffered stream.</param>
            <summary>Copies bytes to the buffered stream and advances the current position within the buffered stream by the number of bytes written.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKHighContrastConfig">
            <summary>High contrast configuration settings for use with <see cref="M:SkiaSharp.SKColorFilter.CreateHighContrast" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKHighContrastConfig(System.Boolean,SkiaSharp.SKHighContrastConfigInvertStyle,System.Single)">
            <param name="grayscale">Whether or not the color will be converted to grayscale.</param>
            <param name="invertStyle">Whether or not to invert brightness, lightness, or neither.</param>
            <param name="contrast">The amount to adjust the contrast by, in the range -1.0 through 1.0.</param>
            <summary>Creates a new instance of <see cref="T:SkiaSharp.SKHighContrastConfig" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKHighContrastConfig.Contrast">
            <summary>Gets or sets the amount to adjust the contrast by, in the range -1.0 through 1.0..</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKHighContrastConfig.Default">
            <summary>Gets a new instance with the values set to the defaults.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKHighContrastConfig.Grayscale">
            <summary>Gets or sets a value indicating whether the color will be converted to grayscale.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKHighContrastConfig.InvertStyle">
            <summary>Gets or sets a value indicating whether to invert brightness, lightness, or neither.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKHighContrastConfig.IsValid">
            <summary>Gets a value indicating if the configuration is valid.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKHighContrastConfigInvertStyle">
            <summary>Various invert styles for high contrast calculations.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKHighContrastConfigInvertStyle.InvertBrightness">
            <summary>Invert the brightness.</summary>
        </member>
        <member name="F:SkiaSharp.SKHighContrastConfigInvertStyle.InvertLightness">
            <summary>Invert the lightness.</summary>
        </member>
        <member name="F:SkiaSharp.SKHighContrastConfigInvertStyle.NoInvert">
            <summary>Do not invert.</summary>
        </member>
        <member name="T:SkiaSharp.SkiaExtensions">
            <summary>Convenience methods for <see cref="T:SkiaSharp.SKPixelGeometry" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SkiaExtensions.IsBgr(SkiaSharp.SKPixelGeometry)">
            <param name="pg">The pixel geometry to test.</param>
            <summary>Returns true if the pixel geometry is BGR.</summary>
            <returns>
                <para />
            </returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SkiaExtensions.IsHorizontal(SkiaSharp.SKPixelGeometry)">
            <param name="pg">The pixel geometry to test.</param>
            <summary>Returns true if the pixel geometry is horizontal.</summary>
            <returns>
                <para />
            </returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SkiaExtensions.IsRgb(SkiaSharp.SKPixelGeometry)">
            <param name="pg">The pixel geometry to test.</param>
            <summary>Returns true if the pixel geometry is RGB.</summary>
            <returns>
                <para />
            </returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SkiaExtensions.IsVertical(SkiaSharp.SKPixelGeometry)">
            <param name="pg">The pixel geometry to test.</param>
            <summary>Returns true if the pixel geometry is vertical.</summary>
            <returns>
                <para />
            </returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKImage">
            <summary>An abstraction for drawing a rectangle of pixels.</summary>
            <remarks>
                <para>An image is an abstraction of pixels, though the particular type of image could be actually storing its data on the GPU, or as drawing commands (picture or PDF or otherwise), ready to be played back into another canvas.</para>
                <para />
                <para>The content of an image is always immutable, though the actual storage may change, if for example that image can be re-created via encoded data or other means.</para>
                <para />
                <para>An image always has a non-zero dimensions. If there is a request to create a new image, either directly or via a surface, and either of the requested dimensions are zero, then <see langword="null" /> will be returned.</para>
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKImage.AlphaType">
            <summary>Gets the configured <see cref="T:SkiaSharp.SKAlphaType" /> for the bitmap.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.ApplyImageFilter(SkiaSharp.SKImageFilter,SkiaSharp.SKRectI,SkiaSharp.SKRectI,SkiaSharp.SKRectI@,SkiaSharp.SKPoint@)">
            <param name="filter">The filter to apply to the current image.</param>
            <param name="subset">The active portion of this image.</param>
            <param name="clipBounds">Constrains the device-space extent of the image to the given rectangle.</param>
            <param name="outSubset">The active portion of the resulting image</param>
            <param name="outOffset">The amount to translate the resulting image relative to the source when it is drawn.</param>
            <summary>Applies a given image filter to this image, and return the filtered result.</summary>
            <returns>Returns the resulting image after the filter is applied, or <see langword="null" /> if the image could not be created or would be transparent black (#00000000).</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.Create(SkiaSharp.SKImageInfo)">
            <param name="info">The image information to use.</param>
            <summary>Creates a new raster-based <see cref="T:SkiaSharp.SKImage" /> using the specified information.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImage" /> instance.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.Encode">
            <summary>Encodes the image using the <see cref="F:SkiaSharp.SKImageEncodeFormat.Png" /> format.</summary>
            <returns>Returns the <see cref="T:SkiaSharp.SKData" /> wrapping the encoded image.</returns>
            <remarks>Use the overload that takes a <see cref="T:SkiaSharp.SKImageEncodeFormat" /> if you want to encode in a different format.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.Encode(SkiaSharp.SKPixelSerializer)">
            <param name="serializer">The serializer to use to encode the image.</param>
            <summary>Encodes the image using the specified serializer.</summary>
            <returns>Returns the <see cref="T:SkiaSharp.SKData" /> wrapping the encoded image.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.Encode(SkiaSharp.SKEncodedImageFormat,System.Int32)">
            <param name="format">The file format used to encode the image.</param>
            <param name="quality">The quality level to use for the image. This is in the range from 0-100.</param>
            <summary>Encodes the image using the specified format.</summary>
            <returns>Returns the <see cref="T:SkiaSharp.SKData" /> wrapping the encoded image.</returns>
            <remarks>The quality is a suggestion, and not all formats (eg: png) respect or support it.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromAdoptedTexture(SkiaSharp.GRContext,SkiaSharp.GRBackendTextureDesc)">
            <param name="context">The graphics context.</param>
            <param name="desc">The description of the existing texture.</param>
            <summary>Creates a new image from the specified texture descriptor.</summary>
            <returns>Returns the new image, or <see langword="null" /> if the specified descriptor is unsupported.</returns>
            <remarks>SkiaSharp will delete or recycle the texture when the image is released.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromAdoptedTexture(SkiaSharp.GRContext,SkiaSharp.GRGlBackendTextureDesc)">
            <param name="context">The graphics context.</param>
            <param name="desc">The description of the existing OpenGL texture.</param>
            <summary>Creates a new image from the specified OpenGL texture descriptor.</summary>
            <returns>Returns the new image, or <see langword="null" /> if the specified descriptor is unsupported.</returns>
            <remarks>SkiaSharp will delete or recycle the OpenGL texture when the image is released.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromAdoptedTexture(SkiaSharp.GRContext,SkiaSharp.GRBackendTextureDesc,SkiaSharp.SKAlphaType)">
            <param name="context">The graphics context.</param>
            <param name="desc">The description of the existing texture.</param>
            <param name="alpha">The alpha type of the texture.</param>
            <summary>Creates a new image from the specified texture descriptor.</summary>
            <returns>Returns the new image, or <see langword="null" /> if the specified descriptor is unsupported.</returns>
            <remarks>SkiaSharp will delete or recycle the texture when the image is released.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromAdoptedTexture(SkiaSharp.GRContext,SkiaSharp.GRGlBackendTextureDesc,SkiaSharp.SKAlphaType)">
            <param name="context">The graphics context.</param>
            <param name="desc">The description of the existing OpenGL texture.</param>
            <param name="alpha">The alpha type of the texture.</param>
            <summary>Creates a new image from the specified OpenGL texture descriptor.</summary>
            <returns>Returns the new image, or <see langword="null" /> if the specified descriptor is unsupported.</returns>
            <remarks>SkiaSharp will delete or recycle the texture when the image is released.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromBitmap(SkiaSharp.SKBitmap)">
            <param name="bitmap">The bitmap that will be used as the source for the image.</param>
            <summary>Creates a new image from the provided <see cref="T:SkiaSharp.SKBitmap" />.</summary>
            <returns>An image whose contents are the contents of the specified bitmap.</returns>
            <remarks>If the bitmap is marked immutable, and its pixel memory is shareable, it may be shared instead of copied.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromEncodedData(SkiaSharp.SKData)">
            <param name="data">The data holding the encoded image.</param>
            <summary>Creates a new image from an encoded image wrapped by the data.</summary>
            <returns>The decoded image, or <see langword="null" /> on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromEncodedData(SkiaSharp.SKData,SkiaSharp.SKRectI)">
            <param name="data">The data holding the encoded image.</param>
            <param name="subset">The bounds for a subset of the image.</param>
            <summary>Creates a new image from an encoded image wrapped by the data.</summary>
            <returns>The decoded image, or <see langword="null" /> on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromPicture(SkiaSharp.SKPicture,SkiaSharp.SKSizeI)">
            <param name="picture">The picture.</param>
            <param name="dimensions">The size of the raster surface.</param>
            <summary>Creates a new image from the provided <see cref="T:SkiaSharp.SKPicture" />.</summary>
            <returns>An image whose contents is the picture.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromPicture(SkiaSharp.SKPicture,SkiaSharp.SKSizeI,SkiaSharp.SKMatrix)">
            <param name="picture">The picture.</param>
            <param name="dimensions">The size of the raster surface.</param>
            <param name="matrix">The matrix to use when reading the image.</param>
            <summary>Creates a new image from the provided <see cref="T:SkiaSharp.SKPicture" />.</summary>
            <returns>An image whose contents is the picture.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromPicture(SkiaSharp.SKPicture,SkiaSharp.SKSizeI,SkiaSharp.SKPaint)">
            <param name="picture">The picture.</param>
            <param name="dimensions">The size of the raster surface.</param>
            <param name="paint">The paint to use when reading the image.</param>
            <summary>Creates a new image from the provided <see cref="T:SkiaSharp.SKPicture" />.</summary>
            <returns>An image whose contents is the picture.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromPicture(SkiaSharp.SKPicture,SkiaSharp.SKSizeI,SkiaSharp.SKMatrix,SkiaSharp.SKPaint)">
            <param name="picture">The picture.</param>
            <param name="dimensions">The size of the raster surface.</param>
            <param name="matrix">The matrix to use when reading the image.</param>
            <param name="paint">The paint to use when reading the image.</param>
            <summary>Creates a new image from the provided <see cref="T:SkiaSharp.SKPicture" />.</summary>
            <returns>An image whose contents is the picture.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromPixelCopy(SkiaSharp.SKPixmap)">
            <param name="pixmap">The pixmap that contains the image information and buffer location.</param>
            <summary>Creates a new image from a copy of an in-memory buffer.</summary>
            <returns>A new image with a copy of the contents of the specified buffer, or <see langword="null" /> on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromPixelCopy(SkiaSharp.SKImageInfo,System.IntPtr)">
            <param name="info">The image information describing the encoding of the image in memory.</param>
            <param name="pixels">The pointer to the image in memory.</param>
            <summary>Creates a new image from a copy of an in-memory buffer.</summary>
            <returns>A new image with a copy of the contents of the specified buffer, or <see langword="null" /> on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromPixelCopy(SkiaSharp.SKImageInfo,System.IntPtr,System.Int32)">
            <param name="info">The image information describing the encoding of the image in memory.</param>
            <param name="pixels">The pointer to the image in memory.</param>
            <param name="rowBytes">The specified the number of bytes used per row in the image.</param>
            <summary>Creates a new image from a copy of an in-memory buffer.</summary>
            <returns>A new image with a copy of the contents of the specified buffer, or <see langword="null" /> on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromPixelCopy(SkiaSharp.SKImageInfo,System.IntPtr,System.Int32,SkiaSharp.SKColorTable)">
            <param name="info">The image information describing the encoding of the image in memory.</param>
            <param name="pixels">The pointer to the image in memory.</param>
            <param name="rowBytes">The specified the number of bytes used per row in the image.</param>
            <param name="ctable">The color table to use with the image data.</param>
            <summary>Creates a new image from a copy of an in-memory buffer.</summary>
            <returns>A new image with a copy of the contents of the specified buffer, or <see langword="null" /> on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromPixelData(SkiaSharp.SKImageInfo,SkiaSharp.SKData,System.Int32)">
            <param name="info">The image information describing the encoding of the image in memory.</param>
            <param name="data">The data object that contains the pixel data.</param>
            <param name="rowBytes">The specified the number of bytes used per row in the image.</param>
            <summary>Creates a new image from an in-memory buffer.</summary>
            <returns>A new image wrapping the specified buffer, or <see langword="null" /> on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromPixels(SkiaSharp.SKPixmap)">
            <param name="pixmap">The pixmap that contains the image information and buffer location.</param>
            <summary>Creates a new image from an in-memory buffer.</summary>
            <returns>A new image wrapping the specified buffer, or <see langword="null" /> on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromPixels(SkiaSharp.SKImageInfo,System.IntPtr)">
            <param name="info">The image information describing the encoding of the image in memory.</param>
            <param name="pixels">The pointer to the image in memory.</param>
            <summary>Creates a new image from an in-memory buffer.</summary>
            <returns>A new image wrapping the specified buffer, or <see langword="null" /> on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromPixels(SkiaSharp.SKPixmap,SkiaSharp.SKImageRasterReleaseDelegate)">
            <param name="pixmap">The pixmap that contains the image information and buffer location.</param>
            <param name="releaseProc">The delegate to invoke when the image is about to be destroyed.</param>
            <summary>Creates a new image from an in-memory buffer.</summary>
            <returns>A new image wrapping the specified buffer, or <see langword="null" /> on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromPixels(SkiaSharp.SKImageInfo,System.IntPtr,System.Int32)">
            <param name="info">The image information describing the encoding of the image in memory.</param>
            <param name="pixels">The pointer to the image in memory.</param>
            <param name="rowBytes">The specified the number of bytes used per row in the image.</param>
            <summary>Creates a new image from an in-memory buffer.</summary>
            <returns>A new image wrapping the specified buffer, or <see langword="null" /> on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromPixels(SkiaSharp.SKPixmap,SkiaSharp.SKImageRasterReleaseDelegate,System.Object)">
            <param name="pixmap">The pixmap that contains the image information and buffer location.</param>
            <param name="releaseProc">The delegate to invoke when the image is about to be destroyed.</param>
            <param name="releaseContext">The user data to use when invoking the delegate.</param>
            <summary>Creates a new image from an in-memory buffer.</summary>
            <returns>A new image wrapping the specified buffer, or <see langword="null" /> on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromTexture(SkiaSharp.GRContext,SkiaSharp.GRBackendTextureDesc)">
            <param name="context">The graphics context.</param>
            <param name="desc">The description of the existing texture.</param>
            <summary>Creates a new image from the specified texture descriptor.</summary>
            <returns>Returns the new image, or <see langword="null" /> if the specified descriptor is unsupported.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromTexture(SkiaSharp.GRContext,SkiaSharp.GRGlBackendTextureDesc)">
            <param name="context">The graphics context.</param>
            <param name="desc">The description of the existing texture.</param>
            <summary>Creates a new image from the specified OpenGL texture descriptor.</summary>
            <returns>Returns the new image, or <see langword="null" /> if the specified descriptor is unsupported.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromTexture(SkiaSharp.GRContext,SkiaSharp.GRBackendTextureDesc,SkiaSharp.SKAlphaType)">
            <param name="context">The graphics context.</param>
            <param name="desc">The description of the existing texture.</param>
            <param name="alpha">The alpha type of the texture.</param>
            <summary>Creates a new image from the specified texture descriptor.</summary>
            <returns>Returns the new image, or <see langword="null" /> if the specified descriptor is unsupported.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromTexture(SkiaSharp.GRContext,SkiaSharp.GRGlBackendTextureDesc,SkiaSharp.SKAlphaType)">
            <param name="context">The graphics context.</param>
            <param name="desc">The description of the existing OpenGL texture.</param>
            <param name="alpha">The alpha type of the texture.</param>
            <summary>Creates a new image from the specified OpenGL texture descriptor.</summary>
            <returns>Returns the new image, or <see langword="null" /> if the specified descriptor is unsupported.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromTexture(SkiaSharp.GRContext,SkiaSharp.GRBackendTextureDesc,SkiaSharp.SKAlphaType,SkiaSharp.SKImageTextureReleaseDelegate)">
            <param name="context">The graphics context.</param>
            <param name="desc">The description of the existing texture.</param>
            <param name="alpha">The alpha type of the texture.</param>
            <param name="releaseProc">The delegate to invoke when the image is about to be destroyed.</param>
            <summary>Creates a new image from the specified texture descriptor.</summary>
            <returns>Returns the new image, or <see langword="null" /> if the specified descriptor is unsupported.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromTexture(SkiaSharp.GRContext,SkiaSharp.GRGlBackendTextureDesc,SkiaSharp.SKAlphaType,SkiaSharp.SKImageTextureReleaseDelegate)">
            <param name="context">The graphics context.</param>
            <param name="desc">The description of the existing OpenGL texture.</param>
            <param name="alpha">The alpha type of the texture.</param>
            <param name="releaseProc">The delegate to invoke when the image is about to be destroyed.</param>
            <summary>Creates a new image from the specified OpenGL texture descriptor.</summary>
            <returns>Returns the new image, or <see langword="null" /> if the specified descriptor is unsupported.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromTexture(SkiaSharp.GRContext,SkiaSharp.GRBackendTextureDesc,SkiaSharp.SKAlphaType,SkiaSharp.SKImageTextureReleaseDelegate,System.Object)">
            <param name="context">The graphics context.</param>
            <param name="desc">The description of the existing texture.</param>
            <param name="alpha">The alpha type of the texture.</param>
            <param name="releaseProc">The delegate to invoke when the image is about to be destroyed.</param>
            <param name="releaseContext">The user data to use when invoking the delegate.</param>
            <summary>Creates a new image from the specified texture descriptor.</summary>
            <returns>Returns the new image, or <see langword="null" /> if the specified descriptor is unsupported</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.FromTexture(SkiaSharp.GRContext,SkiaSharp.GRGlBackendTextureDesc,SkiaSharp.SKAlphaType,SkiaSharp.SKImageTextureReleaseDelegate,System.Object)">
            <param name="context">The graphics context.</param>
            <param name="desc">The description of the existing OpenGL texture.</param>
            <param name="alpha">The alpha type of the texture.</param>
            <param name="releaseProc">The delegate to invoke when the image is about to be destroyed.</param>
            <param name="releaseContext">The user data to use when invoking the delegate.</param>
            <summary>Creates a new image from the specified OpenGL texture descriptor.</summary>
            <returns>Returns the new image, or <see langword="null" /> if the specified descriptor is unsupported</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKImage.Height">
            <summary>Gets the image height.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKImage.IsAlphaOnly">
            <summary>Gets a value indicating whether the image will be drawn as a mask, with no intrinsic color of its own</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKImage.IsTextureBacked">
            <summary>Gets a value indicating whether the image is texture backed.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKImage.IsLazyGenerated">
            <summary>Gets a value indicating whether the image is backed by an image-generator or other source that creates (and caches) its pixels / texture on-demand.</summary>
            <value>
                <para />
            </value>
            <remarks>If this method returns <see langword="false" />, then <see cref="M:SkiaSharp.SKImage.PeekPixels" /> will return <see langword="null" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.PeekPixels">
            <summary>Returns the pixmap if the image is raster-based.</summary>
            <returns>Returns the pixmap, or <see langword="null" /> if the image does not have access to pixel data.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.PeekPixels(SkiaSharp.SKPixmap)">
            <param name="pixmap">The pixmap to receive the pixel information.</param>
            <summary>Returns the pixmap if the image is raster-based.</summary>
            <returns>Returns <see langword="true" /> on success, or <see langword="false" /> if the image does not have access to pixel data.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.ReadPixels(SkiaSharp.SKPixmap,System.Int32,System.Int32)">
            <param name="pixmap">The pixmap to read the pixel data into.</param>
            <param name="srcX">The source x-coordinate to start reading from.</param>
            <param name="srcY">The source y-coordinate to start reading from.</param>
            <summary>Copies the pixels from the image into the specified buffer.</summary>
            <returns>Returns <see langword="true" /> if the pexels were read, or <see langword="false" /> if there was an error.</returns>
            <remarks>This method may return <see langword="false" /> if the source rectangle [<paramref name="srcX" />, <paramref name="srcY" />, dst.Info.Width, dst.Info.Height] does not intersect the image, or if the color type/alpha type could not be converted to the destination types.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.ReadPixels(SkiaSharp.SKPixmap,System.Int32,System.Int32,SkiaSharp.SKImageCachingHint)">
            <param name="pixmap">The pixmap to read the pixel data into.</param>
            <param name="srcX">The source x-coordinate to start reading from.</param>
            <param name="srcY">The source y-coordinate to start reading from.</param>
            <param name="cachingHint">Whether or not to cache intermediate results.</param>
            <summary>Copies the pixels from the image into the specified buffer.</summary>
            <returns>Returns <see langword="true" /> if the pexels were read, or <see langword="false" /> if there was an error.</returns>
            <remarks>This method may return <see langword="false" /> if the source rectangle [<paramref name="srcX" />, <paramref name="srcY" />, dst.Info.Width, dst.Info.Height] does not intersect the image, or if the color type/alpha type could not be converted to the destination types.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.ReadPixels(SkiaSharp.SKImageInfo,System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <param name="dstInfo">The image information describing the destination pixel buffer.</param>
            <param name="dstPixels">The pixel buffer to read the pixel data into.</param>
            <param name="dstRowBytes">The number of bytes in each row of in the destination buffer.</param>
            <param name="srcX">The source x-coordinate to start reading from.</param>
            <param name="srcY">The source y-coordinate to start reading from.</param>
            <summary>Copies the pixels from the image into the specified buffer.</summary>
            <returns>Returns <see langword="true" /> if the pixels were read, or <see langword="false" /> if there was an error.</returns>
            <remarks>This method may return <see langword="false" /> if the source rectangle [<paramref name="srcX" />, <paramref name="srcY" />, dstInfo.Width, dstInfo.Height] does not intersect the image, or if the color type/alpha type could not be converted to the destination types.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.ReadPixels(SkiaSharp.SKImageInfo,System.IntPtr,System.Int32,System.Int32,System.Int32,SkiaSharp.SKImageCachingHint)">
            <param name="dstInfo">The image information describing the destination pixel buffer.</param>
            <param name="dstPixels">The pixel buffer to read the pixel data into.</param>
            <param name="dstRowBytes">The number of bytes in each row of in the destination buffer.</param>
            <param name="srcX">The source x-coordinate to start reading from.</param>
            <param name="srcY">The source y-coordinate to start reading from.</param>
            <param name="cachingHint">Whether or not to cache intermediate results.</param>
            <summary>Copies the pixels from the image into the specified buffer.</summary>
            <returns>Returns <see langword="true" /> if the pexels were read, or <see langword="false" /> if there was an error.</returns>
            <remarks>This method may return <see langword="false" /> if the source rectangle [<paramref name="srcX" />, <paramref name="srcY" />, dstInfo.Width, dstInfo.Height] does not intersect the image, or if the color type/alpha type could not be converted to the destination types.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.ScalePixels(SkiaSharp.SKPixmap,SkiaSharp.SKFilterQuality)">
            <param name="dst">The pixmap describing the destination pixel buffer.</param>
            <param name="quality">The quality of scaling to use.</param>
            <summary>Copies the pixels from this image into the destination pixmap, scaling the image if the dimensions differ.</summary>
            <returns>Rreturns <see langword="true" /> on success, or <see langword="false" /> if the color type/alpha type could not be converted to the destination types.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.ScalePixels(SkiaSharp.SKPixmap,SkiaSharp.SKFilterQuality,SkiaSharp.SKImageCachingHint)">
            <param name="dst">The pixmap describing the destination pixel buffer.</param>
            <param name="quality">The quality of scaling to use.</param>
            <param name="cachingHint">Whether or not to cache intermediate results.</param>
            <summary>Copies the pixels from this image into the destination pixmap, scaling the image if the dimensions differ.</summary>
            <returns>Rreturns <see langword="true" /> on success, or <see langword="false" /> if the color type/alpha type could not be converted to the destination types.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.Subset(SkiaSharp.SKRectI)">
            <param name="subset">The rectangle indicating the subset to obtain.</param>
            <summary>Returns a new image that is a subset of this image.</summary>
            <returns>Returns the new image, or <see langword="null" /> if there was an error or the rectangle does not intersct the image.</returns>
            <remarks>The underlying implementation may share the pixels, or it may make a copy.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.ToRasterImage">
            <summary>Returns a raster-based image of the current image.</summary>
            <returns>Returns a raster-based copy of a texture image, or the same image if it already raster-based.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.ToShader(SkiaSharp.SKShaderTileMode,SkiaSharp.SKShaderTileMode)">
            <param name="tileX">The method in which to tile along the x-axis.</param>
            <param name="tileY">The method in which to tile along the y-axis.</param>
            <summary>Creates a new bitmap shader from the current image.</summary>
            <returns>Returns a new bitmap shader that will draw the current image.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImage.ToShader(SkiaSharp.SKShaderTileMode,SkiaSharp.SKShaderTileMode,SkiaSharp.SKMatrix)">
            <param name="tileX">The method in which to tile along the x-axis.</param>
            <param name="tileY">The method in which to tile along the y-axis.</param>
            <param name="localMatrix">The local matrix to use with the shader.</param>
            <summary>Creates a new bitmap shader from the current image.</summary>
            <returns>Returns a new bitmap shader that will draw the current image.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKImage.UniqueId">
            <summary>Gets the unique ID associated with the image.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKImage.Width">
            <summary>Gets the image width.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKImageCachingHint">
            <summary>Hints to image calls where the system might cache computed intermediates.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKImageCachingHint.Allow">
            <summary>Use the system’s default behaviour.</summary>
        </member>
        <member name="F:SkiaSharp.SKImageCachingHint.Disallow">
            <summary>Caching should be avoided</summary>
        </member>
        <member name="T:SkiaSharp.SKImageFilter">
            <summary>Image filters for use with the <see cref="P:SkiaSharp.SKPaint.ImageFilter" /> property of a <see cref="T:SkiaSharp.SKPaint" />.</summary>
            <remarks />
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateAlphaThreshold(SkiaSharp.SKRectI,System.Single,System.Single,SkiaSharp.SKImageFilter)">
            <param name="region">The region to sample.</param>
            <param name="innerThreshold">The minimum alpha for pixels within the region.</param>
            <param name="outerThreshold">The maximum alpha for pixels outside the region.</param>
            <param name="input">The input filter to use.</param>
            <summary>Creates an image filter that samples a region.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImageFilter" />, or null on error.</returns>
            <remarks>If the sample is inside the region the alpha of the image is boosted up to a threshold value. If it is outside the region then the alpha is decreased to the threshold value. The (0, 0) point of the region corresponds to the upper left corner of the source image.</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateArithmetic(System.Single,System.Single,System.Single,System.Single,System.Boolean,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter+CropRect)">
            <param name="k1">The k1 constant value.</param>
            <param name="k2">The k2 constant value.</param>
            <param name="k3">The k3 constant value.</param>
            <param name="k4">The k4 constant value.</param>
            <param name="enforcePMColor">Whether or not premultiplied colors are enforced.</param>
            <param name="background">The background image filter to use. If this is null, then the source bitmap is used.</param>
            <param name="foreground">The foreground image filter to use. If this is null, then the source bitmap is used.</param>
            <param name="cropRect">The rectangle to which the output processing will be limited.</param>
            <summary>Creates an image filter that applies the specified arithmetic blend.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImageFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateBlendMode(SkiaSharp.SKBlendMode,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter+CropRect)">
            <param name="mode">The blend mode.</param>
            <param name="background">The background filter.</param>
            <param name="foreground">The forground filter.</param>
            <param name="cropRect">The rectangle to which the output processing will be limited.</param>
            <summary>Creates an image filter that applies a blend mode.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImageFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateBlur(System.Single,System.Single,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter+CropRect)">
            <param name="sigmaX">The standard deviation of the Gaussian blur to apply (greater than 0) in the horizontal direction.</param>
            <param name="sigmaY">The standard deviation of the Gaussian blur to apply (greater than 0) in the vertical direction.</param>
            <param name="input">The input filter to use.</param>
            <param name="cropRect">The rectangle to which the output processing will be limited.</param>
            <summary>Creates an image filter that applies a blur.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImageFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateColorFilter(SkiaSharp.SKColorFilter,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter+CropRect)">
            <param name="cf">The color filter to use.</param>
            <param name="input">The input filter to use.</param>
            <param name="cropRect">The rectangle to which the output processing will be limited.</param>
            <summary>Creates an image filter that applies a color filter.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImageFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateCompose(SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter)">
            <param name="outer">The outer (second) filter to apply.</param>
            <param name="inner">The inner (first) filter to apply.</param>
            <summary>Creates an image filter, whose effect is to first apply the inner filter and then apply the outer filter to the result of the inner's.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImageFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateDilate(System.Int32,System.Int32,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter+CropRect)">
            <param name="radiusX">The amount of dilation in the x-direction.</param>
            <param name="radiusY">The amount of dilation in the y-direction.</param>
            <param name="input">The input filter to use.</param>
            <param name="cropRect">The rectangle to which the output processing will be limited.</param>
            <summary>Creates an image filter that applies a dilation to pixels of a bitmap.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImageFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateDisplacementMapEffect(SkiaSharp.SKDisplacementMapEffectChannelSelectorType,SkiaSharp.SKDisplacementMapEffectChannelSelectorType,System.Single,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter+CropRect)">
            <param name="xChannelSelector">The channel in the x-direction to select for displacement.</param>
            <param name="yChannelSelector">The channel in the y-direction to select for displacement.</param>
            <param name="scale">The amount to displace by.</param>
            <param name="displacement">The image filter to apply the displacement to.</param>
            <param name="input">The input filter to use.</param>
            <param name="cropRect">The rectangle to which the output processing will be limited.</param>
            <summary>Creates an image filter that applies a displacement map.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImageFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateDistantLitDiffuse(SkiaSharp.SKPoint3,SkiaSharp.SKColor,System.Single,System.Single,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter+CropRect)">
            <param name="direction">The direction of the light.</param>
            <param name="lightColor">The color of the light.</param>
            <param name="surfaceScale">The surface height to use.</param>
            <param name="kd">The diffuse lighting constant.</param>
            <param name="input">The input filter to use.</param>
            <param name="cropRect">The rectangle to which the output processing will be limited.</param>
            <summary>Creates an image filter that applies a distant diffuse lighting.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImageFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateDistantLitSpecular(SkiaSharp.SKPoint3,SkiaSharp.SKColor,System.Single,System.Single,System.Single,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter+CropRect)">
            <param name="direction">The direction of the light.</param>
            <param name="lightColor">The color of the light.</param>
            <param name="surfaceScale">The surface height to use.</param>
            <param name="ks">The specular lighting constant.</param>
            <param name="shininess">The shininess or specular exponent.</param>
            <param name="input">The input filter to use.</param>
            <param name="cropRect">The rectangle to which the output processing will be limited.</param>
            <summary>Creates an image filter that applies a distant specular lighting.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImageFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateDropShadow(System.Single,System.Single,System.Single,System.Single,SkiaSharp.SKColor,SkiaSharp.SKDropShadowImageFilterShadowMode,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter+CropRect)">
            <param name="dx">The shadow offset in the x-direction.</param>
            <param name="dy">The shadow offset in the y-direction.</param>
            <param name="sigmaX">The amount to blur in the x-direction.</param>
            <param name="sigmaY">The amount to blur in the y-direction.</param>
            <param name="color">The shadow color.</param>
            <param name="shadowMode">The shadow mode.</param>
            <param name="input">The input filter to use.</param>
            <param name="cropRect">The rectangle to which the output processing will be limited.</param>
            <summary>Creates an image filter that applies a drop shadow.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImageFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateErode(System.Int32,System.Int32,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter+CropRect)">
            <param name="radiusX">The amount to erode in the x-direction.</param>
            <param name="radiusY">The amount to erode in the y-direction.</param>
            <param name="input">The input filter to use.</param>
            <param name="cropRect">The rectangle to which the output processing will be limited.</param>
            <summary>Creates an image filter that erodes the pixels of a bitmap.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImageFilter" />, or null on error.</returns>
            <remarks>To be added</remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateImage(SkiaSharp.SKImage)">
            <param name="image">The image to draw.</param>
            <summary>Creates an image filter that draws an image.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImageFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateImage(SkiaSharp.SKImage,SkiaSharp.SKRect,SkiaSharp.SKRect,SkiaSharp.SKFilterQuality)">
            <param name="image">The image to draw.</param>
            <param name="src">The rectangle of the source image to draw.</param>
            <param name="dst">The rectangle of the destination area.</param>
            <param name="filterQuality">The filter quality.</param>
            <summary>Creates an image filter that draws an image.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImageFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateMagnifier(SkiaSharp.SKRect,System.Single,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter+CropRect)">
            <param name="src">The rectangle area to magnify.</param>
            <param name="inset">The amount of magnification to apply.</param>
            <param name="input">The input filter to use.</param>
            <param name="cropRect">The rectangle to which the output processing will be limited.</param>
            <summary>Creates an image filter that magnifies an area of a bitmap.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImageFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateMatrix(SkiaSharp.SKMatrix,SkiaSharp.SKFilterQuality,SkiaSharp.SKImageFilter)">
            <param name="matrix">The transformation matrix.</param>
            <param name="quality">The quality.</param>
            <param name="input">The input filter to use.</param>
            <summary>Creates an image filter that applies a transformation matrix.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImageFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateMatrixConvolution(SkiaSharp.SKSizeI,System.Single[],System.Single,System.Single,SkiaSharp.SKPointI,SkiaSharp.SKMatrixConvolutionTileMode,System.Boolean,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter+CropRect)">
            <param name="kernelSize">The kernel size in pixels, in each dimension (N by M).</param>
            <param name="kernel">The image processing kernel, with N * M elements in row order.</param>
            <param name="gain">A scale factor applied to each pixel after convolution.</param>
            <param name="bias">A bias factor added to each pixel after convolution.</param>
            <param name="kernelOffset">An offset applied to each pixel coordinate before convolution.</param>
            <param name="tileMode">How accesses outside the image are treated.</param>
            <param name="convolveAlpha">Whether or not all channels are convolved, or just the RGB channels.</param>
            <param name="input">The input filter to use.</param>
            <param name="cropRect">The rectangle to which the output processing will be limited.</param>
            <summary>Creates an image that filter applies an NxM image processing kernel.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImageFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateMerge(SkiaSharp.SKImageFilter[],SkiaSharp.SKBlendMode[],SkiaSharp.SKImageFilter+CropRect)">
            <param name="filters">The image filters to merge.</param>
            <param name="modes">The blend modes to merge the filters with.</param>
            <param name="cropRect">The rectangle to which the output processing will be limited.</param>
            <summary>Creates an image filter that merges a set of image filters using blend modes.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImageFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateMerge(SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter,SkiaSharp.SKBlendMode,SkiaSharp.SKImageFilter+CropRect)">
            <param name="first">The first image filter to merge.</param>
            <param name="second">The second image filter to merge.</param>
            <param name="mode">The blend mode to merge the filters with.</param>
            <param name="cropRect">The rectangle to which the output processing will be limited.</param>
            <summary>Creates an image filter that merges two image filters using a blend mode.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImageFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateOffset(System.Single,System.Single,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter+CropRect)">
            <param name="dx">The amount to offset in the x-direction.</param>
            <param name="dy">The amount to offset in the y-direction.</param>
            <param name="input">The input filter to use.</param>
            <param name="cropRect">The rectangle to which the output processing will be limited.</param>
            <summary>Creates an image filter that translates the bitmap that is drawn.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImageFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreatePaint(SkiaSharp.SKPaint,SkiaSharp.SKImageFilter+CropRect)">
            <param name="paint">The paint to draw.</param>
            <param name="cropRect">The rectangle to which the output processing will be limited.</param>
            <summary>Creates an image filter that draws a paint.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImageFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreatePicture(SkiaSharp.SKPicture)">
            <param name="picture">The picture to draw.</param>
            <summary>Creates an image filter that draws a picture.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImageFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreatePicture(SkiaSharp.SKPicture,SkiaSharp.SKRect)">
            <param name="picture">The picture to draw.</param>
            <param name="cropRect">The rectangle to which the output processing will be limited.</param>
            <summary>Creates an image filter that draws a picture.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImageFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreatePictureForLocalspace(SkiaSharp.SKPicture,SkiaSharp.SKRect,SkiaSharp.SKFilterQuality)">
            <param name="picture">The picture to draw.</param>
            <param name="cropRect">The rectangle to which the output processing will be limited.</param>
            <param name="filterQuality">The quality.</param>
            <summary>Creates an image filter that draws a picture at a resolution that matches the local coordinate space.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImageFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreatePointLitDiffuse(SkiaSharp.SKPoint3,SkiaSharp.SKColor,System.Single,System.Single,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter+CropRect)">
            <param name="location">The location of the light.</param>
            <param name="lightColor">The color of the light.</param>
            <param name="surfaceScale">The surface height to use.</param>
            <param name="kd">The diffuse lighting constant.</param>
            <param name="input">The input filter to use.</param>
            <param name="cropRect">The rectangle to which the output processing will be limited.</param>
            <summary>Creates an image filter that applies a point diffuse lighting.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImageFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreatePointLitSpecular(SkiaSharp.SKPoint3,SkiaSharp.SKColor,System.Single,System.Single,System.Single,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter+CropRect)">
            <param name="location">The location of the light.</param>
            <param name="lightColor">The color of the light.</param>
            <param name="surfaceScale">The surface height to use.</param>
            <param name="ks">The specular lighting constant.</param>
            <param name="shininess">The shininess or specular exponent.</param>
            <param name="input">The input filter to use.</param>
            <param name="cropRect">The rectangle to which the output processing will be limited.</param>
            <summary>Creates an image filter that applies a point specular lighting.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImageFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateSpotLitDiffuse(SkiaSharp.SKPoint3,SkiaSharp.SKPoint3,System.Single,System.Single,SkiaSharp.SKColor,System.Single,System.Single,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter+CropRect)">
            <param name="location">The location of the light.</param>
            <param name="target">The target location of the light.</param>
            <param name="specularExponent">The specular exponent.</param>
            <param name="cutoffAngle">The cutoff angle of the spotlight.</param>
            <param name="lightColor">The color of the light.</param>
            <param name="surfaceScale">The surface height to use.</param>
            <param name="kd">The diffuse lighting constant.</param>
            <param name="input">The input filter to use.</param>
            <param name="cropRect">The rectangle to which the output processing will be limited.</param>
            <summary>Creates an image filter that applies a spot diffuse lighting.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImageFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateSpotLitSpecular(SkiaSharp.SKPoint3,SkiaSharp.SKPoint3,System.Single,System.Single,SkiaSharp.SKColor,System.Single,System.Single,System.Single,SkiaSharp.SKImageFilter,SkiaSharp.SKImageFilter+CropRect)">
            <param name="location">The location of the light.</param>
            <param name="target">The target location of the light.</param>
            <param name="specularExponent">The specular exponent.</param>
            <param name="cutoffAngle">The cutoff angle of the spotlight.</param>
            <param name="lightColor">The color of the light.</param>
            <param name="surfaceScale">The surface height to use.</param>
            <param name="ks">The specular lighting constant.</param>
            <param name="shininess">The shininess or specular exponent.</param>
            <param name="input">The input filter to use.</param>
            <param name="cropRect">The rectangle to which the output processing will be limited.</param>
            <summary>Creates an image filter that applies a spot specular lighting.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImageFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.CreateTile(SkiaSharp.SKRect,SkiaSharp.SKRect,SkiaSharp.SKImageFilter)">
            <param name="src">The pixels to tile.</param>
            <param name="dst">The pixels where the tiles are drawn</param>
            <param name="input">The input filter to use.</param>
            <summary>Creates an image filter that tiles the image being drawn.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImageFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKImageFilter+CropRect">
            <summary>The rectangle to which the output processing of an <see cref="T:SkiaSharp.SKImageFilter" /> will be limited.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKImageFilter+CropRect">
            <summary>Creates an empty crop rectangle.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKImageFilter+CropRect(SkiaSharp.SKRect,SkiaSharp.SKCropRectFlags)">
            <param name="rect">The rectangle to crop to.</param>
            <param name="flags">The edges that are specified by the rectangle.</param>
            <summary>Creates a crop rectangle with the specified edges.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageFilter+CropRect.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKImageFilter+CropRect.Flags">
            <summary>Gets the edges that are specified by the rectangle.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKImageFilter+CropRect.Rect">
            <summary>Gets rectangle to crop to.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKImageInfo">
            <summary>Describe an image's dimensions and pixel type.</summary>
            <remarks />
        </member>
        <member name="C:SkiaSharp.SKImageInfo(System.Int32,System.Int32)">
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <summary>Creates a new <see cref="T:SkiaSharp.SKImageInfo" /> with the specified width and height.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKImageInfo(System.Int32,System.Int32,SkiaSharp.SKColorType)">
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="colorType">The color type.</param>
            <summary>Creates a new <see cref="T:SkiaSharp.SKImageInfo" /> with the specified width, height and color type.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKImageInfo(System.Int32,System.Int32,SkiaSharp.SKColorType,SkiaSharp.SKAlphaType)">
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="colorType">The color type.</param>
            <param name="alphaType">The alpha/transparency type.</param>
            <summary>Creates a new <see cref="T:SkiaSharp.SKImageInfo" /> with the specified width, height, color type and transparency type.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKImageInfo(System.Int32,System.Int32,SkiaSharp.SKColorType,SkiaSharp.SKAlphaType,SkiaSharp.SKColorSpace)">
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="colorType">The color type.</param>
            <param name="alphaType">The alpha/transparency type.</param>
            <param name="colorspace">The color space.</param>
            <summary>Creates a new <see cref="T:SkiaSharp.SKImageInfo" /> with the specified width, height, color type, transparency type and color space.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKImageInfo.AlphaType">
            <summary>Gets the transparency type for the image info.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKImageInfo.BitsPerPixel">
            <summary>Gets the number of bits used per pixel.</summary>
            <value>
                <para />
            </value>
            <remarks>This is equivalent to multiplying the <see cref="P:SkiaSharp.SKImageInfo.BytesPerPixel" /> by 8 (the number of bits in a byte).</remarks>
        </member>
        <member name="P:SkiaSharp.SKImageInfo.BytesPerPixel">
            <summary>Gets the number of bytes used per pixel.</summary>
            <value />
            <remarks>This is calculated from the <see cref="P:SkiaSharp.SKImageInfo.ColorType" />. If the color type is <see cref="F:SkiaSharp.SKColorType.Unknown" />, then the value will be 0.</remarks>
        </member>
        <member name="P:SkiaSharp.SKImageInfo.BytesSize">
            <summary>Gets the total number of bytes needed to store the bitmap data.</summary>
            <value />
            <remarks>This is calculated as: <see cref="P:SkiaSharp.SKImageInfo.Width" /> * <see cref="P:SkiaSharp.SKImageInfo.Height" /> * <see cref="P:SkiaSharp.SKImageInfo.BytesPerPixel" />.</remarks>
        </member>
        <member name="P:SkiaSharp.SKImageInfo.BytesSize64">
            <summary>Gets the total number of bytes needed to store the bitmap data as a 64-bit integer.</summary>
            <value>
                <para />
            </value>
            <remarks>This is calculated as: <see cref="P:SkiaSharp.SKImageInfo.Width" /> * <see cref="P:SkiaSharp.SKImageInfo.Height" /> * <see cref="P:SkiaSharp.SKImageInfo.BytesPerPixel" />.</remarks>
        </member>
        <member name="P:SkiaSharp.SKImageInfo.ColorSpace">
            <summary>Gets or sets the color space.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKImageInfo.ColorType">
            <summary>Gets or sets the color type.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKImageInfo.Empty">
            <summary>An empty <see cref="T:SkiaSharp.SKImageInfo" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKImageInfo.Height">
            <summary>Gets or sets the height.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKImageInfo.IsEmpty">
            <summary>Gets a value indicating whether the width or height are less or equal than zero.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKImageInfo.IsOpaque">
            <summary>Gets a value indicating whether the configured alpha type is opaque.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKImageInfo.PlatformColorAlphaShift">
            <summary>The number of bits to shift left for the alpha color component.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKImageInfo.PlatformColorBlueShift">
            <summary>The number of bits to shift left for the blue color component.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKImageInfo.PlatformColorGreenShift">
            <summary>The number of bits to shift left for the green color component.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKImageInfo.PlatformColorRedShift">
            <summary>The number of bits to shift left for the red color component.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKImageInfo.PlatformColorType">
            <summary>The current 32-bit color for the current platform.</summary>
            <remarks>On Windows, it is typically <see cref="F:SkiaSharp.SKColorType.Bgra8888" />, and on Unix-based systems (macOS, Linux) it is typically <see cref="F:SkiaSharp.SKColorType.Rgba8888" />.</remarks>
        </member>
        <member name="P:SkiaSharp.SKImageInfo.Rect">
            <summary>Gets a rectangle with the current width and height.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKImageInfo.RowBytes">
            <summary>Gets the number of bytes per row.</summary>
            <value>
                <para />
            </value>
            <remarks>This is calculated as: <see cref="P:SkiaSharp.SKImageInfo.Width" /> * <see cref="P:SkiaSharp.SKImageInfo.BytesPerPixel" />.</remarks>
        </member>
        <member name="P:SkiaSharp.SKImageInfo.RowBytes64">
            <summary>Gets the number of bytes per row as a 64-bit integer.</summary>
            <value>
                <para />
            </value>
            <remarks>This is calculated as: <see cref="P:SkiaSharp.SKImageInfo.Width" /> * <see cref="P:SkiaSharp.SKImageInfo.BytesPerPixel" />.</remarks>
        </member>
        <member name="P:SkiaSharp.SKImageInfo.Size">
            <summary>Gets the current size of the image.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKImageInfo.Width">
            <summary>Gets or sets the width.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageInfo.WithAlphaType(SkiaSharp.SKAlphaType)">
            <param name="newAlphaType">The alpha/transparency type.</param>
            <summary>Creates a new <see cref="T:SkiaSharp.SKImageInfo" /> with the same properties as this <see cref="T:SkiaSharp.SKImageInfo" />, but with the specified transparency type.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImageInfo" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageInfo.WithColorSpace(SkiaSharp.SKColorSpace)">
            <param name="newColorSpace">The color space.</param>
            <summary>Creates a new <see cref="T:SkiaSharp.SKImageInfo" /> with the same properties as this <see cref="T:SkiaSharp.SKImageInfo" />, but with the specified color space.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImageInfo" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKImageInfo.WithColorType(SkiaSharp.SKColorType)">
            <param name="newColorType">The color type.</param>
            <summary>Creates a new <see cref="T:SkiaSharp.SKImageInfo" /> with the same properties as this <see cref="T:SkiaSharp.SKImageInfo" />, but with the specified color type.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKImageInfo" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKImageRasterReleaseDelegate">
            <param name="pixels">The memory address of the pixels being released.</param>
            <param name="context">The user data that was provided when creating the image.</param>
            <summary>The delegate that is used when releasing the memory for a raster-based image.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKImageTextureReleaseDelegate">
            <param name="context">The context of the image.</param>
            <summary>The delegate that is used when releasing the memory for a texture-based image.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKLattice">
            <summary>Specifies coordinates to divide a bitmap into (<see cref="P:SkiaSharp.SKLattice.XDivs" /> * <see cref="P:SkiaSharp.SKLattice.YDivs" />) rectangles.</summary>
            <remarks>If the lattice divs or bounds are invalid, the entire lattice struct will be ignored on the draw call.</remarks>
        </member>
        <member name="P:SkiaSharp.SKLattice.Bounds">
            <summary>Gets or sets the optional source image bounds.</summary>
            <value>Gets any specified bounds.</value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKLattice.Flags">
            <summary>Gets or sets the drawing options for each of the lattice rectangles.</summary>
            <value>Gets the drawing options for each of the rectangles.</value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKLattice.XDivs">
            <summary>Gets or sets the x-coordinates for the lattice.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKLattice.YDivs">
            <summary>Gets or sets the y-coordinates for the lattice.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKLatticeFlags">
            <summary>Flags to control how the bitmap lattice is drawn.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKLatticeFlags.Default">
            <summary>Draw the bitmap for the rectangle.</summary>
        </member>
        <member name="F:SkiaSharp.SKLatticeFlags.Transparent">
            <summary>Skip the drawing for the rectangle.</summary>
        </member>
        <member name="T:SkiaSharp.SKManagedPixelSerializer">
            <summary>Represents a mechanism for serializing pixels.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKManagedPixelSerializer">
            <summary>Creates a new instance of <see cref="T:SkiaSharp.SKManagedPixelSerializer" /> with an empty buffer.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKManagedPixelSerializer.OnEncode(SkiaSharp.SKPixmap)">
            <param name="pixmap">The pixel data to encode.</param>
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKManagedPixelSerializer" /> types to encode the specified pixel data.</summary>
            <returns>Returns the encoded pixel data, or <see langword="null" /> if the raw pixels should be used.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKManagedPixelSerializer.OnUseEncodedData(System.IntPtr,System.IntPtr)">
            <param name="data">The encoded data buffer.</param>
            <param name="length">The length of the encoded data buffer.</param>
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKManagedPixelSerializer" /> types to determine whether the caller should use the specified encoded data instead of encoding a new version.</summary>
            <returns>Returns <see langword="true" /> if the specified encoded data should be used, otherwise <see langword="false" /> to serialize another version.</returns>
            <remarks>If this method returns <see langword="true" />, then <see cref="M:SkiaSharp.SKPixelSerializer.Encode" /> should not be called to encode the source data.</remarks>
        </member>
        <member name="T:SkiaSharp.SKManagedStream">
            <summary>Wraps a <see cref="T:System.IO.Stream" /> into a <see cref="T:SkiaSharp.SKStreamAsset" /> (a seekable, rewindable Skia stream)</summary>
            <remarks>
                <para>The following example shows how to wrap a <see cref="T:System.IO.Stream" /> that represents a stream into an embedded resource in an assembly and use it with Skia APIs that use resources:</para>
                <para />
                <para />
                <example>
                    <code lang="C#"><![CDATA[public static void BitmapShader (SKCanvas canvas, int width, int height)
{
    var assembly = typeof(Demos).GetTypeInfo ().Assembly;

    // load the image from the embedded resource stream
    using (var resource = assembly.GetManifestResourceStream ("embedded.png"))
    using (var stream = new SKManagedStream(resource)) 
    using (var source = SKBitmap.Decode (stream)) {
        var matrix = SKMatrix.MakeRotation (30.0f);
        using (var shader = SKShader.CreateBitmap (source, SKShaderTileMode.Repeat, SKShaderTileMode.Repeat, matrix))
        using (var paint = new SKPaint ()) {
            paint.IsAntialias = true;
            paint.Shader = shader;

            // tile the bitmap
            canvas.Clear (SKColors.White);
            canvas.DrawPaint (paint);
        }
    }
}]]></code>
                </example>
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKManagedStream(System.IO.Stream)">
            <param name="managedStream">The managed stream.</param>
            <summary>Creates a new read-only stream from a <see cref="T:System.IO.Stream" />.</summary>
            <remarks>The underlying stream is not disposed when this object is disposed.</remarks>
        </member>
        <member name="C:SkiaSharp.SKManagedStream(System.IO.Stream,System.Boolean)">
            <param name="managedStream">The managed stream.</param>
            <param name="disposeManagedStream">If this is set to <see langword="true" />, the provided <see langword="managedStream" /> will be disposed when this instance is disposed.</param>
            <summary>Creates a new read-only stream from a <see cref="T:System.IO.Stream" />, can optionally dispose the provided stream when this stream is disposed.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKManagedStream.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKManagedStream.OnCreateNew">
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to copy the current stream.</summary>
            <returns>Returns a pointer to the new <see cref="T:SkiaSharp.SKStreamAsset" /> instance.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKManagedStream.OnGetLength">
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to return the total length of the stream.</summary>
            <returns>Returns the total length of the stream.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKManagedStream.OnGetPosition">
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to get the current position in the stream</summary>
            <returns>Returns the current position in the stream.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKManagedStream.OnHasLength">
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to indicate whether this stream can report it's total length.</summary>
            <returns>Returns a value indicating whether this stream can report it's total length.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKManagedStream.OnHasPosition">
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to indicate whether this stream can report it's current position.</summary>
            <returns>Returns a value indicating whether this stream can report it's current position.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKManagedStream.OnIsAtEnd">
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to indicate whether all the bytes in the stream have been read.</summary>
            <returns>Returns a value indicating whether all the bytes in the stream have been read.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKManagedStream.OnMove(System.Int32)">
            <param name="offset">The relative offset.</param>
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to seek to a relative offset.</summary>
            <returns>Returns <see langword="true" /> if seeking is supported and the seek was successful, otherwise <see langword="false" />.</returns>
            <remarks>If an attempt is made to move to a position outside the stream, the position must be set to the closest point within the stream (beginning or end).</remarks>
        </member>
        <member name="M:SkiaSharp.SKManagedStream.OnPeek(System.IntPtr,System.IntPtr)">
            <param name="buffer">The buffer to read into.</param>
            <param name="size">The number of bytes to read.</param>
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to copy the specified number of bytes into the specified buffer.</summary>
            <returns>Returns the number of bytes actually peeked/copied.</returns>
            <remarks>The stream’s cursor must be returned to the position before this method was called.</remarks>
        </member>
        <member name="M:SkiaSharp.SKManagedStream.OnRead(System.IntPtr,System.IntPtr)">
            <param name="buffer">The buffer to read into.</param>
            <param name="size">The number of bytes to read.</param>
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to copy the specified number of bytes into the specified buffer.</summary>
            <returns>Returns the number of bytes actually read.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKManagedStream.OnRewind">
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to rewind the current stream.</summary>
            <returns>Returns <see langword="true" /> if the stream is known to be at the beginning after this call returns.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKManagedStream.OnSeek(System.IntPtr)">
            <param name="position">The absolute position.</param>
            <summary>Implemented by derived <see cref="T:SkiaSharp.SKAbstractManagedStream" /> types to seek to an absolute position.</summary>
            <returns>Returns <see langword="true" /> if seeking is supported and the seek was successful, otherwise <see langword="false" />.</returns>
            <remarks>If an attempt is made to move to a position outside the stream, the position must be set to the closest point within the stream (beginning or end).</remarks>
        </member>
        <member name="T:SkiaSharp.SKManagedWStream">
            <summary>Wraps a <see cref="T:System.IO.Stream" /> into a <see cref="T:SkiaSharp.SKWStream" /> (a writable Skia stream)</summary>
            <remarks />
        </member>
        <member name="C:SkiaSharp.SKManagedWStream(System.IO.Stream)">
            <param name="managedStream">The managed stream.</param>
            <summary>Creates a new writable stream from a <see cref="T:System.IO.Stream" />.</summary>
            <remarks>The underlying stream is not disposed when this object is disposed.</remarks>
        </member>
        <member name="C:SkiaSharp.SKManagedWStream(System.IO.Stream,System.Boolean)">
            <param name="managedStream">The managed stream.</param>
            <param name="disposeManagedStream">If this is set to <see langword="true" />, the provided <see langword="managedStream" /> will be disposed when this instance is disposed.</param>
            <summary>Creates a new writable stream from a <see cref="T:System.IO.Stream" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKManagedWStream.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKMask">
            <summary>A mask is used to describe alpha bitmaps, either 1-bit, 8-bit, or the 3-channel 3D format.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKMask(SkiaSharp.SKRectI,System.UInt32,SkiaSharp.SKMaskFormat)">
            <param name="bounds">The bounds of the mask in the image.</param>
            <param name="rowBytes">The number of bytes per row.</param>
            <param name="format">The format of the mask image.</param>
            <summary>Creates an instance of <see cref="T:SkiaSharp.SKMask" /> with the specified configuration, but a null <see cref="P:SkiaSharp.SKMask.Image" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKMask(System.IntPtr,SkiaSharp.SKRectI,System.UInt32,SkiaSharp.SKMaskFormat)">
            <param name="image">The pointer to the image data to use as the mask.</param>
            <param name="bounds">The bounds of the mask in the image.</param>
            <param name="rowBytes">The number of bytes per row.</param>
            <param name="format">The format of the mask image.</param>
            <summary>Creates an instance of <see cref="T:SkiaSharp.SKMask" /> with the specified configuration.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMask.AllocateImage">
            <summary>Allocates a memory block for the mask’s image.</summary>
            <returns>Returns the total size of the allocated memory.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMask.AllocateImage(System.Int64)">
            <param name="size">The amount of memory to allocate.</param>
            <summary>Allocates a memory block for a mask’s image.</summary>
            <returns>Returns a pointer to the allocated memory.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKMask.Bounds">
            <summary>Gets the bounds of the mask in the image.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMask.ComputeImageSize">
            <summary>Calculates the byte size of the mask, assuming only 1 plane.</summary>
            <returns>Returns the byte size of the mask.</returns>
            <remarks>
                <para>Does not account for <see cref="F:SkiaSharp.SKMaskFormat.ThreeD" />. For that, use <see cref="M:SkiaSharp.SKMask.ComputeTotalImageSize" />.</para>
                <para>If there is an overflow of 32bits, then returns 0.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMask.ComputeTotalImageSize">
            <summary>Calculates the byte size of the mask, taking into account any extra planes (e.g. <see cref="F:SkiaSharp.SKMaskFormat.ThreeD" />).</summary>
            <returns>Returns the byte size of the mask.</returns>
            <remarks>If there is an overflow of 32bits, then returns 0.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMask.Create(System.Byte[],SkiaSharp.SKRectI,System.UInt32,SkiaSharp.SKMaskFormat)">
            <param name="image">The image data to copy into the mask.</param>
            <param name="bounds">The bounds of the mask in the image.</param>
            <param name="rowBytes">The number of bytes per row.</param>
            <param name="format">The format of the mask image.</param>
            <summary>Creates an instance of <see cref="T:SkiaSharp.SKMask" /> with the specified configuration, and copies the image data.</summary>
            <returns>Returns the instance of the mask.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKMask.Format">
            <summary>Gets the format of the mask image.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMask.FreeImage">
            <summary>De-allocate the mask’s image data.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMask.FreeImage(System.IntPtr)">
            <param name="image">The pointer to a mask’s image data.</param>
            <summary>De-allocate the specified mask image data.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMask.GetAddr(System.Int32,System.Int32)">
            <param name="x">The x-cordinate, which must be contained by the mask's bounds.</param>
            <param name="y">The y-cordinate, which must be contained by the mask's bounds.</param>
            <summary>Returns the address of the specified pixel, computing the pixel-size at runtime based on the mask format.</summary>
            <returns>Returns the address of the specified pixel.</returns>
            <remarks>
                <para>This will be slightly slower than using one of the routines where the format is implied by the name (e.g. <see cref="M:SkiaSharp.SKMask.GetAddr8" /> or <see cref="M:SkiaSharp.SKMask.GetAddr32" />).</para>
                <para>This should not be called with <see cref="F:SkiaSharp.SKMaskFormat.BW" />, as it will give unspecified results.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMask.GetAddr1(System.Int32,System.Int32)">
            <param name="x">The x-cordinate, which must be contained by the mask's bounds.</param>
            <param name="y">The y-cordinate, which must be contained by the mask's bounds.</param>
            <summary>Returns the bit value of the specified specified pixel.</summary>
            <returns>Returns the bit value of the specified specified pixel.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMask.GetAddr16(System.Int32,System.Int32)">
            <param name="x">The x-cordinate, which must be contained by the mask's bounds.</param>
            <param name="y">The y-cordinate, which must be contained by the mask's bounds.</param>
            <summary>Returns the 16-bit value of the specified specified pixel.</summary>
            <returns>Returns the 16-bit value of the specified specified pixel.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMask.GetAddr32(System.Int32,System.Int32)">
            <param name="x">The x-cordinate, which must be contained by the mask's bounds.</param>
            <param name="y">The y-cordinate, which must be contained by the mask's bounds.</param>
            <summary>Returns the 32-bit value of the specified specified pixel.</summary>
            <returns>Returns the 32-bit value of the specified specified pixel.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMask.GetAddr8(System.Int32,System.Int32)">
            <param name="x">The x-cordinate, which must be contained by the mask's bounds.</param>
            <param name="y">The y-cordinate, which must be contained by the mask's bounds.</param>
            <summary>Returns the 8-bit value of the specified specified pixel.</summary>
            <returns>Returns the 8-bit value of the specified specified pixel.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKMask.Image">
            <summary>Get the pointer to the mask’s image data location.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKMask.IsEmpty">
            <summary>Gets a value indicating whether the mask’s bounds are empty.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKMask.RowBytes">
            <summary>Gets the number of bytes per row.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKMaskFilter">
            <summary>Mask filters perform transformations on an alpha-channel mask before drawing. A mask filter is set using the <see cref="P:SkiaSharp.SKPaint.MaskFilter" /> property on <see cref="T:SkiaSharp.SKPaint." /></summary>
            <remarks />
        </member>
        <member name="M:SkiaSharp.SKMaskFilter.ConvertRadiusToSigma(System.Single)">
            <param name="radius">The radius.</param>
            <summary>Converts from the (legacy) idea of specifying the blur "radius" to the standard notion of specifying its sigma.</summary>
            <returns>The sigma.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMaskFilter.ConvertSigmaToRadius(System.Single)">
            <param name="sigma">The sigma.</param>
            <summary>Converts from the standard notion of specifying the blur sigma to the (legacy) idea of specifying its “radius”.</summary>
            <returns>The radius.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMaskFilter.CreateBlur(SkiaSharp.SKBlurStyle,System.Single)">
            <param name="blurStyle">The style of blurring.</param>
            <param name="sigma">The standard deviation (greater than 0) of the Gaussian blur to apply.</param>
            <summary>Creates a mask filter that applies a blur.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKMaskFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMaskFilter.CreateBlur(SkiaSharp.SKBlurStyle,System.Single,SkiaSharp.SKBlurMaskFilterFlags)">
            <param name="blurStyle">The style of blurring.</param>
            <param name="sigma">The standard deviation (greater than 0) of the Gaussian blur to apply.</param>
            <param name="flags">The flags to apply when blurring.</param>
            <summary>Creates a mask filter that applies a blur.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKMaskFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMaskFilter.CreateBlur(SkiaSharp.SKBlurStyle,System.Single,SkiaSharp.SKRect)">
            <param name="blurStyle">The style of blurring.</param>
            <param name="sigma">The standard deviation (greater than 0) of the Gaussian blur to apply.</param>
            <param name="occluder">The rect for which no pixels need be drawn (because it will be overdrawn with some opaque object).</param>
            <summary>Creates a mask filter that applies a blur.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKMaskFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMaskFilter.CreateBlur(SkiaSharp.SKBlurStyle,System.Single,SkiaSharp.SKRect,SkiaSharp.SKBlurMaskFilterFlags)">
            <param name="blurStyle">The style of blurring.</param>
            <param name="sigma">The standard deviation (greater than 0) of the Gaussian blur to apply.</param>
            <param name="occluder">The rect for which no pixels need be drawn (because it will be overdrawn with some opaque object).</param>
            <param name="flags">The flags to apply when blurring.</param>
            <summary>Creates a mask filter that applies a blur.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKMaskFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMaskFilter.CreateClip(System.Byte,System.Byte)">
            <param name="min">The minimum alpha value.</param>
            <param name="max">The maximum alpha value.</param>
            <summary>Creates a mask filter that clips the alpha channel to the specified minimum and maximum alpha values.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKMaskFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMaskFilter.CreateGamma(System.Single)">
            <param name="gamma">The gamma.</param>
            <summary>Creates a mask filter that applies gamma.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKMaskFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMaskFilter.CreateTable(System.Byte[])">
            <param name="table">The lookup table with exactly 256 elements.</param>
            <summary>Creates a mask filter that applies a table lookup on each of the alpha values in the mask.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKMaskFilter" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMaskFilter.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKMaskFormat">
            <summary>Formats that indicate the memory format of the underlying image data of a <see cref="T:SkiaSharp.SKMask" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKMaskFormat.A8">
            <summary>8-bits per pixel mask (e.g. antialiasing).</summary>
        </member>
        <member name="F:SkiaSharp.SKMaskFormat.Argb32">
            <summary>Premultiplied color.</summary>
        </member>
        <member name="F:SkiaSharp.SKMaskFormat.BW">
            <summary>1-bit per pixel mask (e.g. monochrome).</summary>
        </member>
        <member name="F:SkiaSharp.SKMaskFormat.Lcd16">
            <summary>565 alpha for RGB.</summary>
        </member>
        <member name="F:SkiaSharp.SKMaskFormat.ThreeD">
            <summary>3 8-bit per pixel planes: alpha, mul, add.</summary>
        </member>
        <member name="T:SkiaSharp.SKMatrix">
            <summary>A 3x3 transformation matrix with perspective.</summary>
            <remarks>It extends the traditional 2D affine transformation matrix with three perspective components that allow simple 3D effects to be created with it. Those components must be manually set by using the <see cref="P:SkiaSharp.SKMatrix.Persp0" />, <see cref="P:SkiaSharp.SKMatrix.Persp1" />, <see cref="P:SkiaSharp.SKMatrix.Persp2" /> fields of the matrix.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.Concat(SkiaSharp.SKMatrix@,SkiaSharp.SKMatrix,SkiaSharp.SKMatrix)">
            <param name="target">The result matrix value.</param>
            <param name="first">The first matrix to concatenate.</param>
            <param name="second">The second matrix to concatenate.</param>
            <summary>Concatenates the specified matrices into the resulting target matrix.</summary>
            <remarks>Either source matrices can also be the target matrix.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.Concat(SkiaSharp.SKMatrix@,SkiaSharp.SKMatrix@,SkiaSharp.SKMatrix@)">
            <param name="target">The result matrix value.</param>
            <param name="first">The first matrix to concatenate.</param>
            <param name="second">The second matrix to concatenate.</param>
            <summary>Concatenates the specified matrices into the resulting target matrix.</summary>
            <remarks>Either source matrices can also be the target matrix.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.GetValues(System.Single[])">
            <param name="values">The array to populate.</param>
            <summary>Populates the specified array with the matrix values.</summary>
            <remarks>The result will be the same as <see cref="P:SkiaSharp.SKMatrix.Values" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MakeIdentity">
            <summary>Creates an identity matrix.</summary>
            <returns>Returns the new matrix.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MakeRotation(System.Single)">
            <param name="radians">The angle for the rotation, in radians.</param>
            <summary>Creates a matrix that represents a specific rotation in radians.</summary>
            <returns>Returns the new matrix.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MakeRotation(System.Single,System.Single,System.Single)">
            <param name="radians">The angle for the rotation, in radians.</param>
            <param name="pivotx">The x-coordiate for the rotation pivot.</param>
            <param name="pivoty">The y-coordiate for the rotation pivot.</param>
            <summary>Creates a matrix that represents a specific rotation in radians, around a pivot point.</summary>
            <returns>Returns the new matrix.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MakeRotationDegrees(System.Single)">
            <param name="degrees">The angle for the rotation, in degrees.</param>
            <summary>Creates a matrix that represents a specific rotation in degrees.</summary>
            <returns>Returns the new matrix.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MakeRotationDegrees(System.Single,System.Single,System.Single)">
            <param name="degrees">The angle for the rotation, in degrees.</param>
            <param name="pivotx">The x-coordiate for the rotation pivot.</param>
            <param name="pivoty">The y-coordiate for the rotation pivot.</param>
            <summary>Creates a matrix that represents a specific rotation in degrees, around a pivot point.</summary>
            <returns>Returns the new matrix.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MakeScale(System.Single,System.Single)">
            <param name="sx">The scaling in the x-direction.</param>
            <param name="sy">The scaling in the y-direction.</param>
            <summary>Creates a scaling matrix.</summary>
            <returns>Returns the new matrix.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MakeScale(System.Single,System.Single,System.Single,System.Single)">
            <param name="sx">The scaling in the x-direction.</param>
            <param name="sy">The scaling in the y-direction.</param>
            <param name="pivotX">The x-coordiate for the scaling pivot.</param>
            <param name="pivotY">The y-coordiate for the scaling pivot.</param>
            <summary>Creates a scaling matrix, around a pivot point.</summary>
            <returns>Returns the new matrix.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MakeSkew(System.Single,System.Single)">
            <param name="sx">The skew in the x-direction.</param>
            <param name="sy">The skew in the y-direction.</param>
            <summary>Creates a skewing matrix.</summary>
            <returns>Returns the new matrix.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MakeTranslation(System.Single,System.Single)">
            <param name="dx">The translation/offset in the x-direction.</param>
            <param name="dy">The translation/offset in the y-direction.</param>
            <summary>Creates a translation matrix.</summary>
            <returns>Returns the new matrix.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MapPoint(SkiaSharp.SKPoint)">
            <param name="point">The point to map.</param>
            <summary>Applies the matrix to a point.</summary>
            <returns>Returns the mapped point.</returns>
            <remarks>Mapping points uses all components of the matrix. Use <see cref="M:SkiaSharp.SKMatrix.MapVector" /> to ignore the translation.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MapPoint(System.Single,System.Single)">
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <summary>Applies the matrix to a point.</summary>
            <returns>Returns the mapped point.</returns>
            <remarks>Mapping points uses all components of the matrix. Use <see cref="M:SkiaSharp.SKMatrix.MapVector" /> to ignore the translation.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MapPoints(SkiaSharp.SKPoint[])">
            <param name="points">The array of points to be mapped.</param>
            <summary>Applies the matrix to an array of points.</summary>
            <returns>Returns the new array allocated with the mapped results.</returns>
            <remarks>Mapping points uses all components of the matrix. Use <see cref="M:SkiaSharp.SKMatrix.MapVectors" /> to ignore the translation.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MapPoints(SkiaSharp.SKPoint[],SkiaSharp.SKPoint[])">
            <param name="result">The array where the mapped results waill be stored (needs to have the same number of elements of the <paramref name="points" /> array).</param>
            <param name="points">The array of points to be mapped.</param>
            <summary>Applies the matrix to an array of points.</summary>
            <remarks>Mapping points uses all components of the matrix. Use <see cref="M:SkiaSharp.SKMatrix.MapVectors" /> to ignore the translation.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MapRadius(System.Single)">
            <param name="radius">The radius to map.</param>
            <summary>Calculates the mean radius of a circle after it has been mapped by this matrix.</summary>
            <returns>Returns the mean radius.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MapRect(SkiaSharp.SKRect)">
            <param name="source">The source rectangle to map.</param>
            <summary>Applies the matrix to a rectangle.</summary>
            <returns>Returns the mapped rectangle.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MapRect(SkiaSharp.SKMatrix@,SkiaSharp.SKRect@,SkiaSharp.SKRect@)">
            <param name="matrix">The transformation matrix.</param>
            <param name="dest">The mapped rectangle.</param>
            <param name="source">The source rectangle to map.</param>
            <summary>Applies the matrix to a rectangle.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MapVector(System.Single,System.Single)">
            <param name="x">The x-component of the vector.</param>
            <param name="y">The y-component of the vector.</param>
            <summary>Applies the matrix to a vector, ignoring translation.</summary>
            <returns>Returns the mapped point.</returns>
            <remarks>Mapping vectors ignores the translation component in the matrix. Use <see cref="M:SkiaSharp.SKMatrix.MapXY" /> to take the translation into consideration.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MapVectors(SkiaSharp.SKPoint[])">
            <param name="vectors">The array of vectors to map.</param>
            <summary>Applies the matrix to the array of vectors, ignoring translation, and returns the mapped results.</summary>
            <returns>Returns the new array allocated with the mapped results.</returns>
            <remarks>Mapping vectors ignores the translation component in the matrix. Use <see cref="M:SkiaSharp.SKMatrix.MapPoints" /> to take the translation into consideration.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.MapVectors(SkiaSharp.SKPoint[],SkiaSharp.SKPoint[])">
            <param name="result">The array where the mapped results waill be stored (needs to have the same number of elements of the <paramref name="vectors" /> array).</param>
            <param name="vectors">The array of vectors to map.</param>
            <summary>Apply the to the array of vectors and return the mapped results..</summary>
            <remarks>Mapping vectors ignores the translation component in the matrix. Use <see cref="M:SkiaSharp.SKMatrix.MapPoints" /> to take the translation into consideration.</remarks>
        </member>
        <member name="P:SkiaSharp.SKMatrix.Persp0">
            <summary>Gets or sets the x-perspective.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKMatrix.Persp1">
            <summary>Gets or sets the y-perspective.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKMatrix.Persp2">
            <summary>Gets or sets the z-perspective.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.PostConcat(SkiaSharp.SKMatrix@,SkiaSharp.SKMatrix)">
            <param name="target">The target matrix.</param>
            <param name="matrix">The matrix to be post-concatenated.</param>
            <summary>Post-concatenates the matrix to the target matrix.</summary>
            <remarks>This represents: result = matrix * target</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.PostConcat(SkiaSharp.SKMatrix@,SkiaSharp.SKMatrix@)">
            <param name="target">The target matrix.</param>
            <param name="matrix">The matrix to be post-concatenated.</param>
            <summary>Post-concatenates the matrix to the target matrix.</summary>
            <remarks>This represents: result = matrix * target</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.PreConcat(SkiaSharp.SKMatrix@,SkiaSharp.SKMatrix)">
            <param name="target">The target matrix.</param>
            <param name="matrix">The matrix to be post-concatenated.</param>
            <summary>Pre-concatenates the matrix to the target matrix.</summary>
            <remarks>This represents: result = target * matrix</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.PreConcat(SkiaSharp.SKMatrix@,SkiaSharp.SKMatrix@)">
            <param name="target">The target matrix.</param>
            <param name="matrix">The matrix to be post-concatenated.</param>
            <summary>Pre-concatenates the matrix to the target matrix.</summary>
            <remarks>This represents: result = target * matrix</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.Rotate(SkiaSharp.SKMatrix@,System.Single)">
            <param name="matrix">The target matrix.</param>
            <param name="radians">The angle for the rotation, in radians.</param>
            <summary>Rotates the specified matrix by the specified radians.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.Rotate(SkiaSharp.SKMatrix@,System.Single,System.Single,System.Single)">
            <param name="matrix">The target matrix.</param>
            <param name="radians">The angle for the rotation, in radians.</param>
            <param name="pivotx">The x-coordiate for the rotation pivot.</param>
            <param name="pivoty">The y-coordiate for the rotation pivot.</param>
            <summary>Rotates the specified matrix by the specified radians.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.RotateDegrees(SkiaSharp.SKMatrix@,System.Single)">
            <param name="matrix">The target matrix.</param>
            <param name="degrees">The angle for the rotation, in degrees.</param>
            <summary>Rotates the specified matrix by the specified degrees.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.RotateDegrees(SkiaSharp.SKMatrix@,System.Single,System.Single,System.Single)">
            <param name="matrix">The target matrix.</param>
            <param name="degrees">The angle for the rotation, in degrees.</param>
            <param name="pivotx">The x-coordiate for the rotation pivot.</param>
            <param name="pivoty">The y-coordiate for the rotation pivot.</param>
            <summary>Rotates the specified matrix by the specified degrees.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKMatrix.ScaleX">
            <summary>Gets or sets the scaling in the x-direction.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKMatrix.ScaleY">
            <summary>Gets or sets the scaling in the y-direction.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.SetScaleTranslate(System.Single,System.Single,System.Single,System.Single)">
            <param name="sx">The scaling in the x-direction.</param>
            <param name="sy">The scaling in the y-direction.</param>
            <param name="tx">The translation in the x-direction.</param>
            <param name="ty">The translation in the y-direction.</param>
            <summary>Initializes the matrix to be scale + post-translate.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKMatrix.SkewX">
            <summary>Gets or sets the skew in the x-direction.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKMatrix.SkewY">
            <summary>Gets or sets the skew in the y-direction.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKMatrix.TransX">
            <summary>Get or sets the translation in the x-direction.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKMatrix.TransY">
            <summary>Get or sets the translation in the y-direction.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix.TryInvert(SkiaSharp.SKMatrix@)">
            <param name="inverse">The destination value to store the inverted matrix if the matrix can be inverted.</param>
            <summary>Attempts to invert the matrix, if possible the inverse matrix contains the result.</summary>
            <returns>True if the matrix can be inverted, and the inverse parameter is initialized with the inverted matrix, false otherwise.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKMatrix.Values">
            <summary>Gets or sets the matrix as a flat array: [ScaleX, SkewX, TransX, SkewY, ScaleY, TransY, Persp0, Persp1, Persp2].</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKMatrix44">
            <summary>A 3D, 4x4 matrix.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKMatrix44">
            <summary>Creates a new, uninitialized instance of <see cref="T:SkiaSharp.SKMatrix44" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKMatrix44(SkiaSharp.SKMatrix)">
            <param name="src">The <see cref="T:SkiaSharp.SKMatrix" /> instance.</param>
            <summary>Creates a new instance of <see cref="T:SkiaSharp.SKMatrix44" /> using the values from a <see cref="T:SkiaSharp.SKMatrix" /> instance.</summary>
            <remarks>When converting from <see cref="T:SkiaSharp.SKMatrix" /> to <see cref="T:SkiaSharp.SKMatrix44" />, the third row and column remain as identity.</remarks>
        </member>
        <member name="C:SkiaSharp.SKMatrix44(SkiaSharp.SKMatrix44)">
            <param name="src">The matrix to copy.</param>
            <summary>Creates a new instance of <see cref="T:SkiaSharp.SKMatrix44" /> using the values from another instance.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKMatrix44(SkiaSharp.SKMatrix44,SkiaSharp.SKMatrix44)">
            <param name="a">The first matrix.</param>
            <param name="b">The second matrix.</param>
            <summary>Creates a new instance of <see cref="T:SkiaSharp.SKMatrix44" /> using the concatenated values from two other instances.</summary>
            <remarks>This is equivalent to creating an uninitialized matrix, and then passing the two matrices to <see cref="M:SkiaSharp.SKMatrix44.SetConcat" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.CreateIdentity">
            <summary>Creates a new identity matrix.</summary>
            <returns>Returns the new identity matrix.</returns>
            <remarks>This is equivalent to creating an uninitialized matrix, and invoking <see cref="M:SkiaSharp.SKMatrix44.SetIdentity" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.CreateRotation(System.Single,System.Single,System.Single,System.Single)">
            <param name="x">The x-axis to rotate around.</param>
            <param name="y">The y-axis to rotate around.</param>
            <param name="z">The z-axis to rotate around.</param>
            <param name="radians">The amount, in radians, to rotate by.</param>
            <summary>Creates a new rotation matrix.</summary>
            <returns>Returns the new rotation matrix.</returns>
            <remarks>This is equivalent to creating an uninitialized matrix and passing the values to <see cref="M:SkiaSharp.SKMatrix44.SetRotationAbout" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.CreateRotationDegrees(System.Single,System.Single,System.Single,System.Single)">
            <param name="x">The x-axis to rotate around.</param>
            <param name="y">The y-axis to rotate around.</param>
            <param name="z">The z-axis to rotate around.</param>
            <param name="degrees">The amount, in degrees, to rotate by.</param>
            <summary>Creates a new rotation matrix.</summary>
            <returns>Returns the new rotation matrix.</returns>
            <remarks>This is equivalent to creating an uninitialized matrix and passing the values to <see cref="M:SkiaSharp.SKMatrix44.SetRotationAboutDegrees" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.CreateScale(System.Single,System.Single,System.Single)">
            <param name="x">The amount, along the x-axis, to scale.</param>
            <param name="y">The amount, along the y-axis, to scale.</param>
            <param name="z">The amount, along the z-axis, to scale.</param>
            <summary>Creates a new scale matrix.</summary>
            <returns>Returns the new scale matrix.</returns>
            <remarks>This is equivalent to creating an uninitialized matrix and passing the values to <see cref="M:SkiaSharp.SKMatrix44.SetScale" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.CreateTranslate(System.Single,System.Single,System.Single)">
            <param name="x">The amount, along the x-axis, to translate.</param>
            <param name="y">The amount, along the y-axis, to translate.</param>
            <param name="z">The amount, along the z-axis, to translate.</param>
            <summary>Creates a new translation matrix.</summary>
            <returns>Returns the new translation matrix.</returns>
            <remarks>This is equivalent to creating an uninitialized matrix and passing the values to <see cref="M:SkiaSharp.SKMatrix44.SetTranslate" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.Determinant">
            <summary>Calculates the determinant of the matrix.</summary>
            <returns>Returns the determinant.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.Equal(SkiaSharp.SKMatrix44,SkiaSharp.SKMatrix44)">
            <param name="left">The first matrix.</param>
            <param name="right">The second matrix.</param>
            <summary>Determines if the two matrices are equal.</summary>
            <returns>Returns <see langword="true" /> if the two matrices are equal, otherwise <see langword="false" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.FromColumnMajor(System.Single[])">
            <param name="src">The column-major array containing the values.</param>
            <summary>Creates a new matrix using the values from the column-major array.</summary>
            <returns>Returns the new matrix.</returns>
            <remarks>The number of items in the source array should be exactly 16 items.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.FromRowMajor(System.Single[])">
            <param name="src">The row-major array containing the values.</param>
            <summary>Creates a new matrix using the values from the row-major array.</summary>
            <returns>Returns the new matrix.</returns>
            <remarks>The number of items in the source array should be exactly 16 items.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.Invert">
            <summary>Creates an inverted matrix from the current matrix.</summary>
            <returns>Returns the inverted matrix if it is invertible, otherwise <see langword="null" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.Invert(SkiaSharp.SKMatrix44)">
            <param name="inverse">The matrix to recieve the inverted matrix.</param>
            <summary>Inverts the current matrix and stores the result in the provided matrix.</summary>
            <returns>Returns <see langword="true" /> if the matrix is invertible, otherwise <see langword="false" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKMatrix44.Item(System.Int32,System.Int32)">
            <param name="row">The row to retrieve the value from.</param>
            <param name="column">The column to retrieve the value from.</param>
            <summary>Gets or sets a value in the matrix.</summary>
            <value>Returns the value found at the specified coordinates.</value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.MapPoint(SkiaSharp.SKPoint)">
            <param name="src">The point to map.</param>
            <summary>Applies the matrix to a point.</summary>
            <returns>Returns a new point with the matrix applied.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.MapPoints(SkiaSharp.SKPoint[])">
            <param name="src">The points to map.</param>
            <summary>Applies the matrix to an array of points.</summary>
            <returns>Returns a new array of points with the matrix applied.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.MapScalars(System.Single[])">
            <param name="srcVector4">The vector to map. The vector must have exactly 4 items.</param>
            <summary>Applies the matrix to a vector.</summary>
            <returns>Returns a new vector with the matrix applied.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.MapScalars(System.Single[],System.Single[])">
            <param name="srcVector4">The vector to map. The vector must have exactly 4 items.</param>
            <param name="dstVector4">The vector that will recieve the mapped vector.</param>
            <summary>Applies the matrix to a vector.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.MapScalars(System.Single,System.Single,System.Single,System.Single)">
            <param name="x">The x-value of the vector.</param>
            <param name="y">The y-value of the vector.</param>
            <param name="z">The z-value of the vector.</param>
            <param name="w">The w-value of the vector.</param>
            <summary>Applies the matrix to a vector.</summary>
            <returns>Returns a new vector with the matrix applied.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.MapVector2(System.Single[])">
            <param name="src2">The array of [x, y] pairs. The array must have an entry count of a multiple of 2.</param>
            <summary>Applies the matrix to a series of [x, y] pairs, returning the [x', y', z', w'] result.</summary>
            <returns>Returns the resulting [x', y', z', w'] sets.</returns>
            <remarks>
                <para>The source array must have an entry count of a multiple of 2 (2, 4, 6, 8, …). The resulting array will have an entry count of a multiple of 4 (4, 8, 12, 16, …).</para>
                <para>The source array has an implied z-value of 0 and a w-value of 1, equivalent to [x, y, 0, 1].</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.MapVector2(System.Single[],System.Single[])">
            <param name="src2">The array of [x, y] pairs. The array must have an entry count of a multiple of 2.</param>
            <param name="dst4">Returns the resulting [x', y', z', w'] sets. The array must have an entry count fof a multiple of 4, and the same number of vectors as the source has pairs.</param>
            <summary>Applies the matrix to a series of [x, y] pairs, returning the [x', y', z', w'] result.</summary>
            <remarks>The source array has an implied z-value of 0 and a w-value of 1, equivalent to [x, y, 0, 1].</remarks>
        </member>
        <member name="P:SkiaSharp.SKMatrix44.Matrix">
            <summary>Gets the <see cref="T:SkiaSharp.SKMatrix" /> equivalent of the current matrix.</summary>
            <value>
                <para />
            </value>
            <remarks>When converting from <see cref="T:SkiaSharp.SKMatrix44" /> to <see cref="T:SkiaSharp.SKMatrix" />, the third row and column is dropped.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.PostConcat(SkiaSharp.SKMatrix44)">
            <param name="m">The matrix to concatenate.</param>
            <summary>Post-concatenates the current matrix with the specified matrix.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.PostScale(System.Single,System.Single,System.Single)">
            <param name="sx">The amount, along the x-axis, to scale.</param>
            <param name="sy">The amount, along the y-axis, to scale.</param>
            <param name="sz">The amount, along the z-axis, to scale.</param>
            <summary>Post-scales the current matrix with the specified scale.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.PostTranslate(System.Single,System.Single,System.Single)">
            <param name="dx">The amount, along the x-axis, to translate.</param>
            <param name="dy">The amount, along the y-axis, to translate.</param>
            <param name="dz">The amount, along the z-axis, to translate.</param>
            <summary>Post-translates the current matrix with the specified stranslationale.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.PreConcat(SkiaSharp.SKMatrix44)">
            <param name="m">The matrix to concatenate.</param>
            <summary>Pre-concatenates the matrix with the specified matrix.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.PreScale(System.Single,System.Single,System.Single)">
            <param name="sx">The amount, along the x-axis, to scale.</param>
            <param name="sy">The amount, along the y-axis, to scale.</param>
            <param name="sz">The amount, along the z-axis, to scale.</param>
            <summary>Pre-scales the current matrix with the specified scale.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.Preserves2DAxisAlignment(System.Single)">
            <param name="epsilon">The amount of error to allow for when determining axis-alignment.</param>
            <summary>Determines if transforming an axis-aligned square in 2D by this matrix will produce another 2D, axis-aligned square.</summary>
            <returns>Returns <see langword="true" /> if the matrix preserves 2D axis alignment, otherwise <see langword="false" />.</returns>
            <remarks>If the result is <see langword="true" />, it typically means the matrix is a scale with perhaps a 90-degree rotation. A 3D rotation through 90 degrees into a perpendicular plane collapses a square to a line, but is still considered to be axis-aligned.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.PreTranslate(System.Single,System.Single,System.Single)">
            <param name="dx">The amount, along the x-axis, to translate.</param>
            <param name="dy">The amount, along the y-axis, to translate.</param>
            <param name="dz">The amount, along the z-axis, to translate.</param>
            <summary>Pre-translates the current matrix with the specified translation.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.SetColumnMajor(System.Single[])">
            <param name="src">The array containing the new, column-major values.</param>
            <summary>Resets the current matrix with the specified column-major values.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.SetConcat(SkiaSharp.SKMatrix44,SkiaSharp.SKMatrix44)">
            <param name="a">The first matrix.</param>
            <param name="b">The second matrix.</param>
            <summary>Reset the current matrix with the values from the concatenation of the specified matrices.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.SetIdentity">
            <summary>Resets the current matrix to identity.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.SetRotationAbout(System.Single,System.Single,System.Single,System.Single)">
            <param name="x">The x-axis to rotate around.</param>
            <param name="y">The y-axis to rotate around.</param>
            <param name="z">The z-axis to rotate around.</param>
            <param name="radians">The amount, in radians, to rotate by.</param>
            <summary>Resets the current matrix to a rotation matrix.</summary>
            <remarks>If the specified vector is not unit-length, it will be automatically resized.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.SetRotationAboutDegrees(System.Single,System.Single,System.Single,System.Single)">
            <param name="x">The x-axis to rotate around.</param>
            <param name="y">The y-axis to rotate around.</param>
            <param name="z">The z-axis to rotate around.</param>
            <param name="degrees">The amount, in degrees, to rotate by.</param>
            <summary>Resets the current matrix to a rotation matrix.</summary>
            <remarks>If the specified vector is not unit-length, it will be automatically resized.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.SetRotationAboutUnit(System.Single,System.Single,System.Single,System.Single)">
            <param name="x">The x-axis to rotate around.</param>
            <param name="y">The y-axis to rotate around.</param>
            <param name="z">The z-axis to rotate around.</param>
            <param name="radians">The amount, in radians, to rotate by.</param>
            <summary>Resets the current matrix to a rotation matrix, without checking to see if the specified vector is unit-length.</summary>
            <remarks>This method assumes the specified vector is unit-length.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.SetRowMajor(System.Single[])">
            <param name="src">The array containing the new, row-major values.</param>
            <summary>Resets the current matrix with the specified row-major values.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.SetScale(System.Single,System.Single,System.Single)">
            <param name="sx">The amount, along the x-axis, to scale.</param>
            <param name="sy">The amount, along the y-axis, to scale.</param>
            <param name="sz">The amount, along the z-axis, to scale.</param>
            <summary>Resets the current matrix to a scale matrix.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.SetTranslate(System.Single,System.Single,System.Single)">
            <param name="dx">The amount, along the x-axis, to translate.</param>
            <param name="dy">The amount, along the y-axis, to translate.</param>
            <param name="dz">The amount, along the y-axis, to translate.</param>
            <summary>Resets the current matrix to a translation matrix.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.ToColumnMajor">
            <summary>Converts the current matrix to a column-major array.</summary>
            <returns>Returns the new column-major array.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.ToColumnMajor(System.Single[])">
            <param name="dst">The array to recieve the matrix values. The array must have an item count of exactly 16 items.</param>
            <summary>Converts the current matrix to a column-major array.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.ToRowMajor">
            <summary>Converts the current matrix to a row-major array.</summary>
            <returns>Returns the new row-major array.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.ToRowMajor(System.Single[])">
            <param name="dst">The array to recieve the matrix values. The array must have an item count of exactly 16 items.</param>
            <summary>Converts the current matrix to a row-major array.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMatrix44.Transpose">
            <summary>Transposes the current matrix.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKMatrix44.Type">
            <summary>Gets a bit field describing the transformations the matrix may perform.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKMatrix44TypeMask">
            <summary>Various flags describing the transformations of a <see cref="T:SkiaSharp.SKMatrix44" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKMatrix44TypeMask.Affine">
            <summary>The matrix skews or rotates.</summary>
        </member>
        <member name="F:SkiaSharp.SKMatrix44TypeMask.Identity">
            <summary>The matrix is an identity matrix.</summary>
        </member>
        <member name="F:SkiaSharp.SKMatrix44TypeMask.Perspective">
            <summary>The matrix is in perspective.</summary>
        </member>
        <member name="F:SkiaSharp.SKMatrix44TypeMask.Scale">
            <summary>The matrix has any scale other than 1.</summary>
        </member>
        <member name="F:SkiaSharp.SKMatrix44TypeMask.Translate">
            <summary>The matrix has translation.</summary>
        </member>
        <member name="T:SkiaSharp.SKMatrixConvolutionTileMode">
            <summary>Matrix convolution tile modes for use with <see cref="M:SkiaSharp.SKImageFilter.CreateMatrixConvolution" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKMatrixConvolutionTileMode.Clamp">
            <summary>Clamp to the image's edge pixels.</summary>
        </member>
        <member name="F:SkiaSharp.SKMatrixConvolutionTileMode.ClampToBlack">
            <summary>Fill with transparent black.</summary>
        </member>
        <member name="F:SkiaSharp.SKMatrixConvolutionTileMode.Repeat">
            <summary>Wrap around to the image's opposite edge.</summary>
        </member>
        <member name="T:SkiaSharp.SKMemoryStream">
            <summary>A memory-based stream.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKMemoryStream">
            <summary>Creates a new instance of <see cref="T:SkiaSharp.SKMemoryStream" /> with an empty buffer.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKMemoryStream(SkiaSharp.SKData)">
            <param name="data">The data to initialize the stream with.</param>
            <summary>Creates a new instance of <see cref="T:SkiaSharp.SKMemoryStream" /> with the buffer being the provided data.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKMemoryStream(System.Byte[])">
            <param name="data">The data to initialize the stream with.</param>
            <summary>Creates a new instance of <see cref="T:SkiaSharp.SKMemoryStream" /> with a copy of the provided data.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKMemoryStream(System.UInt64)">
            <param name="length">The size of the stream buffer.</param>
            <summary>Creates a new instance of <see cref="T:SkiaSharp.SKMemoryStream" /> with a buffer size of the specified size.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKMemoryStream.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKMemoryStream.SetMemory(System.Byte[])">
            <param name="data">The data to reset the stream to.</param>
            <summary>Resets the stream with a copy of the provided data.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKNativeObject">
            <summary>Represents a native object.</summary>
            <remarks>This object just wraps a native handle with the managed dispose pattern. For a tracked object, use <see cref="T:SkiaSharp.SKObject" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKNativeObject.Dispose">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKNativeObject.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKNativeObject.Finalize">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKNativeObject.Handle">
            <summary>Gets or sets the handle to the underlying native object.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKObject">
            <summary>Represents a tracked native object.</summary>
            <remarks>This object wraps a native handle and keeps track of it’s lifetime for the garbage collector. For a simple object, use <see cref="T:SkiaSharp.SKNativeObject" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKObject.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKObject.Handle">
            <summary>Gets or sets the handle to the underlying native object.</summary>
            <value>
                <para />
            </value>
            <remarks>Setting this value will register this object with the lifetime tracker.</remarks>
        </member>
        <member name="P:SkiaSharp.SKObject.OwnsHandle">
            <summary>Gets a value indicating whether this object should destroy the underlying native object.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKPaint">
            <summary>Holds the style and color information about how to draw geometries, text and bitmaps.</summary>
            <remarks>
                <para>Anytime you draw something in SkiaSharp, and want to specify what color it is, or how it blends with the background, or what style or font to draw it in, you specify those attributes in a paint.</para>
                <para>Unlike <see cref="T:SkiaSharp.SKCanvas" />, an SKPaint object do not maintain an internal stack of state.   That is, there is no save/restore on a paint. However, SKPaint objects are relatively light-weight, so the client may create and maintain any number of paint objects, each set up for a particular use. </para>
                <para>Factoring all of these color and stylistic attributes out of the canvas state, and into (multiple) paint objects, allows the save and restore operations on the <see cref="T:SkiaSharp.SKCanvas" /> to be that much more efficient, as all they have to do is maintain the stack of matrix and clip settings.</para>
                <para />
                <para>The example above produces the following:</para>
                <para>
                    <img href="SKPaintText.png" />
                </para>
                <para>This shows three different paints, each set up to draw in a different style. Now the caller can intermix these paints freely, either using them as is, or modifying them as the drawing proceeds.</para>
                <para>Beyond simple attributes such as color, strokes, and text values, paints support effects. These are subclasses of different aspects of the drawing pipeline, that when referenced by a paint (each of them is reference-counted), are called to override some part of the drawing pipeline.</para>
                <para>For example, to draw using a gradient instead of a single color, assign a SkShader to the paint.</para>
                <para />
                <para>
                    <img href="gradient.png" />
                </para>
                <para>Now, anything drawn with that paint will be drawn with the gradient specified in the call to CreateLinearGradient.</para>
                <para>There are five types of effects that can be assigned to an <see cref="T:SkiaSharp.SKPaint" /> object:</para>
                <para />
                <list type="bullet">
                    <item>
                        <term>BlendMode - Blend modes and Duff-Porter transfer modes.</term>
                    </item>
                    <item>
                        <term>ColorFilter - Modifies the source colors before applying the BlendMode.</term>
                    </item>
                    <item>
                        <term>MaskFilter - Modification of the alpha mask before it is colorized and drawn (for example, blur)</term>
                    </item>
                    <item>
                        <term>PathEffect - Modification of the geometry (path) before the alpha mask is generated (for example, dashing)</term>
                    </item>
                    <item>
                        <term>Shader - Gradients and bitmap patterns.</term>
                    </item>
                </list>
                <para />
                <para />
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKPaint">
            <summary>Creates a new paint with the default settings.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.BlendMode">
            <summary>Gets or sets the blend mode.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.BreakText(System.Byte[],System.Single)">
            <param name="text">The text to be measured.</param>
            <param name="maxWidth">The maximum width. Only the subset of text whose accumulated widths are &lt;= maxWidth are measured.</param>
            <summary>Measure the text, stopping early if the measured width exceeds <paramref name="maxWidth" />.</summary>
            <returns>Returns the number of bytes of text that were measured. </returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.BreakText(System.String,System.Single)">
            <param name="text">The text to be measured.</param>
            <param name="maxWidth">The maximum width. Only the subset of text whose accumulated widths are &lt;= maxWidth are measured.</param>
            <summary>Measure the text, stopping early if the measured width exceeds <paramref name="maxWidth" />.</summary>
            <returns>Returns the number of characters of text that were measured. </returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.BreakText(System.Byte[],System.Single,System.Single@)">
            <param name="text">The text to be measured.</param>
            <param name="maxWidth">The maximum width. Only the subset of text whose accumulated widths are &lt;= <paramref name="maxWidth" /> are measured.</param>
            <param name="measuredWidth">The actual width of the measured text.</param>
            <summary>Measure the text, stopping early if the measured width exceeds <paramref name="maxWidth" />.</summary>
            <returns>Returns the number of bytes of text that were measured. </returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.BreakText(System.IntPtr,System.IntPtr,System.Single)">
            <param name="buffer">The pointer to a region holding text encoded using the encoding specified in <see cref="P:SkiaSharp.SKPaint.TextEncoding" /> format.</param>
            <param name="length">The number of bytes to read from the <paramref name="buffer." /></param>
            <param name="maxWidth">The maximum width. Only the subset of text whose accumulated widths are &lt;= <paramref name="maxWidth" /> are measured.</param>
            <summary>Measure the text buffer, stopping early if the measured width exceeds <paramref name="maxWidth" />.</summary>
            <returns>Returns the number of bytes of text that were measured. </returns>
            <remarks>The <paramref name="buffer" /> parameter is a pointer to a region in memory that contains text encoded in the <see cref="P:SkiaSharp.SKPaint.TextEncoding" /> format. This only consumes up to <paramref name="length" /> bytes from the buffer.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.BreakText(System.String,System.Single,System.Single@)">
            <param name="text">The text to be measured.</param>
            <param name="maxWidth">The maximum width. Only the subset of text whose accumulated widths are &lt;= <paramref name="maxWidth" /> are measured.</param>
            <param name="measuredWidth">The actual width of the measured text.</param>
            <summary>Measure the text, stopping early if the measured width exceeds <paramref name="maxWidth" />.</summary>
            <returns>Returns the number of characters of text that were measured. </returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.BreakText(System.IntPtr,System.IntPtr,System.Single,System.Single@)">
            <param name="buffer">The pointer to a region holding text encoded using the encoding specified in <see cref="P:SkiaSharp.SKPaint.TextEncoding" /> format.</param>
            <param name="length">The number of bytes to read from the <paramref name="buffer." /></param>
            <param name="maxWidth">The maximum width. Only the subset of text whose accumulated widths are &lt;= <paramref name="maxWidth" /> are measured.</param>
            <param name="measuredWidth">The actual width of the measured text.</param>
            <summary>Measure the text buffer, stopping early if the measured width exceeds <paramref name="maxWidth" />.</summary>
            <returns>Returns the number of bytes of text that were measured. </returns>
            <remarks>The <paramref name="buffer" /> parameter is a pointer to a region in memory that contains text encoded in the <see cref="P:SkiaSharp.SKPaint.TextEncoding" /> format. This only consumes up to <paramref name="length" /> bytes from the buffer.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.BreakText(System.String,System.Single,System.Single@,System.String@)">
            <param name="text">The text to be measured.</param>
            <param name="maxWidth">The maximum width. Only the subset of text whose accumulated widths are &lt;= <paramref name="maxWidth" /> are measured.</param>
            <param name="measuredWidth">The actual width of the measured text.</param>
            <param name="measuredText">The text that was measured.</param>
            <summary>Measure the text, stopping early if the measured width exceeds <paramref name="maxWidth" />.</summary>
            <returns>Returns the number of characters of text that were measured. </returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.Clone">
            <summary>Creates a copy of the current paint.</summary>
            <returns>Returns the copy.</returns>
            <remarks>The copy is a shallow copy, all references will still point to the same objects.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.Color">
            <summary>Gets or sets the paint’s foreground color.</summary>
            <value>
                <para />
            </value>
            <remarks>The color is a 32-bit value containing ARGB. This 32-bit value is not premultiplied, meaning that its alpha can be any value, regardless of the values of R, G and B.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.ColorFilter">
            <summary>Gets or sets the paint’s color filter.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.DeviceKerningEnabled">
            <summary>Gets or sets a value indicating whether device kerning is enabled.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.FakeBoldText">
            <summary>Gets or sets a value indicating whether fake bold text is enabled.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.FilterQuality">
            <summary>Gets or sets the filter quality of the current paint.</summary>
            <value>
                <para />
            </value>
            <remarks>This affects the quality (and performance) of drawing scaled images.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.FontMetrics">
            <summary>Gets the font metrics for the current typeface.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.FontSpacing">
            <summary>Gets the recommend line spacing.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.GetFillPath(SkiaSharp.SKPath,SkiaSharp.SKPath,System.Single)">
            <param name="src">The input path.</param>
            <param name="dst">The output path.</param>
            <param name="resScale">If &gt; 1, increase precision, else if (0 &lt; res &lt; 1) reduce precision in favor of speed/size.</param>
            <summary>Applies any and all effects to a source path, returning the result in the destination.</summary>
            <returns>Returns true if the path should be filled, or false if it should be drawn with a hairline.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.GetFillPath(SkiaSharp.SKPath,SkiaSharp.SKPath,SkiaSharp.SKRect,System.Single)">
            <param name="src">The input path.</param>
            <param name="dst">The output path.</param>
            <param name="cullRect">The destination path may be culled to this rectangle.</param>
            <param name="resScale">If &gt; 1, increase precision, else if (0 &lt; res &lt; 1) reduce precision in favor of speed/size.</param>
            <summary>Applies any and all effects to a source path, returning the result in the destination.</summary>
            <returns>Returns true if the path should be filled, or false if it should be drawn with a hairline.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.GetFontMetrics(SkiaSharp.SKFontMetrics@,System.Single)">
            <param name="metrics">The font metrics for the current typeface.</param>
            <param name="scale">If not 0, return width as if the canvas were scaled by this value.</param>
            <summary>Returns the font metrics and line spacing for the current typeface.</summary>
            <returns>Returns the recommended spacing between lines.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.GetTextPath(System.Byte[],SkiaSharp.SKPoint[])">
            <param name="text">The text to generate an outline for.</param>
            <param name="points">The position to use for each glyph in the text.</param>
            <summary>Returns the path (outline) for the specified text.</summary>
            <returns>Returns the <see cref="T:SkiaSharp.SKPath" /> containing the outline of the text.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.GetTextPath(System.String,SkiaSharp.SKPoint[])">
            <param name="text">The text to generate an outline for.</param>
            <param name="points">The position to use for each glyph in the text.</param>
            <summary>Returns the path (outline) for the specified text.</summary>
            <returns>Returns the <see cref="T:SkiaSharp.SKPath" /> containing the outline of the text.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.GetTextPath(System.Byte[],System.Single,System.Single)">
            <param name="text">The text to generate an outline for.</param>
            <param name="x">The x-coordinate of the first glyph in the text.</param>
            <param name="y">The y-coordinate of the first glyph in the text.</param>
            <summary>Returns the path (outline) for the specified text.</summary>
            <returns>Returns the <see cref="T:SkiaSharp.SKPath" /> containing the outline of the text.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.GetTextPath(System.IntPtr,System.IntPtr,SkiaSharp.SKPoint[])">
            <param name="buffer">The pointer to a region holding text encoded using the encoding specified in <see cref="P:SkiaSharp.SKPaint.TextEncoding" /> format.</param>
            <param name="length">The number of bytes to read from the <paramref name="buffer." /></param>
            <param name="points">The position to use for each glyph in the text.</param>
            <summary>Returns the path (outline) for the specified text.</summary>
            <returns>Returns the <see cref="T:SkiaSharp.SKPath" /> containing the outline of the text.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.GetTextPath(System.String,System.Single,System.Single)">
            <param name="text">The text to generate an outline for.</param>
            <param name="x">The x-coordinate of the first glyph in the text.</param>
            <param name="y">The y-coordinate of the first glyph in the text.</param>
            <summary>Returns the path (outline) for the specified text.</summary>
            <returns>Returns the <see cref="T:SkiaSharp.SKPath" /> containing the outline of the text.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.GetTextPath(System.IntPtr,System.IntPtr,System.Single,System.Single)">
            <param name="buffer">The pointer to a region holding text encoded using the encoding specified in <see cref="P:SkiaSharp.SKPaint.TextEncoding" /> format.</param>
            <param name="length">The number of bytes to read from the <paramref name="buffer." /></param>
            <param name="x">The x-coordinate of the first glyph in the text.</param>
            <param name="y">The y-coordinate of the first glyph in the text.</param>
            <summary>Returns the path (outline) for the specified text.</summary>
            <returns>Returns the <see cref="T:SkiaSharp.SKPath" /> containing the outline of the text.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.HintingLevel">
            <summary>Gets or sets the level of hinting to be performed.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.ImageFilter">
            <summary>Gets or sets the image filter.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.IsAntialias">
            <summary>Gets or sets a value indicating whether anti-aliasing is enabled.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.IsAutohinted">
            <summary>Gets or sets a value indicating whether auto-hinting is enabled.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.IsDither">
            <summary>Gets or sets a value indicating whether dithering is enabled.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.IsEmbeddedBitmapText">
            <summary>Gets or sets a value indicating whether text is an embedded bitmap.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.IsLinearText">
            <summary>Gets or sets a value indicating whether text is linear.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.IsStroke">
            <summary>Gets or sets a value indicating whether to paint a stroke or the fill.</summary>
            <value>
                <para />
            </value>
            <remarks>This is a shortcut way to set <see cref="P:SkiaSharp.SKPaint.Style" /> to either <see cref="F:SkiaSharp.SKPaintStyle.Stroke" /> or <see cref="F:SkiaSharp.SKPaintStyle.Fill" />.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.IsVerticalText">
            <summary>Gets or sets a value indicating whether the text is vertical or horizontal is enabled.</summary>
            <value>
                <para />
            </value>
            <remarks>If this property is set true, then advances are treated as Y values rather than X values, and <see cref="M:SkiaSharp.SKCanvas.DrawText" /> will place its glyphs vertically rather than horizontally.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.LcdRenderText">
            <summary>Gets or sets a value indicating whether LCD text rendering is enabled.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <see cref="P:SkiaSharp.SKPaint.IsAntialias" /> must also be enabled for LCD rendering to be enabled.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.MaskFilter">
            <summary>Gets or sets the mask filter to use when painting.</summary>
            <value>
                <para />
            </value>
            <remarks>Mask filters control the transformations on the alpha channel before primitives are drawn. Examples are blur or emboss.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.MeasureText(System.Byte[])">
            <param name="text">The text to be measured.</param>
            <summary>Measures the specified text.</summary>
            <returns>Returns the width of the text.</returns>
            <remarks>This will return the vertical measure if this is vertical text, in which case the returned value should be treated has a height instead of a width.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.MeasureText(System.String)">
            <param name="text">The text to be measured.</param>
            <summary>Measures the specified text.</summary>
            <returns>Returns the width of the text.</returns>
            <remarks>This will return the vertical measure if this is vertical text, in which case the returned value should be treated has a height instead of a width.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.MeasureText(System.Byte[],SkiaSharp.SKRect@)">
            <param name="text">The text to be measured.</param>
            <param name="bounds">The bounds of the text relative to (0, 0)</param>
            <summary>Measures the specified text.</summary>
            <returns>Returns the width of the text.</returns>
            <remarks>This will return the vertical measure if this is vertical text, in which case the returned value should be treated has a height instead of a width.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.MeasureText(System.IntPtr,System.IntPtr)">
            <param name="buffer">The pointer to a region holding text encoded using the encoding specified in <see cref="P:SkiaSharp.SKPaint.TextEncoding" /> format.</param>
            <param name="length">The number of bytes to read from the <paramref name="buffer." /></param>
            <summary>Measures the specified UTF-8 encoded text.</summary>
            <returns>Returns the width of the text.</returns>
            <remarks>The <paramref name="buffer" /> parameter is a pointer to a region in memory that contains text encoded in the <see cref="P:SkiaSharp.SKPaint.TextEncoding" /> format.   This only consumes up to <paramref name="length" /> bytes from the buffer.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.MeasureText(System.String,SkiaSharp.SKRect@)">
            <param name="text">The text to be measured.</param>
            <param name="bounds">The bounds of the text relative to (0, 0)</param>
            <summary>Measures the specified text.</summary>
            <returns>Returns the width of the text.</returns>
            <remarks>This will return the vertical measure if this is vertical text, in which case the returned value should be treated has a height instead of a width.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPaint.MeasureText(System.IntPtr,System.IntPtr,SkiaSharp.SKRect@)">
            <param name="buffer">The pointer to a region holding text encoded using the encoding specified in <see cref="P:SkiaSharp.SKPaint.TextEncoding" /> format.</param>
            <param name="length">The number of bytes to read from the <paramref name="buffer." /></param>
            <param name="bounds">The bounds of the text relative to (0, 0)</param>
            <summary>Measures the specified UTF-8 encoded text.</summary>
            <returns>Returns the width of the text.</returns>
            <remarks>
                <para>This will return the vertical measure if this is vertical text, in which case the returned value should be treated has a height instead of a width.</para>
                <para>The <paramref name="buffer" /> parameter is a pointer to a region in memory that contains text encoded in the <see cref="P:SkiaSharp.SKPaint.TextEncoding" /> format.   This only consumes up to <paramref name="length" /> bytes from the buffer.</para>
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.PathEffect">
            <summary>Gets or sets the path effect to use when painting.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.Shader">
            <summary>Gets or sets the shader to use when painting.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.StrokeCap">
            <summary>Gets or sets a value indicating how the start and end of stroked lines and paths are treated.</summary>
            <value>
                <para />
            </value>
            <remarks />
        </member>
        <member name="P:SkiaSharp.SKPaint.StrokeJoin">
            <summary>Gets or sets the path’s join type.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.StrokeMiter">
            <summary>Gets or sets the paint’s miter limit.</summary>
            <value />
            <remarks>This is used whenever the <see cref="P:SkiaSharp.SKPaint.Style" /> is <see cref="F:SkiaSharp.SKPaintStyle.Stroke" /> or <see cref="F:SkiaSharp.SKPaintStyle.StrokeAndFill" /> to control the behavior of miter joins when the joins' angle is sharp.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.StrokeWidth">
            <summary>Gets or sets the paint’s stroke width.</summary>
            <value>
                <para />
            </value>
            <remarks>This is used whenever the <see cref="P:SkiaSharp.SKPaint.Style" /> is <see cref="F:SkiaSharp.SKPaintStyle.Stroke" /> or <see cref="F:SkiaSharp.SKPaintStyle.StrokeAndFill" />. The value of zero is the special hairline mode.   Hairlines always draw with a width of 1 pixel, regardless of the transformation matrix.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.Style">
            <summary>Gets or sets the painting style.</summary>
            <value>
                <para />
            </value>
            <remarks>Can also be set using <see cref="P:SkiaSharp.SKPaint.IsStroke" />.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.SubpixelText">
            <summary>Gets or sets a value indicating whether to use subpixel text positioning.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.TextAlign">
            <summary>Gets or sets the path’s align value.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.TextEncoding">
            <summary>Gets or sets the encoding used when drawing or measuring text.</summary>
            <value>
                <para />
            </value>
            <remarks>This defaults to UTF-8 encoding.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.TextScaleX">
            <summary>Gets or sets paint’s horizontal scale factor for text.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.TextSize">
            <summary>Gets or sets the text size.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.TextSkewX">
            <summary>Gets or sets paint’s horizontal skew factor for text.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPaint.Typeface">
            <summary>Gets or sets the typeface used when painting text. May be <see langword="null" />.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKPaintHinting">
            <summary>Levels of hinting that can be performed.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKPaintHinting.Full">
            <summary>The same as <see cref="F:SkiaSharp.SKPaintHinting.Normal" />, unless we are rendering subpixel glyphs.</summary>
        </member>
        <member name="F:SkiaSharp.SKPaintHinting.NoHinting">
            <summary>Don’t perform hinting.</summary>
        </member>
        <member name="F:SkiaSharp.SKPaintHinting.Normal">
            <summary>Use the default hinting level.</summary>
        </member>
        <member name="F:SkiaSharp.SKPaintHinting.Slight">
            <summary>Use a lighter hinting level.</summary>
        </member>
        <member name="T:SkiaSharp.SKPaintStyle">
            <summary>Indications on how to draw geometry.</summary>
            <remarks>
                <para>Styles apply to rect, oval, path, and text. Bitmaps are always drawn in <see cref="F:SkiaSharp.SKPaintStyle.Fill" />, and lines are always drawn in <see cref="F:SkiaSharp.SKPaintStyle.Stroke" />.</para>
                <para>
                    <see cref="F:SkiaSharp.SKPaintStyle.StrokeAndFill" /> implicitly draws the result with <see cref="F:SkiaSharp.SKPathFillType.Winding" /> so if the original path is even-odd, the results may not appear the same as if it was drawn twice, filled and then stroked.</para>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKPaintStyle.Fill">
            <summary>Fill the geometry.</summary>
        </member>
        <member name="F:SkiaSharp.SKPaintStyle.Stroke">
            <summary>Stroke the geometry.</summary>
        </member>
        <member name="F:SkiaSharp.SKPaintStyle.StrokeAndFill">
            <summary>Fill and stroke the geometry.</summary>
        </member>
        <member name="T:SkiaSharp.SKPath">
            <summary>A compound geometric path.</summary>
            <remarks>A path encapsulates compound (multiple contour) geometric paths consisting of straight line segments, quadratic curves, and cubic curves.</remarks>
        </member>
        <member name="C:SkiaSharp.SKPath">
            <summary>Creates an empty path.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKPath(SkiaSharp.SKPath)">
            <param name="path">The path to clone.</param>
            <summary>Creates a path by making a copy of an existing path</summary>
            <remarks>This constructor can throw InvalidOperationException if there is a problem copying the source path.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.AddArc(SkiaSharp.SKRect,System.Single,System.Single)">
            <param name="oval">The bounds of oval used to define the size of the arc.</param>
            <param name="startAngle">Starting angle (in degrees) where the arc begins.</param>
            <param name="sweepAngle">Sweep angle (in degrees) measured clockwise.</param>
            <summary>Adds the specified arc to the path as a new contour.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.AddCircle(System.Single,System.Single,System.Single,SkiaSharp.SKPathDirection)">
            <param name="x">The x-coordinate of the center of the circle.</param>
            <param name="y">The y-coordinate of the center of the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="dir">The direction to wind the circle's contour.</param>
            <summary>Adds a closed circle contour to the path.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.AddOval(SkiaSharp.SKRect,SkiaSharp.SKPathDirection)">
            <param name="rect">The bounding oval to add as a closed contour to the path.</param>
            <param name="direction">The direction to wind the oval's contour.</param>
            <summary>Adds a closed oval contour to the path.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.AddPath(SkiaSharp.SKPath,SkiaSharp.SKPathAddMode)">
            <param name="other">The path containing the elements to be added to the current path.</param>
            <param name="mode">Determines how the <paramref name="other" /> path contours are added to the path. On <see cref="F:SkiaSharp.SKPathAddMode.Append" /> mode, contours are added as new contours. On <see cref="F:SkiaSharp.SKPathAddMode.Extend" /> mode, the last contour of the path is extended with the first contour of the <paramref name="other" /> path.</param>
            <summary>Extends the current path with the path elements from another path, using the specified extension mode.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.AddPath(SkiaSharp.SKPath,SkiaSharp.SKMatrix@,SkiaSharp.SKPathAddMode)">
            <param name="other">The path containing the elements to be added to the current path.</param>
            <param name="matrix">Transformation matrix applied to the <paramref name="other" /> path.</param>
            <param name="mode">Determines how the <paramref name="other" /> path contours are added to the path. On <see cref="F:SkiaSharp.SKPathAddMode.Append" /> mode, contours are added as new contours. On <see cref="F:SkiaSharp.SKPathAddMode.Extend" /> mode, the last contour of the path is extended with the first contour of the <paramref name="other" /> path.</param>
            <summary>Extends the current path with the path elements from another path, by applying the specified transformation matrix, using the specified extension mode.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.AddPath(SkiaSharp.SKPath,System.Single,System.Single,SkiaSharp.SKPathAddMode)">
            <param name="other">The path containing the elements to be added to the current path.</param>
            <param name="dx">The amount to translate the path in X as it is added.</param>
            <param name="dy">The amount to translate the path in Y as it is added.</param>
            <param name="mode">Determines how the <paramref name="other" /> path contours are added to the path. On <see cref="F:SkiaSharp.SKPathAddMode.Append" /> mode, contours are added as new contours. On <see cref="F:SkiaSharp.SKPathAddMode.Extend" /> mode, the last contour of the path is extended with the first contour of the <paramref name="other" /> path.</param>
            <summary>Extends the current path with the path elements from another path offset by (<paramref name="dx" />, <paramref name="dy" />), using the specified extension mode.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.AddPathReverse(SkiaSharp.SKPath)">
            <param name="other">The path containing the elements to be added to the current path.</param>
            <summary>Extends the current path with the path elements from another path in reverse order.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.AddPoly(SkiaSharp.SKPoint[],System.Boolean)">
            <param name="points">The points that make up the polygon.</param>
            <param name="close">Whether or not to close the path.</param>
            <summary>Adds a new contour made of just lines.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.AddRect(SkiaSharp.SKRect,SkiaSharp.SKPathDirection)">
            <param name="rect">The rectangle to add as a closed contour to the path</param>
            <param name="direction">The direction to wind the rectangle's contour.</param>
            <summary>Adds a closed rectangle contour to the path.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.AddRect(SkiaSharp.SKRect,SkiaSharp.SKPathDirection,System.UInt32)">
            <param name="rect">The rectangle to add as a closed contour to the path</param>
            <param name="direction">The direction to wind the rectangle's contour.</param>
            <param name="startIndex">Initial point of the contour (initial <see cref="M:SkiaSharp.SKPath.MoveTo" />), expressed as a corner index, starting in the upper-left position, clock-wise. Must be in the range of 0..3.</param>
            <summary>Adds a closed rectangle contour to the path.</summary>
            <remarks>Add a closed rectangle contour to the path with an initial point of the contour (startIndex) expressed as a corner index.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.AddRoundedRect(SkiaSharp.SKRect,System.Single,System.Single,SkiaSharp.SKPathDirection)">
            <param name="rect">The bounds of a the rounded rectangle.</param>
            <param name="rx">The x-radius of the rounded corners.</param>
            <param name="ry">The y-radius of the rounded corners</param>
            <param name="dir">The direction to wind the rectangle's contour.</param>
            <summary>Adds a closed rectangle with rounded corners to the current path.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.ArcTo(SkiaSharp.SKPoint,SkiaSharp.SKPoint,System.Single)">
            <param name="point1">The corner coordinates.</param>
            <param name="point2">The destination coordinates.</param>
            <param name="radius">The corner radius.</param>
            <summary>Appends a line and arc to the current path.</summary>
            <remarks>This is the same as the PostScript call "arct".</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.ArcTo(SkiaSharp.SKRect,System.Single,System.Single,System.Boolean)">
            <param name="oval">The bounding oval defining the shape and size of the arc.</param>
            <param name="startAngle">The starting angle (in degrees) where the arc begins.</param>
            <param name="sweepAngle">The sweep angle (in degrees) measured clockwise.</param>
            <param name="forceMoveTo">Whether to always begin a new contour with the arc.</param>
            <summary>Appends the specified arc to the path.</summary>
            <remarks>If the start of the arc is different from the path’s current last point, then an automatic <see cref="M:SkiaSharp.SKPath.LineTo" /> is added to connect the current contour to the start of the arc. However, if the path is empty, then we call <see cref="M:SkiaSharp.SKPath.MoveTo" /> with the first point of the arc.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.ArcTo(SkiaSharp.SKPoint,System.Single,SkiaSharp.SKPathArcSize,SkiaSharp.SKPathDirection,SkiaSharp.SKPoint)">
            <param name="r">The radius.</param>
            <param name="xAxisRotate">The angle in degrees relative to the x-axis.</param>
            <param name="largeArc">Determines whether the smallest or largest arc possible is drawn.</param>
            <param name="sweep">Determines if the arc should be swept in an anti-clockwise or clockwise direction.</param>
            <param name="xy">The destination coordinate.</param>
            <summary>Appends an elliptical arc from the current point in the format used by SVG.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.ArcTo(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <param name="x1">The corner x-coordinate.</param>
            <param name="y1">The corner y-coordinate.</param>
            <param name="x2">The destination x-coordinate.</param>
            <param name="y2">The destination y-coordinate.</param>
            <param name="radius">The corner radius.</param>
            <summary>Appends a line and arc to the current path.</summary>
            <remarks>This is the same as the PostScript call "arct".</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.ArcTo(System.Single,System.Single,System.Single,SkiaSharp.SKPathArcSize,SkiaSharp.SKPathDirection,System.Single,System.Single)">
            <param name="rx">The radius in the x-direction.</param>
            <param name="ry">The radius in the y-direction.</param>
            <param name="xAxisRotate">The angle in degrees relative to the x-axis.</param>
            <param name="largeArc">Determines whether the smallest or largest arc possible is drawn.</param>
            <param name="sweep">Determines if the arc should be swept in an anti-clockwise or clockwise direction.</param>
            <param name="x">The destination x-coordinate.</param>
            <param name="y">The destination y-coordinate.</param>
            <summary>Appends an elliptical arc from the current point in the format used by SVG.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPath.Bounds">
            <summary>Gets the bounds of the path's points. If the path contains zero points/verbs, this will return the empty rectangle.</summary>
            <value>Gets the bounds of the path's points.</value>
            <remarks>This bounds may be larger than the actual shape, since curves do not extend as far as their control points. Additionally this bound encompases all points, even isolated MoveTo either preceeding or following the last non-degenerate contour.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.Close">
            <summary>Closes the current contour.</summary>
            <remarks>If the current point is not equal to the first point of the contour, a line segment is automatically added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.ComputeTightBounds">
            <summary>Computes a bounds that is conservatively "snug" around the path.</summary>
            <returns>Returns the bounds.</returns>
            <remarks>
                <para>This assumes that the path will be filled.</para>
                <para />
                <para>It does not attempt to collapse away contours that are logically empty (e.g. MoveTo(x, y) + LineTo(x, y)) but will include them in the calculation.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.ConicTo(SkiaSharp.SKPoint,SkiaSharp.SKPoint,System.Single)">
            <param name="point0">The coordinates of the control point of the conic curve.</param>
            <param name="point1">The coordinates of the end point of the conic curve.</param>
            <param name="w">The weight of the conic curve.</param>
            <summary>Add a conic path from the last point.</summary>
            <remarks>If no <see cref="M:SkiaSharp.SKPath.MoveTo" /> call has been made for this contour, the first point is automatically set to (0, 0).</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.ConicTo(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <param name="x0">The x-coordinate of the control point of the conic curve.</param>
            <param name="y0">The y-coordinate of the control point of the conic curve.</param>
            <param name="x1">The x-coordinate of the end point of the conic curve.</param>
            <param name="y1">The y-coordinate of the end point of the conic curve.</param>
            <param name="w">The weight of the conic curve.</param>
            <summary>Add a conic path from the last point.</summary>
            <remarks>If no <see cref="M:SkiaSharp.SKPath.MoveTo" /> call has been made for this contour, the first point is automatically set to (0, 0).</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.Contains(System.Single,System.Single)">
            <param name="x">The x-coordinate to check.</param>
            <param name="y">The y-coordinate to check.</param>
            <summary>Returns true if the point (x, y) is contained by the path, taking into account the <see cref="P:SkiaSharp.SKPath.FillType" />.</summary>
            <returns>Returns true if the point (x, y) is contained by the path.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.ConvertConicToQuads(SkiaSharp.SKPoint,SkiaSharp.SKPoint,SkiaSharp.SKPoint,System.Single,System.Int32)">
            <param name="p0">The coordinates of the starting point of the conic curve.</param>
            <param name="p1">The coordinates of the control point of the conic curve.</param>
            <param name="p2">The coordinates of the end point of the conic curve.</param>
            <param name="w">The weight of the conic curve.</param>
            <param name="pow2">The tolerance to use (1 &lt;&lt; pow2).</param>
            <summary>Chop a conic into a number of quads.</summary>
            <returns>Returns the collection of points that make up the conic curve.</returns>
            <remarks>The amount of storage needed for pts is: 1 + 2 * (1 &lt;&lt; pow2)</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.ConvertConicToQuads(SkiaSharp.SKPoint,SkiaSharp.SKPoint,SkiaSharp.SKPoint,System.Single,SkiaSharp.SKPoint[],System.Int32)">
            <param name="p0">The coordinates of the starting point of the conic curve.</param>
            <param name="p1">The coordinates of the control point of the conic curve.</param>
            <param name="p2">The coordinates of the end point of the conic curve.</param>
            <param name="w">The weight of the conic curve.</param>
            <param name="pts">The collection to store the points.</param>
            <param name="pow2">The tolerance to use (1 &lt;&lt; pow2).</param>
            <summary>Chop a conic into a number of quads.</summary>
            <returns>Returns the number of quads.</returns>
            <remarks>The amount of storage needed for pts is: 1 + 2 * (1 &lt;&lt; pow2)</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.ConvertConicToQuads(SkiaSharp.SKPoint,SkiaSharp.SKPoint,SkiaSharp.SKPoint,System.Single,SkiaSharp.SKPoint[]@,System.Int32)">
            <param name="p0">The coordinates of the starting point of the conic curve.</param>
            <param name="p1">The coordinates of the control point of the conic curve.</param>
            <param name="p2">The coordinates of the end point of the conic curve.</param>
            <param name="w">The weight of the conic curve.</param>
            <param name="pts">The collection of points.</param>
            <param name="pow2">The tolerance to use (1 &lt;&lt; pow2).</param>
            <summary>Chop a conic into a number of quads.</summary>
            <returns>Returns the number of quads.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPath.Convexity">
            <summary>Gets or sets the path's convexity.</summary>
            <value>
                <para />
            </value>
            <remarks>If it is currently unknown, then this function will attempt to compute the convexity (and cache the result).</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.CreateIterator(System.Boolean)">
            <param name="forceClose">When this is true, each contour (as defined by a new starting move command) will be completed with a close verb regardless of the contour's contents.</param>
            <summary>Creates an iterator object to scan the all of the segments (lines, quadratics, cubics) of each contours in a path.</summary>
            <returns>Returns an object that can be used to iterate over the various elements of the path.</returns>
            <remarks>This iterator is able to clean up the path as the values are returned. If you do not desire to get verbs that have been cleaned up, use the <see cref="M:SkiaSharp.SKPath.CreateRawIterator" /> method instead.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.CreateRawIterator">
            <summary>Creates a raw iterator object to scan the all of the segments (lines, quadratics, cubics) of each contours in a path.</summary>
            <returns>Returns an object that can be used to iterate over the various elements of the path.</returns>
            <remarks>Unlike the <see cref="M:SkiaSharp.SKPath.CreateIterator" /> method, this iterator does not clean up or normalize the values in the path. It returns the raw elements contained in the path.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.CubicTo(SkiaSharp.SKPoint,SkiaSharp.SKPoint,SkiaSharp.SKPoint)">
            <param name="point0">The coordinates of the 1st control point on a cubic curve.</param>
            <param name="point1">The coordinates of the 2nd control point on a cubic curve.</param>
            <param name="point2">The coordinates of the end point on a cubic curve.</param>
            <summary>Adds a cubic bezier from the last point.</summary>
            <remarks>If no <see cref="M:SkiaSharp.SKPath.MoveTo" /> call has been made for this contour, the first point is automatically set to (0, 0).</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.CubicTo(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <param name="x0">The x-coordinate of the 1st control point on a cubic curve.</param>
            <param name="y0">The y-coordinate of the 1st control point on a cubic curve.</param>
            <param name="x1">The x-coordinate of the 2nd control point on a cubic curve.</param>
            <param name="y1">The y-coordinate of the 2nd control point on a cubic curve.</param>
            <param name="x2">The x-coordinate of the end point on a cubic curve.</param>
            <param name="y2">The y-coordinate of the end point on a cubic curve.</param>
            <summary>Adds a cubic bezier from the last point.</summary>
            <remarks>If no <see cref="M:SkiaSharp.SKPath.MoveTo" /> call has been made for this contour, the first point is automatically set to (0, 0).</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPath.FillType">
            <summary>Gets or sets the path's fill type.</summary>
            <value>
                <para />
            </value>
            <remarks>This is used to define how "inside" is computed. The default value is <see cref="F:SkiaSharp.SKPathFillType.Winding" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.GetBounds(SkiaSharp.SKRect@)">
            <param name="rect">The bounds, if the path contains any points.</param>
            <summary>Returns the bounds of the path's points.</summary>
            <returns>Returns true if the path is not empty, otherwise false.</returns>
            <remarks>This bounds may be larger than the actual shape, since curves do not extend as far as their control points. Additionally this bound encompases all points, even isolated MoveTo either preceeding or following the last non-degenerate contour.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.GetPoint(System.Int32)">
            <param name="index">The index of the point to return.</param>
            <summary>Returns the point at the specified index.</summary>
            <returns>The point at the specified index.</returns>
            <remarks>If the index is out of range (i.e. is not 0 &lt;= index &lt; <see cref="P:SkiaSharp.SKPath.PointCount" />), then the returned coordinates will be (0, 0).</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.GetPoints(System.Int32)">
            <param name="max">The maximum number of points to copy into points.</param>
            <summary>Returns a subset of points in the path. Up to max points are copied.</summary>
            <returns>Returns the requested set of points.</returns>
            <remarks />
        </member>
        <member name="M:SkiaSharp.SKPath.GetPoints(SkiaSharp.SKPoint[],System.Int32)">
            <param name="points">The array to hold the points.</param>
            <param name="max">The maximum number of points to copy into points.</param>
            <summary>Returns a subset of points in the path. Up to max points are copied.</summary>
            <returns>Returns the actual number of points in the path</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.GetTightBounds(SkiaSharp.SKRect@)">
            <param name="result">The tight bounds of the path.</param>
            <summary>Gets the “tight” bounds of the path. Unlike <see cref="M:SkiaSharp.SKPath.GetBounds" />, the control points of curves are excluded.</summary>
            <returns>Returns true if the bounds could be computed, otherwise false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPath.IsConcave">
            <summary>Gets a value indicating whether the path is concave.</summary>
            <value />
            <remarks>If it is currently unknown, then this function will attempt to compute the convexity (and cache the result).</remarks>
        </member>
        <member name="P:SkiaSharp.SKPath.IsConvex">
            <summary>Gets a value indicating whether the path is convex.</summary>
            <value>
                <para />
            </value>
            <remarks>If it is currently unknown, then this function will attempt to compute the convexity (and cache the result).</remarks>
        </member>
        <member name="P:SkiaSharp.SKPath.IsEmpty">
            <summary>Gets a value indicating whether or not the path is empty (contains no lines or curves).</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPath.Item(System.Int32)">
            <param name="index">The index of the point to get.</param>
            <summary>Gets the point at the specified index.</summary>
            <value>The point at the specified index.</value>
            <remarks>If the index is out of range (i.e. is not 0 &lt;= index &lt; <see cref="P:SkiaSharp.SKPath.PointCount" />), then the returned coordinates will be (0, 0).</remarks>
        </member>
        <member name="P:SkiaSharp.SKPath.LastPoint">
            <summary>Return the last point on the path. If no points have been added, (0, 0) is returned.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.LineTo(SkiaSharp.SKPoint)">
            <param name="point">The coordinates of the end of a line.</param>
            <summary>Add a line from the last point to the specified point (x, y).</summary>
            <remarks>If no <see cref="M:SkiaSharp.SKPath.MoveTo" /> call has been made for this contour, the first point is automatically set to (0, 0).</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.LineTo(System.Single,System.Single)">
            <param name="x">The x-coordinate of the end of a line.</param>
            <param name="y">The y-coordinate of the end of a line.</param>
            <summary>Add a line from the last point to the specified point (x, y).</summary>
            <remarks>If no <see cref="M:SkiaSharp.SKPath.MoveTo" /> call has been made for this contour, the first point is automatically set to (0, 0).</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.MoveTo(SkiaSharp.SKPoint)">
            <param name="point">The coordinates of the start of a new contour.</param>
            <summary>Set the beginning of the next contour to the point.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.MoveTo(System.Single,System.Single)">
            <param name="x">The x-coordinate of the start of a new contour.</param>
            <param name="y">The y-coordinate of the start of a new contour.</param>
            <summary>Set the beginning of the next contour to the point.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.Offset(SkiaSharp.SKPoint)">
            <param name="offset">The amount to offset the entire path.</param>
            <summary>Set the beginning of the next contour to the point.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.Offset(System.Single,System.Single)">
            <param name="dx">The amount in the x-direction to offset the entire path.</param>
            <param name="dy">The amount in the y-direction to offset the entire path.</param>
            <summary>Offset the path by the specifid distance.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.Op(SkiaSharp.SKPath,SkiaSharp.SKPathOp)">
            <param name="other">The second operand.</param>
            <param name="op">The logical operator.</param>
            <summary>Compute the result of a logical operation on two paths.</summary>
            <returns>Returns the resulting path if the operation was successful, otherwise null.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.Op(SkiaSharp.SKPath,SkiaSharp.SKPathOp,SkiaSharp.SKPath)">
            <param name="other">The second operand.</param>
            <param name="op">The logical operator.</param>
            <param name="result">The path that will be used to set the result to. The current path will be <see cref="M:SkiaSharp.SKPath.Reset" />.</param>
            <summary>Compute the result of a logical operation on two paths.</summary>
            <returns>Returns true if the operation was successful, otherwise false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.ParseSvgPathData(System.String)">
            <param name="svgPath">The SVG path data.</param>
            <summary>Creates a path based on the SVG path data string.</summary>
            <returns>Returns the new path if successful, otherwise null.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPath.PointCount">
            <summary>Gets the number of points on the path.</summary>
            <value>
                <para />
            </value>
            <remarks />
        </member>
        <member name="P:SkiaSharp.SKPath.Points">
            <summary>Gets all the points in the path.</summary>
            <value>
                <para />
            </value>
            <remarks>The number of points will be <see cref="P:SkiaSharp.SKPath.PointCount" />, To only return a subset of the points in the path, use <see cref="M:SkiaSharp.SKPath.GetPoints" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.QuadTo(SkiaSharp.SKPoint,SkiaSharp.SKPoint)">
            <param name="point0">The coordinates of the control point on a quadratic curve.</param>
            <param name="point1">The coordinates of the end point on a quadratic curve.</param>
            <summary>Add a quadratic bezier from the last point.</summary>
            <remarks>Add a quadratic bezier from the last point, approaching control point (point0), and ending at point1. If no <see cref="M:SkiaSharp.SKPath.MoveTo" /> call has been made for this contour, the first point is automatically set to (0, 0).</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.QuadTo(System.Single,System.Single,System.Single,System.Single)">
            <param name="x0">The x-coordinate of the control point on a quadratic curve.</param>
            <param name="y0">The y-coordinate of the control point on a quadratic curve.</param>
            <param name="x1">The x-coordinate of the end point on a quadratic curve.</param>
            <param name="y1">The y-coordinate of the end point on a quadratic curve.</param>
            <summary>Add a quadratic bezier from the last point.</summary>
            <remarks>Add a quadratic bezier from the last point, approaching control point (x0, y0), and ending at (x1, y1). If no <see cref="M:SkiaSharp.SKPath.MoveTo" /> call has been made for this contour, the first point is automatically set to (0, 0).</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.RArcTo(SkiaSharp.SKPoint,System.Single,SkiaSharp.SKPathArcSize,SkiaSharp.SKPathDirection,SkiaSharp.SKPoint)">
            <param name="r">The radius.</param>
            <param name="xAxisRotate">The angle in degrees relative to the x-axis.</param>
            <param name="largeArc">Determines whether the smallest or largest arc possible is drawn.</param>
            <param name="sweep">Determines if the arc should be swept in an anti-clockwise or clockwise direction.</param>
            <param name="xy">The destination coordinates relative to the last point.</param>
            <summary>The same as <see cref="M:SkiaSharp.SKPath.ArcTo" />, but the coordinates are considered relative to the last point on this contour.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.RArcTo(System.Single,System.Single,System.Single,SkiaSharp.SKPathArcSize,SkiaSharp.SKPathDirection,System.Single,System.Single)">
            <param name="rx">The radius in the x-direction.</param>
            <param name="ry">The radius in the y-direction.</param>
            <param name="xAxisRotate">The angle in degrees relative to the x-axis.</param>
            <param name="largeArc">Determines whether the smallest or largest arc possible is drawn.</param>
            <param name="sweep">Determines if the arc should be swept in an anti-clockwise or clockwise direction.</param>
            <param name="x">The destination x-coordinate relative to the last point.</param>
            <param name="y">The destination y-coordinate relative to the last point.</param>
            <summary>The same as <see cref="M:SkiaSharp.SKPath.ArcTo" />, but the coordinates are considered relative to the last point on this contour.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.RConicTo(SkiaSharp.SKPoint,SkiaSharp.SKPoint,System.Single)">
            <param name="point0">The amount to add to the coordinates of the last point on this contour, to specify the control point of the conic curve.</param>
            <param name="point1">The amount to add to the coordinates of the last point on this contour, to specify the end point of the conic curve.</param>
            <param name="w">The weight of the conic curve.</param>
            <summary>Same as <see cref="M:SkiaSharp.SKPath.ConicTo" /> but the coordinates are considered relative to the last point on this contour.</summary>
            <remarks>If no <see cref="M:SkiaSharp.SKPath.MoveTo" /> call has been made for this contour, the first point is automatically set to (0, 0).</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.RConicTo(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <param name="dx0">The amount to add to the x-coordinate of the last point on this contour, to specify the control point of the conic curve.</param>
            <param name="dy0">The amount to add to the y-coordinate of the last point on this contour, to specify the control point of the conic curve.</param>
            <param name="dx1">The amount to add to the x-coordinate of the last point on this contour, to specify the end point of the conic curve.</param>
            <param name="dy1">The amount to add to the y-coordinate of the last point on this contour, to specify the end point of the conic curve.</param>
            <param name="w">The weight of the conic curve.</param>
            <summary>Same as <see cref="M:SkiaSharp.SKPath.ConicTo" /> but the coordinates are considered relative to the last point on this contour.</summary>
            <remarks>If no <see cref="M:SkiaSharp.SKPath.MoveTo" /> call has been made for this contour, the first point is automatically set to (0, 0).</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.RCubicTo(SkiaSharp.SKPoint,SkiaSharp.SKPoint,SkiaSharp.SKPoint)">
            <param name="point0">The amount to add to the coordinates of the last point on this contour, to specify the 1st control point on a cubic curve.</param>
            <param name="point1">The amount to add to the coordinates of the last point on this contour, to specify the 2nd control point on a cubic curve.</param>
            <param name="point2">The amount to add to the coordinates of the last point on this contour, to specify the end point on a cubic curve.</param>
            <summary>Same as <see cref="M:SkiaSharp.SKPath.CubicTo" /> but the coordinates are considered relative to the last point on this contour.</summary>
            <remarks> If no <see cref="M:SkiaSharp.SKPath.MoveTo" /> call has been made for this contour, the first point is automatically set to (0, 0).</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.RCubicTo(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <param name="dx0">The amount to add to the x-coordinate of the last point on this contour, to specify the 1st control point on a cubic curve.</param>
            <param name="dy0">The amount to add to the y-coordinate of the last point on this contour, to specify the 1st control point on a cubic curve.</param>
            <param name="dx1">The amount to add to the x-coordinate of the last point on this contour, to specify the 2nd control point on a cubic curve.</param>
            <param name="dy1">The amount to add to the y-coordinate of the last point on this contour, to specify the 2nd control point on a cubic curve.</param>
            <param name="dx2">The amount to add to the x-coordinate of the last point on this contour, to specify the end point on a cubic curve.</param>
            <param name="dy2">The amount to add to the y-coordinate of the last point on this contour, to specify the end point on a cubic curve.</param>
            <summary>Same as <see cref="M:SkiaSharp.SKPath.CubicTo" /> but the coordinates are considered relative to the last point on this contour.</summary>
            <remarks> If no <see cref="M:SkiaSharp.SKPath.MoveTo" /> call has been made for this contour, the first point is automatically set to (0, 0).</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.Reset">
            <summary>Clear any lines and curves from the path, making it empty.</summary>
            <remarks>This frees up internal storage associated with those segments.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.Rewind">
            <summary>Clear any lines and curves from the path, making it empty.</summary>
            <remarks>Any internal storage for those lines/curves is retained, making reuse of the path potentially faster.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.RLineTo(SkiaSharp.SKPoint)">
            <param name="point">The amount to add to the coordinates of the last point on this contour, to specify the end of a line.</param>
            <summary>Same as <see cref="M:SkiaSharp.SKPath.LineTo" /> but the coordinates are considered relative to the last point on this contour.</summary>
            <remarks> If no <see cref="M:SkiaSharp.SKPath.MoveTo" /> call has been made for this contour, the first point is automatically set to (0, 0).</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.RLineTo(System.Single,System.Single)">
            <param name="dx">The amount to add to the x-coordinate of the last point on this contour, to specify the end of a line.</param>
            <param name="dy">The amount to add to the y-coordinate of the last point on this contour, to specify the end of a line.</param>
            <summary>Same as <see cref="M:SkiaSharp.SKPath.LineTo" /> but the coordinates are considered relative to the last point on this contour.</summary>
            <remarks> If no <see cref="M:SkiaSharp.SKPath.MoveTo" /> call has been made for this contour, the first point is automatically set to (0, 0).</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.RMoveTo(SkiaSharp.SKPoint)">
            <param name="point">The amount to add to the coordinates of the last point on this contour, to specify the start of a new contour.</param>
            <summary>Same as <see cref="M:SkiaSharp.SKPath.MoveTo" /> but the coordinates are considered relative to the last point on this contour.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.RMoveTo(System.Single,System.Single)">
            <param name="dx">The amount to add to the x-coordinate of the last point on this contour, to specify the start of a new contour.</param>
            <param name="dy">The amount to add to the x-coordinate of the last point on this contour, to specify the start of a new contour.</param>
            <summary>Same as <see cref="M:SkiaSharp.SKPath.MoveTo" /> but the coordinates are considered relative to the last point on this contour.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.RQuadTo(SkiaSharp.SKPoint,SkiaSharp.SKPoint)">
            <param name="point0">The amount to add to the coordinates of the last point on this contour, to specify the control point on a quadratic curve.</param>
            <param name="point1">The amount to add to the coordinates of the last point on this contour, to specify end point on a quadratic curve.</param>
            <summary>Same as <see cref="M:SkiaSharp.SKPath.QuadTo" /> but the coordinates are considered relative to the last point on this contour.</summary>
            <remarks> If no <see cref="M:SkiaSharp.SKPath.MoveTo" /> call has been made for this contour, the first point is automatically set to (0, 0).</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.RQuadTo(System.Single,System.Single,System.Single,System.Single)">
            <param name="dx0">The amount to add to the x-coordinate of the last point on this contour, to specify the control point on a quadratic curve.</param>
            <param name="dy0">The amount to add to the y-coordinate of the last point on this contour, to specify the control point on a quadratic curve.</param>
            <param name="dx1">The amount to add to the x-coordinate of the last point on this contour, to specify end point on a quadratic curve.</param>
            <param name="dy1">The amount to add to the y-coordinate of the last point on this contour, to specify end point on a quadratic curve.</param>
            <summary>Same as <see cref="M:SkiaSharp.SKPath.QuadTo" /> but the coordinates are considered relative to the last point on this contour.</summary>
            <remarks> If no <see cref="M:SkiaSharp.SKPath.MoveTo" /> call has been made for this contour, the first point is automatically set to (0, 0).</remarks>
        </member>
        <member name="P:SkiaSharp.SKPath.SegmentMasks">
            <summary>Gets a set of flags indicating if the path contains one or more segments of that type.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.Simplify">
            <summary>Return a simplified copy of the current path.</summary>
            <returns>Returns the new path if simplification was successful, otherwise null.</returns>
            <remarks>The curve order is reduced where possible so that cubics may be turned into quadratics, and quadratics maybe turned into lines.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.Simplify(SkiaSharp.SKPath)">
            <param name="result">The path to store the simplified path data. If simplification failed, then this is unmodified.</param>
            <summary>Simplifies the current path.</summary>
            <returns>Returns true if simplification was successful, otherwise false.</returns>
            <remarks>The curve order is reduced where possible so that cubics may be turned into quadratics, and quadratics maybe turned into lines.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPath.TightBounds">
            <summary>Gets the “tight” bounds of the path. Unlike <see cref="P:SkiaSharp.SKPath.Bounds" />, the control points of curves are excluded.</summary>
            <value>The tight bounds of the path.</value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.ToSvgPathData">
            <summary>Returns a SVG path data representation of the current path.</summary>
            <returns>
                <para />
            </returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath.Transform(SkiaSharp.SKMatrix)">
            <param name="matrix">The matrix to use for transformation.</param>
            <summary>Applies a transformation matrix to the all the elements in the path.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPath.VerbCount">
            <summary>Gets the number of verbs in the path.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKPath+Iterator">
            <summary>Iterator object to scan the all of the segments (lines, quadratics, cubics) of each contours in a path.</summary>
            <remarks>Iterators are created by calling the <see cref="M:SkiaSharp.SKPath.CreateIterator" /> method.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath+Iterator.ConicWeight">
            <summary>Return the weight for the current conic.</summary>
            <returns>
                <para />
            </returns>
            <remarks>Only valid if the current segment return by <see cref="M:SkiaSharp.SKPath+Iterator.Next" /> was <see cref="F:SkiaSharp.SKPathVerb.Conic" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath+Iterator.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath+Iterator.IsCloseContour">
            <summary>Returns a value indicating whether the current contour is closed.</summary>
            <returns>Returns true if the current contour is closed (has a <see cref="E:SkiaSharp.SKPathVerb.Close" />).</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath+Iterator.IsCloseLine">
            <summary>Returns a value indicating whether the last call to <see cref="M:SkiaSharp.SKPath+Iterator.Next" /> returns a line which was the result of a <see cref="M:SkiaSharp.SKPath.Close()" /> command.</summary>
            <returns>Returns true if the last call to <see cref="M:SkiaSharp.SKPath+Iterator.Next" /> returned a line which was the result of a <see cref="M:SkiaSharp.SKPath.Close()" /> command.</returns>
            <remarks>If the call to <see cref="M:SkiaSharp.SKPath+Iterator.Next" /> returned a different value than <see cref="F:SkiaSharp.SKPathVerb.Line" />, the result is undefined.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath+Iterator.Next(SkiaSharp.SKPoint[],System.Boolean,System.Boolean)">
            <param name="points">The storage for the points representing the current verb and/or segment. Should be an array of four points.</param>
            <param name="doConsumeDegenerates">If <see langword="true" />, first scan for segments that are deemed degenerate (too short) and skip those.</param>
            <param name="exact">If <paramref name="doConsumeDegenerates" /> is <see langword="true" /> and exact is true, skip only degenerate elements with lengths exactly equal to zero. If exact is <see langword="false" />, skip degenerate elements with lengths close to zero. If <paramref name="doConsumeDegenerates" /> is <see langword="false" />, exact has no effect.</param>
            <summary>Returns the next verb in this iteration of the path.</summary>
            <returns>The verb of the current segment.</returns>
            <remarks>When all segments have been visited, returns <see cref="F:SkiaSharp.SKPathVerb.Done" />.</remarks>
        </member>
        <member name="T:SkiaSharp.SKPath+OpBuilder">
            <summary>Perform a series of path operations, optimized for unioning many paths together.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKPath+OpBuilder">
            <summary>Creates aan instance of <see cref="T:SkiaSharp.SKPath+OpBuilder" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath+OpBuilder.Add(SkiaSharp.SKPath,SkiaSharp.SKPathOp)">
            <param name="path">The second operand.</param>
            <param name="op">The operator to apply to the existing and supplied paths.</param>
            <summary>Add one or more paths and their operand.</summary>
            <remarks>The builder is empty before the first path is added, so the result of a single add is (emptyPath OP path).</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath+OpBuilder.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath+OpBuilder.Resolve(SkiaSharp.SKPath)">
            <param name="result">The product of the operands.</param>
            <summary>Computes the sum of all paths and operands, and resets the builder to its initial state.</summary>
            <returns>Returns true if the operation succeeded, otherwise false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKPath+RawIterator">
            <summary>Iterator object to scan through the verbs in the path, providing the associated points.</summary>
            <remarks>Iterators are created by calling the <see cref="M:SkiaSharp.SKPath.CreateRawIterator" /> method.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath+RawIterator.ConicWeight">
            <summary>Returns the weight for the current conic.</summary>
            <returns />
            <remarks>Only valid if the current segment returned by <see cref="M:SkiaSharp.SKPath+RawIterator.Next" /> was <see cref="F:SkiaSharp.SKPathVerb.Conic" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath+RawIterator.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPath+RawIterator.Next(SkiaSharp.SKPoint[])">
            <param name="points">The storage for the points representing the current verb and/or segment. Should be an array of four points.</param>
            <summary>Returns the next verb in this iteration of the path.</summary>
            <returns>The verb of the current segment.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPath+RawIterator.Peek">
            <summary>Returns what the next verb will be, but do not visit the next segment.</summary>
            <returns>Returns the verb for the next segment.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKPath1DPathEffectStyle">
            <summary>How to transform path at each point (based on the current position and tangent).</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKPath1DPathEffectStyle.Morph">
            <summary>Transform each point, and turn lines into curves.</summary>
        </member>
        <member name="F:SkiaSharp.SKPath1DPathEffectStyle.Rotate">
            <summary>Rotate the shape about its center.</summary>
        </member>
        <member name="F:SkiaSharp.SKPath1DPathEffectStyle.Translate">
            <summary>Translate the shape to each position.</summary>
        </member>
        <member name="T:SkiaSharp.SKPathAddMode">
            <summary>Controls how a path is added to another path.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKPathAddMode.Append">
            <summary>Source path contours are added as new contours.</summary>
        </member>
        <member name="F:SkiaSharp.SKPathAddMode.Extend">
            <summary>The path is added by extending the last contour of the destination path with the first contour of the source path. If the last contour of the destination path is closed, then it will not be extended. Instead, the start of source path will be extended by a straight line to the end point of the destination path.</summary>
        </member>
        <member name="T:SkiaSharp.SKPathArcSize">
            <summary>Indication for whether the smaller or larger of possible two arcs is drawn.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKPathArcSize.Large">
            <summary>The larger of the two possible arcs.</summary>
        </member>
        <member name="F:SkiaSharp.SKPathArcSize.Small">
            <summary>The smaller of the two possible arcs.</summary>
        </member>
        <member name="T:SkiaSharp.SKPathConvexity">
            <summary>Convexity for paths.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKPathConvexity.Concave">
            <summary>The path is concave.</summary>
        </member>
        <member name="F:SkiaSharp.SKPathConvexity.Convex">
            <summary>The path is convex.</summary>
        </member>
        <member name="F:SkiaSharp.SKPathConvexity.Unknown">
            <summary>The path’s convexity is unknown.</summary>
        </member>
        <member name="T:SkiaSharp.SKPathDirection">
            <summary>Direction for path contours.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKPathDirection.Clockwise">
            <summary>Clockwise direction for adding closed contours.</summary>
        </member>
        <member name="F:SkiaSharp.SKPathDirection.CounterClockwise">
            <summary>Counter-clockwise direction for adding closed contours.</summary>
        </member>
        <member name="T:SkiaSharp.SKPathEffect">
            <summary>The base class for objects in the <see cref="T:SkiaSharp.SKPaint" /> that affect the geometry of a drawing primitive before it is transformed by the canvas' matrix and drawn.</summary>
            <remarks />
        </member>
        <member name="M:SkiaSharp.SKPathEffect.Create1DPath(SkiaSharp.SKPath,System.Single,System.Single,SkiaSharp.SKPath1DPathEffectStyle)">
            <param name="path">The path to replicate (dash).</param>
            <param name="advance">The space between instances of path.</param>
            <param name="phase">The distance (mod advance) along path for its initial position.</param>
            <param name="style">How to transform path at each point (based on the current position and tangent).</param>
            <summary>Creates a dash path effect by replicating the specified path.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKPathEffect" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPathEffect.Create2DLine(System.Single,SkiaSharp.SKMatrix)">
            <param name="width">The width of the line.</param>
            <param name="matrix">The matrix.</param>
            <summary>Creates a dash path effect by replacing the path with a solid line.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKPathEffect" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPathEffect.Create2DPath(SkiaSharp.SKMatrix,SkiaSharp.SKPath)">
            <param name="matrix">The matrix.</param>
            <param name="path">The path.</param>
            <summary>Stamp the specified path to fill the shape, using the matrix to define the latice.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKPathEffect" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPathEffect.CreateArcTo(System.Single)">
            <param name="radius">The arc radius.</param>
            <summary>Creates a path effect that can turn sharp corners into various arcs.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKPathEffect" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPathEffect.CreateCompose(SkiaSharp.SKPathEffect,SkiaSharp.SKPathEffect)">
            <param name="outer">The outer (second) path effect to apply.</param>
            <param name="inner">The inner (first) path effect to apply.</param>
            <summary>Creates a compound path effect.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKPathEffect" />, or null on error.</returns>
            <remarks>The effect is to apply first the inner path effect and the the outer path effect (e.g. outer(inner(path))).</remarks>
        </member>
        <member name="M:SkiaSharp.SKPathEffect.CreateCorner(System.Single)">
            <param name="radius">The radius to use, must be &gt; 0 to have an effect.</param>
            <summary>Creates a path effect that can turn sharp corners into various treatments (e.g. rounded corners).</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKPathEffect" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPathEffect.CreateDash(System.Single[],System.Single)">
            <param name="intervals">The definition of the dash pattern via an even number of entries.</param>
            <param name="phase">The offset into the intervals array. (mod the sum of all of the intervals).</param>
            <summary>Creates a dash path effect by specifying the dash intervals.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKPathEffect" />, or null on error.</returns>
            <remarks>
                <para>The dash pattern is defined via an array containing an even number of entries (&gt;=2), with the even indices specifying the length of "on" intervals, and the odd indices specifying the length of "off” intervals.</para>
                <para>For example: if the intervals = new [] { 10, 20 } and the phase = 25, then the dash pattern will be: 5 pixels off, 10 pixels on, 20 pixels off, 10 pixels on, 20 pixels off, etc. A phase of -5, 25, 55, 85, etc. would all result in the same path, because the sum of all the intervals is 30.</para>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPathEffect.CreateDiscrete(System.Single,System.Single,System.UInt32)">
            <param name="segLength">The length of the segments to break the path into.</param>
            <param name="deviation">The maximum distance to move the point away from the original path.</param>
            <param name="seedAssist">The randomizer seed to use.</param>
            <summary>Creates a “jitter” path effect by chopping a path into discrete segments, and randomly displacing them.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKPathEffect" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPathEffect.CreateSum(SkiaSharp.SKPathEffect,SkiaSharp.SKPathEffect)">
            <param name="first">The first path effect to apply.</param>
            <param name="second">The second path effect to apply.</param>
            <summary>Creates a compound path effect.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKPathEffect" />, or null on error.</returns>
            <remarks>The effect is to apply one path after the other.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPathEffect.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKPathFillType">
            <summary>Possible path fill type values.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKPathFillType.EvenOdd">
            <summary>Specifies that "inside" is computed by an odd number of edge crossings.</summary>
        </member>
        <member name="F:SkiaSharp.SKPathFillType.InverseEvenOdd">
            <summary>Same as <see cref="F:SkiaSharp.SKPathFillType.EvenOdd" />, but draws outside of the path, rather than inside.</summary>
        </member>
        <member name="F:SkiaSharp.SKPathFillType.InverseWinding">
            <summary>Same as <see cref="F:SkiaSharp.SKPathFillType.Winding" />, but draws outside of the path, rather than inside.</summary>
        </member>
        <member name="F:SkiaSharp.SKPathFillType.Winding">
            <summary>Specifies that "inside" is computed by a non-zero sum of signed edge crossings.</summary>
        </member>
        <member name="T:SkiaSharp.SKPathMeasure">
            <summary>Represents a type that can be used to calculate the length of, and segments of, a path.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKPathMeasure">
            <summary>Create a new <see cref="T:SkiaSharp.SKPathMeasure" /> instance with a null path.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKPathMeasure(SkiaSharp.SKPath,System.Boolean,System.Single)">
            <param name="path">The path to use, or null.</param>
            <param name="forceClosed">Controls whether or not the path is treated as closed.</param>
            <param name="resScale">Controls the precision of the measure. Values greater 1 increase the precision (and possibly slow down the computation).</param>
            <summary>Create a new <see cref="T:SkiaSharp.SKPathMeasure" /> instance with the specified path.</summary>
            <remarks>The path must remain valid for the lifetime of the measure object, or until <see cref="M:SkiaSharp.SKPathMeasure.SetPath" /> is called with a different path (or null), since the measure object keeps a reference to the path object (does not copy its data).</remarks>
        </member>
        <member name="M:SkiaSharp.SKPathMeasure.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPathMeasure.GetMatrix(System.Single,SkiaSharp.SKMatrix@,SkiaSharp.SKPathMeasureMatrixFlags)">
            <param name="distance">The distance to use.</param>
            <param name="matrix">The computed matrix.</param>
            <param name="flags">Flags to indicate how to compute the matrix.</param>
            <summary>Computes a <see cref="T:SkiaSharp.SKMatrix" /> from the specified distance along the path.</summary>
            <returns>Returns false if there is no path, or a zero-length path was specified, in which case matrix is unchanged.</returns>
            <remarks>Distance is pinned to 0 &lt;= distance &lt;= <see cref="P:SkiaSharp.SKPathMeasure.Length" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPathMeasure.GetPosition(System.Single,SkiaSharp.SKPoint@)">
            <param name="distance">The distance to use.</param>
            <param name="position">The position of a point along the current contour.</param>
            <summary>Computes the corresponding position from the specified distance along the path.</summary>
            <returns>Returns false if there is no path, or a zero-length path was specified, in which case position is unchanged.</returns>
            <remarks>Distance is pinned to 0 &lt;= distance &lt;= <see cref="P:SkiaSharp.SKPathMeasure.Length" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPathMeasure.GetPositionAndTangent(System.Single,SkiaSharp.SKPoint@,SkiaSharp.SKPoint@)">
            <param name="distance">The distance to use. </param>
            <param name="position">The position of a point along the current contour.</param>
            <param name="tangent">The tangent along the current contour.</param>
            <summary>Computes the corresponding position and tangent from the specified distance along the path.</summary>
            <returns>Returns false if there is no path, or a zero-length path was specified, in which case position and tangent are unchanged.</returns>
            <remarks>Distance is pinned to 0 &lt;= distance &lt;= <see cref="P:SkiaSharp.SKPathMeasure.Length" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPathMeasure.GetSegment(System.Single,System.Single,SkiaSharp.SKPath,System.Boolean)">
            <param name="start">The starting offset of the segment.</param>
            <param name="stop">The end offset of the segment.</param>
            <param name="dst">The path to hold the new segment.</param>
            <param name="startWithMoveTo">If true, begin the path segment with a <see cref="M:SkiaSharp.SKPath.MoveTo" />.</param>
            <summary>Given a start and stop distance, update the destination path with the intervening segment(s).</summary>
            <returns>Returns false if the segment is zero-length, otherwise returns true.</returns>
            <remarks>The start and stop parameters are pinned to 0..<see cref="P:SkiaSharp.SKPathMeasure.Length" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPathMeasure.GetTangent(System.Single,SkiaSharp.SKPoint@)">
            <param name="distance">The distance to use.</param>
            <param name="tangent">The tangent along the current contour.</param>
            <summary>Computes the corresponding tangent from the specified distance along the path.</summary>
            <returns>Returns false if there is no path, or a zero-length path was specified, in which case position and tangent are unchanged.</returns>
            <remarks>Distance is pinned to 0 &lt;= distance &lt;= <see cref="P:SkiaSharp.SKPathMeasure.Length" />.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPathMeasure.IsClosed">
            <summary>Gets a value indicating if the current contour is closed.</summary>
            <value>Returns true if the current contour is closed.</value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPathMeasure.Length">
            <summary>Gets the total length of the current contour, or 0 if no path is associated.</summary>
            <value>The total length of the current contour.</value>
            <remarks />
        </member>
        <member name="M:SkiaSharp.SKPathMeasure.NextContour">
            <summary>Move to the next contour in the path.</summary>
            <returns>Returns true if another one exists, otherwise false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPathMeasure.SetPath(SkiaSharp.SKPath,System.Boolean)">
            <param name="path">The path to use, or null.</param>
            <param name="forceClosed">Controls whether or not the path is treated as closed.</param>
            <summary>Reset the path measure with the specified path.</summary>
            <remarks>The path must remain valid for the lifetime of the measure object, or until <see cref="M:SkiaSharp.SKPathMeasure.SetPath" /> is called with a different path (or null), since the measure object keeps a reference to the path object (does not copy its data).</remarks>
        </member>
        <member name="T:SkiaSharp.SKPathMeasureMatrixFlags">
            <summary>Flags to indicate how to compute a matrix from a position along a path.</summary>
            <remarks>This is used with <see cref="M:SkiaSharp.SKPathMeasure.GetMatrix" />.</remarks>
        </member>
        <member name="F:SkiaSharp.SKPathMeasureMatrixFlags.GetPosition">
            <summary>Use the coordinates of the point along the path.</summary>
        </member>
        <member name="F:SkiaSharp.SKPathMeasureMatrixFlags.GetPositionAndTangent">
            <summary>Use the coordinates of the point and the tangent along the path.</summary>
        </member>
        <member name="F:SkiaSharp.SKPathMeasureMatrixFlags.GetTangent">
            <summary>Use the coordinates of the tangent along the path.</summary>
        </member>
        <member name="T:SkiaSharp.SKPathOp">
            <summary>The logical operations that can be performed when combining two paths using <see cref="M:SkiaSharp.SKPath.Op" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKPathOp.Difference">
            <summary>Subtract the op path from the current path.</summary>
        </member>
        <member name="F:SkiaSharp.SKPathOp.Intersect">
            <summary>Intersect the two paths.</summary>
        </member>
        <member name="F:SkiaSharp.SKPathOp.ReverseDifference">
            <summary>Subtract the current path from the op path.</summary>
        </member>
        <member name="F:SkiaSharp.SKPathOp.Union">
            <summary>Union (inclusive-or) the two paths.</summary>
        </member>
        <member name="F:SkiaSharp.SKPathOp.Xor">
            <summary>Exclusive-or the two paths.</summary>
        </member>
        <member name="T:SkiaSharp.SKPathSegmentMask">
            <summary>The flags used by <see cref="P:SkiaSharp.SKPath.SegmentMasks" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKPathSegmentMask.Conic">
            <summary>The path contains one or more conic segments.</summary>
        </member>
        <member name="F:SkiaSharp.SKPathSegmentMask.Cubic">
            <summary>The path contains one or more cubic segments.</summary>
        </member>
        <member name="F:SkiaSharp.SKPathSegmentMask.Line">
            <summary>The path contains one or more line segments.</summary>
        </member>
        <member name="F:SkiaSharp.SKPathSegmentMask.Quad">
            <summary>The path contains one or more quad segments.</summary>
        </member>
        <member name="T:SkiaSharp.SKPathVerb">
            <summary>Verbs contained in an <see cref="T:SkiaSharp.SKPath" />.</summary>
            <remarks>In the description below, the number of points returned represents the number of valid entries on the return array of points that is passed to <see cref="M:SkiaSharp.SKPath+Iterator.Next" /> or <see cref="M:SkiaSharp.SKPath+RawIterator.Next" />.</remarks>
        </member>
        <member name="F:SkiaSharp.SKPathVerb.Close">
            <summary>Close path, a call to <see cref="M:SkiaSharp.SKPath+Iterator.Next" /> or <see cref="M:SkiaSharp.SKPath+RawIterator.Next" /> will return one point (countour’s <see cref="M:SkiaSharp.SKPath.MoveTo" /> point).</summary>
        </member>
        <member name="F:SkiaSharp.SKPathVerb.Conic">
            <summary>Conic path, a call to <see cref="M:SkiaSharp.SKPath+Iterator.Next" /> or <see cref="M:SkiaSharp.SKPath+RawIterator.Next" /> will return three points, plus the <see cref="M:SkiaSharp.SKPath+RawIterator.ConicWeight" /> point.</summary>
        </member>
        <member name="F:SkiaSharp.SKPathVerb.Cubic">
            <summary>Cubic path, a call to <see cref="M:SkiaSharp.SKPath+Iterator.Next" /> or <see cref="M:SkiaSharp.SKPath+RawIterator.Next" /> will return four points.</summary>
        </member>
        <member name="F:SkiaSharp.SKPathVerb.Done">
            <summary>The path is completed, points will not contain any data.</summary>
        </member>
        <member name="F:SkiaSharp.SKPathVerb.Line">
            <summary>Line path, a call to <see cref="M:SkiaSharp.SKPath+Iterator.Next" /> or <see cref="M:SkiaSharp.SKPath+RawIterator.Next" /> will return two points.</summary>
        </member>
        <member name="F:SkiaSharp.SKPathVerb.Move">
            <summary>Move command, a call to <see cref="M:SkiaSharp.SKPath+Iterator.Next" /> or <see cref="M:SkiaSharp.SKPath+RawIterator.Next" /> will return a single point.</summary>
        </member>
        <member name="F:SkiaSharp.SKPathVerb.Quad">
            <summary>Quad command, a call to <see cref="M:SkiaSharp.SKPath+Iterator.Next" /> or <see cref="M:SkiaSharp.SKPath+RawIterator.Next" /> will return three points.</summary>
        </member>
        <member name="T:SkiaSharp.SKPicture">
            <summary>Recorded drawing operations made to a <see cref="T:SkiaSharp.SKCanvas" /> to be played back at a later time.</summary>
            <remarks>This base class handles serialization and a few other miscellany.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPicture.CullRect">
            <summary>Gets the culling rectangle for this picture.</summary>
            <value>
                <para />
            </value>
            <remarks>Operations recorded into this picture that attempt to draw outside the culling rectangle might not be drawn.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPicture.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPicture.UniqueId">
            <summary>Gets the non-zero value unique among all pictures.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKPictureRecorder">
            <summary>The picture recorder is used to record drawing operations made to a <see cref="T:SkiaSharp.SKCanvas" /> and stored in a <see cref="T:SkiaSharp.SKPicture" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKPictureRecorder">
            <summary>Creates a new instance of the <see cref="T:SkiaSharp.SKPictureRecorder" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPictureRecorder.BeginRecording(SkiaSharp.SKRect)">
            <param name="cullRect">The culling rectangle for the new picture.</param>
            <summary>Start the recording process and return the recording canvas.</summary>
            <returns>Returns the current recording canvas. The same can be retrieved using <see cref="P:SkiaSharp.SKPictureRecorder.RecordingCanvas" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPictureRecorder.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPictureRecorder.EndRecording">
            <summary>Signal that the caller is done recording.</summary>
            <returns>Returns the <see cref="T:SkiaSharp.SKPicture" /> containing the recorded content.</returns>
            <remarks>This invalidates the canvas returned by <see cref="M:SkiaSharp.SKPictureRecorder.BeginRecording" /> and <see cref="P:SkiaSharp.SKPictureRecorder.RecordingCanvas" />.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPictureRecorder.RecordingCanvas">
            <summary>Gets the current recording canvas.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKPixelGeometry">
            <summary>Describes how LCD strips are organized for each pixel.</summary>
            <remarks>Description of how the LCD strips are arranged for each pixel. If this is unknown, or the pixels are meant to be "portable" and/or transformed before showing (e.g. rotated, scaled) then use <see cref="F:SkiaSharp.SKPixelGeometry.Unknown" />.</remarks>
        </member>
        <member name="F:SkiaSharp.SKPixelGeometry.BgrHorizontal">
            <summary>Pixels are made up horizontal blue, green and red lights.</summary>
        </member>
        <member name="F:SkiaSharp.SKPixelGeometry.BgrVertical">
            <summary>Pixels are made up vertical blue, green and red lights.</summary>
        </member>
        <member name="F:SkiaSharp.SKPixelGeometry.RgbHorizontal">
            <summary>Pixels are made up horizontal red, green and blue lights.</summary>
        </member>
        <member name="F:SkiaSharp.SKPixelGeometry.RgbVertical">
            <summary>Pixels are made up vertical red, green and blue lights.</summary>
        </member>
        <member name="F:SkiaSharp.SKPixelGeometry.Unknown">
            <summary>Use if the order is not known or the pixels are meant to be "portable" and/or transformed before showing (e.g. rotated, scaled).</summary>
        </member>
        <member name="T:SkiaSharp.SKPixelSerializer">
            <summary>Represents a mechanism for serializing pixels.</summary>
            <remarks />
        </member>
        <member name="M:SkiaSharp.SKPixelSerializer.Create(System.Func{SkiaSharp.SKPixmap,SkiaSharp.SKData})">
            <param name="onEncode">The delegate to use to serialize the pixel data.</param>
            <summary>Create a new pixel serializer using the specified delegate to encode the pixel data.</summary>
            <returns>Returns an instance of the <see cref="T:SkiaSharp.SKPixelSerializer" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPixelSerializer.Create(System.Func{System.IntPtr,System.IntPtr,System.Boolean},System.Func{SkiaSharp.SKPixmap,SkiaSharp.SKData})">
            <param name="onUseEncodedData">The delegate to use to determine whether to use the previous encoded data, or to encode another version.</param>
            <param name="onEncode">The delegate to use to serialize the pixel data.</param>
            <summary>Create a new pixel serializer using the specified delegate to encode the pixel data.</summary>
            <returns>Returns an instance of the <see cref="T:SkiaSharp.SKPixelSerializer" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPixelSerializer.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPixelSerializer.Encode(SkiaSharp.SKPixmap)">
            <param name="pixmap">The pixel data to encode.</param>
            <summary>Encode the specified pixel data.</summary>
            <returns>Returns the encoded pixel data, or <see langword="null" /> if the raw pixels should be used.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPixelSerializer.UseEncodedData(System.IntPtr,System.UInt64)">
            <param name="data">The encoded data buffer.</param>
            <param name="length">The length of the encoded data buffer.</param>
            <summary>Determines whether the serializer wants to use the specified encoded data instead of encoding a new version.</summary>
            <returns>Returns <see langword="true" /> if the specified encoded data should be used, otherwise <see langword="false" /> to serialize another version.</returns>
            <remarks>If this method returns <see langword="true" />, then <see cref="M:SkiaSharp.SKPixelSerializer.Encode" /> may not be called to encode the source data.</remarks>
        </member>
        <member name="T:SkiaSharp.SKPixmap">
            <summary>Pairs <see cref="T:SkiaSharp.SKImageInfo" /> with actual pixels and rowbytes.</summary>
            <remarks>This class does not try to manage the lifetime of the pixel memory (nor the colortable if provided).</remarks>
        </member>
        <member name="C:SkiaSharp.SKPixmap">
            <summary>Creates an empty instance of <see cref="T:SkiaSharp.SKPixmap" />.</summary>
            <remarks />
        </member>
        <member name="C:SkiaSharp.SKPixmap(SkiaSharp.SKImageInfo,System.IntPtr)">
            <param name="info">The image information of the pixels.</param>
            <param name="addr">The memory address of the pixels.</param>
            <summary>Creates an instance of <see cref="T:SkiaSharp.SKPixmap" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKPixmap(SkiaSharp.SKImageInfo,System.IntPtr,System.Int32,SkiaSharp.SKColorTable)">
            <param name="info">The image information of the pixels.</param>
            <param name="addr">The memory address of the pixels.</param>
            <param name="rowBytes">The number of bytes per row.</param>
            <param name="ctable">The color table.</param>
            <summary>Creates an instance of <see cref="T:SkiaSharp.SKPixmap" />.</summary>
            <remarks />
        </member>
        <member name="P:SkiaSharp.SKPixmap.AlphaType">
            <summary>Gets the alpha type.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:SkiaSharp.SKPixmap.BytesPerPixel">
            <summary>Gets the number of bytes per pixel.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:SkiaSharp.SKPixmap.ColorSpace">
            <summary>Gets the color space.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPixmap.ColorTable">
            <summary>Gets the color table.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:SkiaSharp.SKPixmap.ColorType">
            <summary>Gets the color type.</summary>
            <value />
            <remarks />
        </member>
        <member name="M:SkiaSharp.SKPixmap.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPixmap.Encode(SkiaSharp.SKEncodedImageFormat,System.Int32)">
            <param name="encoder">The file format used to encode the pixmap.</param>
            <param name="quality">The quality level to use for the pixmap.</param>
            <summary>Encodes the pixmap using the specified format.</summary>
            <returns>Returns the <see cref="T:SkiaSharp.SKData" /> wrapping the encoded pixmap.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPixmap.Encode(SkiaSharp.SKWStream,SkiaSharp.SKEncodedImageFormat,System.Int32)">
            <param name="dst">The stream to write the encoded pixmap to.</param>
            <param name="encoder">The file format used to encode the pixmap.</param>
            <param name="quality">The quality level to use for the pixmap.</param>
            <summary>Encodes the pixmap using the specified format.</summary>
            <returns>Returns <see langword="true" /> on success, or <see langword="false" /> if there was an error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPixmap.Encode(SkiaSharp.SKWStream,SkiaSharp.SKPixmap,SkiaSharp.SKEncodedImageFormat,System.Int32)">
            <param name="dst">The stream to write the encoded pixmap to.</param>
            <param name="src">The pixmap to encode.</param>
            <param name="encoder">The file format used to encode the pixmap.</param>
            <param name="quality">The quality level to use for the pixmap.</param>
            <summary>Encodes the pixmap using the specified format.</summary>
            <returns>Returns <see langword="true" /> on success, or <see langword="false" /> if there was an error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPixmap.GetPixels">
            <summary>Returns the memory address of the pixels.</summary>
            <returns />
            <remarks />
        </member>
        <member name="P:SkiaSharp.SKPixmap.Height">
            <summary>Gets the image height.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:SkiaSharp.SKPixmap.Info">
            <summary>Gets the image info.</summary>
            <value />
            <remarks />
        </member>
        <member name="M:SkiaSharp.SKPixmap.ReadPixels(SkiaSharp.SKPixmap)">
            <param name="pixmap">The pixmap to read the pixel data into.</param>
            <summary>Copies the pixels from the image into the specified pixmap.</summary>
            <returns>Returns <see langword="true" /> if the pexels were read, or <see langword="false" /> if there was an error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPixmap.ReadPixels(SkiaSharp.SKImageInfo,System.IntPtr,System.Int32)">
            <param name="dstInfo">The image information describing the destination pixel buffer.</param>
            <param name="dstPixels">The pixel buffer to read the pixel data into.</param>
            <param name="dstRowBytes">The number of bytes in each row of in the destination buffer.</param>
            <summary>Copies the pixels from the image into the specified buffer.</summary>
            <returns>Returns <see langword="true" /> if the pixels were read, or <see langword="false" /> if there was an error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPixmap.ReadPixels(SkiaSharp.SKPixmap,System.Int32,System.Int32)">
            <param name="pixmap">The pixmap to read the pixel data into.</param>
            <param name="srcX">The source x-coordinate to start reading from.</param>
            <param name="srcY">The source y-coordinate to start reading from.</param>
            <summary>Copies the pixels from the image into the specified pixmap.</summary>
            <returns>Returns <see langword="true" /> if the pixels were read, or <see langword="false" /> if there was an error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPixmap.ReadPixels(SkiaSharp.SKImageInfo,System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <param name="dstInfo">The image information describing the destination pixel buffer.</param>
            <param name="dstPixels">The pixel buffer to read the pixel data into.</param>
            <param name="dstRowBytes">The number of bytes in each row of in the destination buffer.</param>
            <param name="srcX">The source x-coordinate to start reading from.</param>
            <param name="srcY">The source y-coordinate to start reading from.</param>
            <summary>Copies the pixels from the image into the specified buffer.</summary>
            <returns>Returns <see langword="true" /> if the pixels were read, or <see langword="false" /> if there was an error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPixmap.Reset">
            <summary>Reset the pixmap to an empty pixmap.</summary>
            <remarks />
        </member>
        <member name="M:SkiaSharp.SKPixmap.Reset(SkiaSharp.SKImageInfo,System.IntPtr,System.Int32,SkiaSharp.SKColorTable)">
            <param name="info">The image information of the pixels.</param>
            <param name="addr">The memory address of the pixels.</param>
            <param name="rowBytes">The number of bytes per row.</param>
            <param name="ctable">The color table.</param>
            <summary>Resets the pixmap to the specified pixels.</summary>
            <remarks />
        </member>
        <member name="M:SkiaSharp.SKPixmap.Resize(SkiaSharp.SKPixmap,SkiaSharp.SKPixmap,SkiaSharp.SKBitmapResizeMethod)">
            <param name="dst">The pixmap to store the resized pixels.</param>
            <param name="src">The pixmap to resize.</param>
            <param name="method">The resize method.</param>
            <summary>Resize the specified pixmap using the specified method.</summary>
            <returns>Returns <see langword="true" /> if the resize operation can be performed, otherwise <see langword="false" />.</returns>
            <remarks />
        </member>
        <member name="P:SkiaSharp.SKPixmap.RowBytes">
            <summary>Gets the number of bytes per row.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:SkiaSharp.SKPixmap.Width">
            <summary>Gets the image width.</summary>
            <value />
            <remarks />
        </member>
        <member name="M:SkiaSharp.SKPixmap.WithAlphaType(SkiaSharp.SKAlphaType)">
            <param name="newAlphaType">The alpha/transparency type.</param>
            <summary>Creates a new <see cref="T:SkiaSharp.SKPixmap" /> with the same properties as this <see cref="T:SkiaSharp.SKPixmap" />, but with the specified transparency type.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKPixmap" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPixmap.WithColorSpace(SkiaSharp.SKColorSpace)">
            <param name="newColorSpace">The color space.</param>
            <summary>Creates a new <see cref="T:SkiaSharp.SKPixmap" /> with the same properties as this <see cref="T:SkiaSharp.SKPixmap" />, but with the specified color space.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKPixmap" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPixmap.WithColorType(SkiaSharp.SKColorType)">
            <param name="newColorType">The color type.</param>
            <summary>Creates a new <see cref="T:SkiaSharp.SKPixmap" /> with the same properties as this <see cref="T:SkiaSharp.SKPixmap" />, but with the specified color type.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKPixmap" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKPMColor">
            <summary>32-bit ARGB premultiplied color value.</summary>
            <remarks>The byte order for this value is configuration dependent. This is different from <see cref="T:SkiaSharp.SKColor" />, which is unpremultiplied, and is always in the same byte order.</remarks>
        </member>
        <member name="C:SkiaSharp.SKPMColor(System.UInt32)">
            <param name="value">The integer value of the premultiplied color.</param>
            <summary>Creates a color from the specified integer.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPMColor.Alpha">
            <summary>Gets the alpha component of the color.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPMColor.Blue">
            <summary>Gets the blue component of the color.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPMColor.Equals(System.Object)">
            <param name="other">The object to compare with the current object.</param>
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>Returns <see langword="true" /> if the specified object is equal to the current object; otherwise, <see langword="false" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPMColor.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>Returns a hash code for the current object.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPMColor.Green">
            <summary>Gets the green component of the color.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPMColor.op_Equality(SkiaSharp.SKPMColor,SkiaSharp.SKPMColor)">
            <param name="left">The first color to compare.</param>
            <param name="right">The second color to compare.</param>
            <summary>Indicates whether two <see cref="T:SkiaSharp.SKPMColor" /> objects are equal.</summary>
            <returns>Returns <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />, otherwise <see langword="false" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPMColor.op_Explicit(SkiaSharp.SKColor)~SkiaSharp.SKPMColor">
            <param name="color">The unpremultiplied color to convert.</param>
            <summary>Converts an unpremultiplied <see cref="T:SkiaSharp.SKColor" /> to the premultiplied <see cref="T:SkiaSharp.SKPMColor" />.</summary>
            <returns>Returns the new premultiplied <see cref="T:SkiaSharp.SKPMColor" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPMColor.op_Explicit(SkiaSharp.SKPMColor)~SkiaSharp.SKColor">
            <param name="color">The premultiplied color to convert.</param>
            <summary>Converts a premultiplied <see cref="T:SkiaSharp.SKPMColor" /> to the unpremultiplied <see cref="T:SkiaSharp.SKColor" />.</summary>
            <returns>Returns the new unpremultiplied <see cref="T:SkiaSharp.SKColor" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPMColor.op_Explicit(SkiaSharp.SKPMColor)~System.UInt32">
            <param name="color">The color to convert.</param>
            <summary>Converts a <see cref="T:SkiaSharp.SKPMColor" /> to a UInt32.</summary>
            <returns>The UInt32 value for the color.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPMColor.op_Implicit(System.UInt32)~SkiaSharp.SKPMColor">
            <param name="color">The UInt32 representation of a color.</param>
            <summary>Converts a UInt32 to a <see cref="T:SkiaSharp.SKPMColor" />.</summary>
            <returns>The new <see cref="T:SkiaSharp.SKPMColor" /> instance.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPMColor.op_Inequality(SkiaSharp.SKPMColor,SkiaSharp.SKPMColor)">
            <param name="left">The first color to compare.</param>
            <param name="right">The second color to compare.</param>
            <summary>Indicates whether two <see cref="T:SkiaSharp.SKPMColor" /> objects are different.</summary>
            <returns>Returns <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />, otherwise <see langword="false" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPMColor.PreMultiply(SkiaSharp.SKColor)">
            <param name="color">The unpremultiplied color to convert.</param>
            <summary>Converts an unpremultiplied <see cref="T:SkiaSharp.SKColor" /> to a premultiplied <see cref="T:SkiaSharp.SKPMColor" />.</summary>
            <returns>Returns the new premultiplied <see cref="T:SkiaSharp.SKPMColor" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPMColor.PreMultiply(SkiaSharp.SKColor[])">
            <param name="colors">The unpremultiplied colors to convert.</param>
            <summary>Converts an array of unpremultiplied <see cref="T:SkiaSharp.SKColor" />s to an array of premultiplied <see cref="T:SkiaSharp.SKPMColor" />s.</summary>
            <returns>Returns the new array of premultiplied <see cref="T:SkiaSharp.SKPMColor" />s.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPMColor.Red">
            <summary>Gets the red component of the color.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPMColor.ToString">
            <summary>Returns the color as a string in the format: #AARRGGBB.</summary>
            <returns>
                <para />
            </returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPMColor.UnPreMultiply(SkiaSharp.SKPMColor)">
            <param name="pmcolor">The premultiplied color to convert.</param>
            <summary>Converts a premultiplied <see cref="T:SkiaSharp.SKPMColor" /> to the unpremultiplied <see cref="T:SkiaSharp.SKColor" />.</summary>
            <returns>Returns the new unpremultiplied <see cref="T:SkiaSharp.SKColor" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPMColor.UnPreMultiply(SkiaSharp.SKPMColor[])">
            <param name="pmcolors">The premultiplied colors to convert.</param>
            <summary>Converts an array of premultiplied <see cref="T:SkiaSharp.SKPMColor" />s to an array of unpremultiplied <see cref="T:SkiaSharp.SKColor" />s.</summary>
            <returns>Returns the new array of unpremultiplied <see cref="T:SkiaSharp.SKColor" />s.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKPoint">
            <summary>Represents an ordered pair of floating-point x- and y-coordinates that defines a point in a two-dimensional plane.</summary>
            <remarks>To convert a <see cref="T:SkiaSharp.SKPoint" /> to a <see cref="T:SkiaSharp.SKPointI" />, use <see cref="M:SkiaSharp.PointI.Round(SkiaSharp.Point)" /> or <see cref="M:SkiaSharp.PointI.Truncate(SkiaSharp.Point)" />.</remarks>
        </member>
        <member name="C:SkiaSharp.SKPoint(System.Single,System.Single)">
            <param name="x">The horizontal position of the point.</param>
            <param name="y">The horizontal position of the point.</param>
            <summary>Creates a new instance of a point with the specified coordinates.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.Add(SkiaSharp.SKPoint,SkiaSharp.SKPoint)">
            <param name="pt">The point to translate.</param>
            <param name="sz">The offset value.</param>
            <summary>Translates a given point by a specified offset.</summary>
            <returns>Returns the translated point.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.Add(SkiaSharp.SKPoint,SkiaSharp.SKPointI)">
            <param name="pt">The point to translate.</param>
            <param name="sz">The offset value.</param>
            <summary>Translates a given point by a specified offset.</summary>
            <returns>Returns the translated point.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.Add(SkiaSharp.SKPoint,SkiaSharp.SKSize)">
            <param name="pt">The point to translate.</param>
            <param name="sz">The offset size.</param>
            <summary>Translates a given point by a specified size.</summary>
            <returns>Returns the translated point.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.Add(SkiaSharp.SKPoint,SkiaSharp.SKSizeI)">
            <param name="pt">The point to translate</param>
            <param name="sz">The offset size.</param>
            <summary>Translates a given point by a specified size.</summary>
            <returns>Returns the translated point.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKPoint.Empty">
            <summary>Represents a new instance of the <see cref="T:SkiaSharp.Point" /> class with member data left uninitialized.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.Equals(System.Object)">
            <param name="obj">The <see cref="T:System.Object" /> to test.</param>
            <summary>Specifies whether this <see cref="T:SkiaSharp.Point" /> contains the same coordinates as the specified <see cref="T:System.Object" />.</summary>
            <returns>This method returns true if <paramref name="obj" /> is a <see cref="T:SkiaSharp.Point" /> and has the same coordinates as this <see cref="T:SkiaSharp.SKPoint" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.GetHashCode">
            <summary>Calculates the hashcode for this point.</summary>
            <returns>Returns the hashcode for this point.</returns>
            <remarks>You should avoid depending on GetHashCode for unique values, as two <see cref="T:System.Drawing.Point" /> objects with the same values for their X and Y properties may return the same hash code. This behavior could change in a future release.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPoint.IsEmpty">
            <summary>Gets a value indicating whether this point is empty.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.Offset(SkiaSharp.SKPoint)">
            <param name="p">The offset value.</param>
            <summary>Translates a given point by a specified offset.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.Offset(System.Single,System.Single)">
            <param name="dx">The offset in the x-direction.</param>
            <param name="dy">The offset in the y-direction.</param>
            <summary>Translates a given point by a specified offset.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.op_Addition(SkiaSharp.SKPoint,SkiaSharp.SKPoint)">
            <param name="pt">The point to translate.</param>
            <param name="sz">The offset value.</param>
            <summary>Translates a given point by a specified offset.</summary>
            <returns>Returns the translated point.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.op_Addition(SkiaSharp.SKPoint,SkiaSharp.SKPointI)">
            <param name="pt">The point to translate.</param>
            <param name="sz">The offset value.</param>
            <summary>Translates a given point by a specified offset.</summary>
            <returns>Returns the translated point.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.op_Addition(SkiaSharp.SKPoint,SkiaSharp.SKSize)">
            <param name="pt">The point to translate.</param>
            <param name="sz">The offset size.</param>
            <summary>Translates a given point by a specified size.</summary>
            <returns>Returns the translated point.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.op_Addition(SkiaSharp.SKPoint,SkiaSharp.SKSizeI)">
            <param name="pt">The point to translate.</param>
            <param name="sz">The offset size.</param>
            <summary>Translates a given point by a specified size.</summary>
            <returns>Returns the translated point.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.op_Equality(SkiaSharp.SKPoint,SkiaSharp.SKPoint)">
            <param name="left">A <see cref="T:SkiaSharp.SKPoint" /> to compare.</param>
            <param name="right">A <see cref="T:SkiaSharp.SKPoint" /> to compare.</param>
            <summary>Compares two <see cref="T:SkiaSharp.SKPoint" /> structures. The result specifies whether the values of the <see cref="P:SkiaSharp.Point.X" /> and <see cref="P:SkiaSharp.Point.Y" /> properties of the two <see cref="T:SkiaSharp.SKPoint" /> structures are equal.</summary>
            <returns>true if the <see cref="P:SkiaSharp.SKPoint.X" /> and <see cref="P:SkiaSharp.SKPoint.Y" /> values of the left and right <see cref="T:SkiaSharp.SKPoint" /> structures are equal; otherwise, false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.op_Inequality(SkiaSharp.SKPoint,SkiaSharp.SKPoint)">
            <param name="left">A <see cref="T:SkiaSharp.SKPoint" /> to compare.</param>
            <param name="right">A <see cref="T:SkiaSharp.SKPoint" /> to compare.</param>
            <summary>Determines whether the coordinates of the specified points are not equal.</summary>
            <returns>true if the <see cref="P:SkiaSharp.SKPoint.X" /> and <see cref="P:SkiaSharp.SKPoint.Y" /> values of the left and right <see cref="T:SkiaSharp.SKPoint" /> structures differ; otherwise, false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.op_Subtraction(SkiaSharp.SKPoint,SkiaSharp.SKPoint)">
            <param name="pt">The <see cref="T:SkiaSharp.SKPoint" /> to translate.</param>
            <param name="sz">The point that specifies the numbers to subtract from the coordinates of <paramref name="pt" />.</param>
            <summary>Translates a given point by the negative of a specified offset.</summary>
            <returns>The translated <see cref="T:SkiaSharp.SKPoint" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.op_Subtraction(SkiaSharp.SKPoint,SkiaSharp.SKPointI)">
            <param name="pt">The <see cref="T:SkiaSharp.SKPoint" /> to translate.</param>
            <param name="sz">The point that specifies the numbers to subtract from the coordinates of <paramref name="pt" />.</param>
            <summary>Translates a given point by the negative of a specified offset.</summary>
            <returns>The translated <see cref="T:SkiaSharp.SKPoint" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.op_Subtraction(SkiaSharp.SKPoint,SkiaSharp.SKSize)">
            <param name="pt">The <see cref="T:SkiaSharp.SKPoint" /> to translate.</param>
            <param name="sz">The <see cref="T:SkiaSharp.SKSize" /> that specifies the numbers to subtract from the coordinates of <paramref name="pt" />.</param>
            <summary>Translates a <see cref="T:SkiaSharp.SKPoint" /> by the negative of a given <see cref="T:SkiaSharp.SKSize" />.</summary>
            <returns>The translated <see cref="T:SkiaSharp.SKPoint" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.op_Subtraction(SkiaSharp.SKPoint,SkiaSharp.SKSizeI)">
            <param name="pt">The <see cref="T:SkiaSharp.SKPoint" /> to translate.</param>
            <param name="sz">The <see cref="T:SkiaSharp.SKSizeI" /> that specifies the numbers to subtract from the coordinates of <paramref name="pt" />.</param>
            <summary>Translates a <see cref="T:SkiaSharp.SKPoint" /> by the negative of a given <see cref="T:SkiaSharp.SKSizeI" />.</summary>
            <returns>The translated <see cref="T:SkiaSharp.SKPoint" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.Subtract(SkiaSharp.SKPoint,SkiaSharp.SKPoint)">
            <param name="pt">The <see cref="T:SkiaSharp.SKPoint" /> to translate.</param>
            <param name="sz">The offset that specifies the numbers to subtract from the coordinates of <paramref name="pt" />.</param>
            <summary>Translates a given point by the negative of a specified offset.</summary>
            <returns>The translated <see cref="T:SkiaSharp.SKPoint" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.Subtract(SkiaSharp.SKPoint,SkiaSharp.SKPointI)">
            <param name="pt">The <see cref="T:SkiaSharp.SKPoint" /> to translate.</param>
            <param name="sz">The offset that specifies the numbers to subtract from the coordinates of <paramref name="pt" />.</param>
            <summary>Translates a given point by the negative of a specified offset.</summary>
            <returns>The translated <see cref="T:SkiaSharp.SKPoint" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.Subtract(SkiaSharp.SKPoint,SkiaSharp.SKSize)">
            <param name="pt">The <see cref="T:SkiaSharp.SKPoint" /> to translate.</param>
            <param name="sz">The <see cref="T:SkiaSharp.SKSize" /> that specifies the numbers to subtract from the coordinates of <paramref name="pt" />.</param>
            <summary>Translates a <see cref="T:SkiaSharp.SKPoint" /> by the negative of a specified size.</summary>
            <returns>The translated <see cref="T:SkiaSharp.SKPoint" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.Subtract(SkiaSharp.SKPoint,SkiaSharp.SKSizeI)">
            <param name="pt">The <see cref="T:SkiaSharp.SKPoint" /> to translate.</param>
            <param name="sz">The <see cref="T:SkiaSharp.SKSize" /> that specifies the numbers to subtract from the coordinates of <paramref name="pt" />.</param>
            <summary>Translates a <see cref="T:SkiaSharp.SKPoint" /> by the negative of a specified size.</summary>
            <returns>The translated <see cref="T:SkiaSharp.SKPoint" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint.ToString">
            <summary>Converts this <see cref="T:SkiaSharp.SKPoint" /> to a human readable string.</summary>
            <returns>A string that represents this <see cref="T:SkiaSharp.SKPoint" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPoint.X">
            <summary>Gets or sets the x-coordinate of this <see cref="T:SkiaSharp.SKPoint" />.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPoint.Y">
            <summary>Gets or sets the x-coordinate of this <see cref="T:SkiaSharp.SKPoint" />.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKPoint3">
            <summary>Represents an ordered pair of floating-point x-, y- and z-coordinates that defines a point in a three-dimensional plane.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKPoint3(System.Single,System.Single,System.Single)">
            <param name="x">The x-coordinate of the point.</param>
            <param name="y">The y-coordinate of the point.</param>
            <param name="z">The z-coordinate of the point.</param>
            <summary>Creates a new instance of a 3D point with the specified coordinates.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint3.Add(SkiaSharp.SKPoint3,SkiaSharp.SKPoint3)">
            <param name="pt">The point to translate.</param>
            <param name="sz">The offset value.</param>
            <summary>Translates a given point by a specified offset.</summary>
            <returns>Returns the translated point.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKPoint3.Empty">
            <summary>Represents a new instance of the <see cref="T:SkiaSharp.SKPoint3" /> class with member data left uninitialized.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint3.Equals(System.Object)">
            <param name="obj">The <see cref="T:System.Object" /> to test.</param>
            <summary>Specifies whether this <see cref="T:SkiaSharp.SKPoint3" /> contains the same coordinates as the specified <see cref="T:System.Object" />.</summary>
            <returns>This method returns true if <paramref name="obj" /> is a <see cref="T:SkiaSharp.SKPoint3" /> and has the same coordinates as this <see cref="T:SkiaSharp.SKPoint3" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint3.GetHashCode">
            <summary>Calculates the hashcode for this point.</summary>
            <returns>Returns the hashcode for this point.</returns>
            <remarks>You should avoid depending on GetHashCode for unique values, as two <see cref="T:System.Drawing.Point" /> objects with the same values for their X, Y and Z properties may return the same hash code. This behavior could change in a future release.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPoint3.IsEmpty">
            <summary>Gets a value indicating whether this <see cref="T:SkiaSharp.SKPoint3" /> is empty.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint3.op_Addition(SkiaSharp.SKPoint3,SkiaSharp.SKPoint3)">
            <param name="pt">The point to translate.</param>
            <param name="sz">The offset value.</param>
            <summary>Translates a given point by a specified offset.</summary>
            <returns>Returns the translated point.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint3.op_Equality(SkiaSharp.SKPoint3,SkiaSharp.SKPoint3)">
            <param name="left">A <see cref="T:SkiaSharp.SKPoint3" /> to compare.</param>
            <param name="right">A <see cref="T:SkiaSharp.SKPoint3" /> to compare.</param>
            <summary>Compares two <see cref="T:SkiaSharp.SKPoint3" /> structures. The result specifies whether the values of the <see cref="P:SkiaSharp.Point3.X" /> and <see cref="P:SkiaSharp.Point3.Y" /> properties of the two <see cref="T:SkiaSharp.SKPoint3" /> structures are equal.</summary>
            <returns>true if the <see cref="P:SkiaSharp.SKPoint3.X" />, <see cref="P:SkiaSharp.SKPoint3.Y" /> and <see cref="P:SkiaSharp.SKPoint3.Z" /> values of the left and right <see cref="T:SkiaSharp.SKPoint" /> structures are equal; otherwise, false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint3.op_Inequality(SkiaSharp.SKPoint3,SkiaSharp.SKPoint3)">
            <param name="left">A <see cref="T:SkiaSharp.SKPoint3" /> to compare.</param>
            <param name="right">A <see cref="T:SkiaSharp.SKPoint3" /> to compare.</param>
            <summary>Determines whether the coordinates of the specified points are not equal.</summary>
            <returns>true if the <see cref="P:SkiaSharp.SKPoint3.X" />, <see cref="P:SkiaSharp.SKPoint3.Y" /> and <see cref="P:SkiaSharp.SKPoint3.Z" /> values of the left and right <see cref="T:SkiaSharp.SKPoint" /> structures differ; otherwise, false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint3.op_Subtraction(SkiaSharp.SKPoint3,SkiaSharp.SKPoint3)">
            <param name="pt">The point to translate.</param>
            <param name="sz">The offset value.</param>
            <summary>Translates a given point by the negative of a specified offset.</summary>
            <returns>Returns the translated point.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint3.Subtract(SkiaSharp.SKPoint3,SkiaSharp.SKPoint3)">
            <param name="pt">The point to translate.</param>
            <param name="sz">The offset value.</param>
            <summary>Translates a given point by the negative of a specified offset.</summary>
            <returns>Returns the translated point.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPoint3.ToString">
            <summary>Converts this <see cref="T:SkiaSharp.SKPoint3" /> to a human readable string.</summary>
            <returns>A string that represents this <see cref="T:SkiaSharp.SKPoint3" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPoint3.X">
            <summary>Gets or sets the x-coordinate of this <see cref="T:SkiaSharp.SKPoint3" />.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPoint3.Y">
            <summary>Gets or sets the y-coordinate of this <see cref="T:SkiaSharp.SKPoint3" />.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPoint3.Z">
            <summary>Gets or sets the z-coordinate of this <see cref="T:SkiaSharp.SKPoint3" />.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKPointI">
            <summary>Represents an ordered pair of integer x- and y-coordinates that defines a point in a two-dimensional plane.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKPointI(SkiaSharp.SKSizeI)">
            <param name="sz">A <see cref="T:SkiaSharp.SKSizeI" /> that specifies the coordinates for the new <see cref="T:SkiaSharp.SKPointI" />.</param>
            <summary>Initializes a new instance of the <see cref="T:SkiaSharp.SKPointI" /> class from a <see cref="T:SkiaSharp.SKSizeI" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKPointI(System.Int32,System.Int32)">
            <param name="x">The horizontal position of the point.</param>
            <param name="y">The vertical position of the point.</param>
            <summary>Initializes a point from two floating point values.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.Add(SkiaSharp.SKPointI,SkiaSharp.SKPointI)">
            <param name="pt">The point to translate.</param>
            <param name="sz">The point that specifies the numer to add to the coordinates of <paramref name="pt" />.</param>
            <summary>Translates a given <see cref="T:SkiaSharp.SKPointI" /> by the specified point.</summary>
            <returns>The translated point.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.Add(SkiaSharp.SKPointI,SkiaSharp.SKSizeI)">
            <param name="pt">The point to translate.</param>
            <param name="sz">The size that specifies the numer to add to the coordinates of <paramref name="pt" />.</param>
            <summary>Translates a given <see cref="T:SkiaSharp.SKPointI" /> by the specified <see cref="T:SkiaSharp.SKSizeI" />.</summary>
            <returns>The translated point.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.Ceiling(SkiaSharp.SKPoint)">
            <param name="value">The <see cref="T:SkiaSharp.SKPoint" /> to convert.</param>
            <summary>Converts the specified <see cref="T:SkiaSharp.SKPoint" /> to a <see cref="T:SkiaSharp.SKPointI" /> by rounding the values of the <see cref="T:SkiaSharp.SKPoint" /> to the next higher integer values.</summary>
            <returns>The <see cref="T:SkiaSharp.SKPointI" /> this method converts to.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKPointI.Empty">
            <summary>Represents a new instance of the <see cref="T:SkiaSharp.SKPointI" /> class with member data left uninitialized.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.Equals(System.Object)">
            <param name="obj">The <see cref="T:System.Object" /> to test.</param>
            <summary>Specifies whether this <see cref="T:SkiaSharp.SKPointI" /> contains the same coordinates as the specified <see cref="T:System.Object" />.</summary>
            <returns>This method returns true if <paramref name="obj" /> is a <see cref="T:SkiaSharp.SKPointI" /> and has the same coordinates as this <see cref="T:SkiaSharp.SKPointI" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.GetHashCode">
            <summary>Calculates the hashcode for this point.</summary>
            <returns>Returns the hashcode for this point.</returns>
            <remarks>You should avoid depending on GetHashCode for unique values, as two point objects with the same values for their X and Y properties may return the same hash code. This behavior could change in a future release.</remarks>
        </member>
        <member name="P:SkiaSharp.SKPointI.IsEmpty">
            <summary>Gets a value indicating whether this <see cref="T:SkiaSharp.SKPointI" /> is empty.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.Offset(SkiaSharp.SKPointI)">
            <param name="p">The <see cref="T:SkiaSharp.SKPointI" /> used to offset this <see cref="T:SkiaSharp.SKPointI" />.</param>
            <summary>Translates this <see cref="T:SkiaSharp.SKPointI" /> by the specified <see cref="T:SkiaSharp.SKPointI" />.</summary>
            <remarks>This method adjusts the <see cref="P:SkiaSharp.PointI.X" /> and <see cref="P:SkiaSharp.PointI.Y" /> values of this <see cref="T:System.Drawing.Point" /> to the sum of the <see cref="P:SkiaSharp.PointI.X" /> and <see cref="P:SkiaSharp.PointI.Y" /> values of this <see cref="T:SkiaSharp.SKPointI" /> and <paramref name="p" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.Offset(System.Int32,System.Int32)">
            <param name="dx">The amount to offset the x-coordinate.</param>
            <param name="dy">The amount to offset the y-coordinate.</param>
            <summary>Translates this <see cref="T:SkiaSharp.SKPointI" /> by the specified amount.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.op_Addition(SkiaSharp.SKPointI,SkiaSharp.SKPointI)">
            <param name="pt">The <see cref="T:SkiaSharp.SKPointI" /> to translate.</param>
            <param name="sz">A point that specifies the pair of numbers to add to the coordinates of <paramref name="pt" />.</param>
            <summary>Translates a <see cref="T:SkiaSharp.SKPointI" /> by a given offset.</summary>
            <returns>Returns the translated <see cref="T:SkiaSharp.SKPointI" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.op_Addition(SkiaSharp.SKPointI,SkiaSharp.SKSizeI)">
            <param name="pt">The <see cref="T:SkiaSharp.SKPointI" /> to translate.</param>
            <param name="sz">A <see cref="T:SkiaSharp.SKSizeI" /> that specifies the pair of numbers to add to the coordinates of <paramref name="pt" />.</param>
            <summary>Translates a <see cref="T:SkiaSharp.SKPointI" /> by a given <see cref="T:SkiaSharp.SKSizeI" />.</summary>
            <returns>Returns the translated <see cref="T:SkiaSharp.SKPointI" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.op_Equality(SkiaSharp.SKPointI,SkiaSharp.SKPointI)">
            <param name="left">A <see cref="T:SkiaSharp.SKPointI" /> to compare.</param>
            <param name="right">A <see cref="T:SkiaSharp.SKPointI" /> to compare.</param>
            <summary>Determines whether the coordinates of the specified points are equal.</summary>
            <returns>true if the <see cref="P:SkiaSharp.SKPointI.X" /> and <see cref="P:SkiaSharp.SKPointI.Y" /> values of the left and right <see cref="T:SkiaSharp.SKPoint" /> structures are equal; otherwise, false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.op_Explicit(SkiaSharp.SKPointI)~SkiaSharp.SKSizeI">
            <param name="p">The <see cref="T:SkiaSharp.SKPointI" /> to convert.</param>
            <summary>Converts an <see cref="T:SkiaSharp.SKPointI" /> into an <see cref="T:SkiaSharp.SKSizeI" />.</summary>
            <returns>The new <see cref="T:SkiaSharp.SKSizeI" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.op_Implicit(SkiaSharp.SKPointI)~SkiaSharp.SKPoint">
            <param name="p">The <see cref="T:SkiaSharp.SKPointI" /> to convert.</param>
            <summary>Converts an <see cref="T:SkiaSharp.SKPointI" /> into an <see cref="T:SkiaSharp.SKPoint" />.</summary>
            <returns>The new <see cref="T:SkiaSharp.SKPoint" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.op_Inequality(SkiaSharp.SKPointI,SkiaSharp.SKPointI)">
            <param name="left">A <see cref="T:SkiaSharp.SKPointI" /> to compare.</param>
            <param name="right">A <see cref="T:SkiaSharp.SKPointI" /> to compare.</param>
            <summary>Determines whether the coordinates of the specified points are not equal.</summary>
            <returns>true if the <see cref="P:SkiaSharp.SKPointI.X" /> and <see cref="P:SkiaSharp.SKPointI.Y" /> values of the left and right <see cref="T:SkiaSharp.SKPoint" /> structures differ; otherwise, false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.op_Subtraction(SkiaSharp.SKPointI,SkiaSharp.SKPointI)">
            <param name="pt">The <see cref="T:SkiaSharp.SKPointI" /> to translate.</param>
            <param name="sz">The point that specifies the numbers to subtract from the coordinates of <paramref name="pt" />.</param>
            <summary>Translates a <see cref="T:SkiaSharp.SKPointI" /> by the negative of a given point.</summary>
            <returns>The translated <see cref="T:SkiaSharp.SKPointI" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.op_Subtraction(SkiaSharp.SKPointI,SkiaSharp.SKSizeI)">
            <param name="pt">The <see cref="T:SkiaSharp.SKPointI" /> to translate.</param>
            <param name="sz">The <see cref="T:SkiaSharp.SKSizeI" /> that specifies the numbers to subtract from the coordinates of <paramref name="pt" />.</param>
            <summary>Translates a <see cref="T:SkiaSharp.SKPointI" /> by the negative of a given <see cref="T:SkiaSharp.SKSizeI" />.</summary>
            <returns>The translated <see cref="T:SkiaSharp.SKPointI" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.Round(SkiaSharp.SKPoint)">
            <param name="value">The <see cref="T:SkiaSharp.SKPoint" /> to convert.</param>
            <summary>Converts the specified <see cref="T:SkiaSharp.SKPoint" /> to a <see cref="T:SkiaSharp.SKPointI" /> object by rounding the <see cref="T:SkiaSharp.SKPoint" /> values to the nearest integer.</summary>
            <returns>The <see cref="T:SkiaSharp.SKPointI" /> this method converts to.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.Subtract(SkiaSharp.SKPointI,SkiaSharp.SKPointI)">
            <param name="pt">The <see cref="T:SkiaSharp.SKPointI" /> to be subtracted from.</param>
            <param name="sz">The point to subtract from the <see cref="T:SkiaSharp.SKPointI" />.</param>
            <summary>Returns the result of subtracting specified point from the specified <see cref="T:SkiaSharp.SKPointI" />.</summary>
            <returns>The <see cref="T:SkiaSharp.SKPointI" /> that is the result of the subtraction operation.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.Subtract(SkiaSharp.SKPointI,SkiaSharp.SKSizeI)">
            <param name="pt">The <see cref="T:SkiaSharp.SKPointI" /> to be subtracted from.</param>
            <param name="sz">The <see cref="T:SkiaSharp.SKSizeI" /> to subtract from the <see cref="T:SkiaSharp.SKPointI" />.</param>
            <summary>Returns the result of subtracting specified <see cref="T:SkiaSharp.SKSizeI" /> from the specified <see cref="T:SkiaSharp.SKPointI" />.</summary>
            <returns>The <see cref="T:SkiaSharp.SKPointI" /> that is the result of the subtraction operation.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.ToString">
            <summary>Converts this <see cref="T:SkiaSharp.SKPointI" /> to a human readable string.</summary>
            <returns>A string that represents this <see cref="T:SkiaSharp.SKPointI" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKPointI.Truncate(SkiaSharp.SKPoint)">
            <param name="value">The <see cref="T:SkiaSharp.SKPoint" /> to convert.</param>
            <summary>Converts the specified <see cref="T:SkiaSharp.SKPoint" /> to a <see cref="T:SkiaSharp.SKPointI" /> by truncating the values of the <see cref="T:SkiaSharp.SKPoint" />.</summary>
            <returns>The <see cref="T:SkiaSharp.SKPoint" /> this method converts to.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPointI.X">
            <summary>Gets or sets the x-coordinate of this <see cref="T:SkiaSharp.SKPointI" />.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKPointI.Y">
            <summary>Gets or sets the y-coordinate of this <see cref="T:SkiaSharp.SKPointI" /></summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKPointMode">
            <summary>Possible values to interpret the incoming array of points for the <see cref="M:SkiaSharp.SKCanvas.DrawPoints" /> method.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKPointMode.Lines">
            <summary>Interpret the data as coordinates for lines.</summary>
        </member>
        <member name="F:SkiaSharp.SKPointMode.Points">
            <summary>Interpret the data as coordinates for points.</summary>
        </member>
        <member name="F:SkiaSharp.SKPointMode.Polygon">
            <summary>Interpret the data as coordinates for polygons.</summary>
        </member>
        <member name="T:SkiaSharp.SKRect">
            <summary>Stores a set of four floating-point numbers that represent the upper-left corner and lower-right corner of a rectangle.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKRect(System.Single,System.Single,System.Single,System.Single)">
            <param name="left">The left coordinate.</param>
            <param name="top">The top coordinate.</param>
            <param name="right">The right coordinate.</param>
            <param name="bottom">The bottom coordinate.</param>
            <summary>Initializes a new instance of the <see cref="T:SkiaSharp.SKRect" /> class with the specified upper-left corner and lower-right corner.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRect.AspectFill(SkiaSharp.SKSize)">
            <param name="size">The size of the existing rectangle.</param>
            <summary>Calculates the smallest rectangle that will fill the current rectangle using the specified size.</summary>
            <returns>Returns the smallest rectangle that will fill the current rectangle.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRect.AspectFit(SkiaSharp.SKSize)">
            <param name="size">The size of the existing rectangle.</param>
            <summary>Calculates the largest rectangle that will fit inside the current rectangle using the specified size.</summary>
            <returns>Returns the largest rectangle that will fit inside the current rectangle.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKRect.Bottom">
            <summary>Gets or sets the y-coordinate of the bottom edge of this <see cref="T:SkiaSharp.SKRect" /> structure.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRect.Contains(SkiaSharp.SKPoint)">
            <param name="pt">The point to test.</param>
            <summary>Determines whether the specified point is inside this rectangle.</summary>
            <returns>Returns true if the point is inside this rectangle, otherwise false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRect.Contains(SkiaSharp.SKRect)">
            <param name="rect">The rectangle to test.</param>
            <summary>Determines whether the specified rectangle is inside this rectangle.</summary>
            <returns>Returns true if the rectangle is inside this rectangle, otherwise false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRect.Contains(System.Single,System.Single)">
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <summary>Determines whether the specified coordinates are inside this rectangle.</summary>
            <returns>Returns true if the coordinates are inside this rectangle, otherwise false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRect.Create(SkiaSharp.SKSize)">
            <param name="size">The rectangle size.</param>
            <summary>Creates a new rectangle with the specified size.</summary>
            <returns>Returns the new rectangle.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRect.Create(SkiaSharp.SKPoint,SkiaSharp.SKSize)">
            <param name="location">The rectangle location.</param>
            <param name="size">The rectangle size.</param>
            <summary>Creates a new rectangle with the specified location and size.</summary>
            <returns>Returns the new rectangle.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRect.Create(System.Single,System.Single)">
            <param name="width">The rectangle width.</param>
            <param name="height">The rectangle height.</param>
            <summary>Creates a new rectangle with the specified size.</summary>
            <returns>Returns the new rectangle.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRect.Create(System.Single,System.Single,System.Single,System.Single)">
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="width">The rectangle width.</param>
            <param name="height">The rectangle height.</param>
            <summary>Creates a new rectangle with the specified location and size.</summary>
            <returns>Returns the new rectangle.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKRect.Empty">
            <summary>Represents a new instance of the <see cref="T:SkiaSharp.SKRect" /> class with member data left uninitialized.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRect.Equals(System.Object)">
            <param name="obj">The <see cref="T:System.Object" /> to test.</param>
            <summary>Specifies whether this rectangle contains the same coordinates as the specified <see cref="T:System.Object" />.</summary>
            <returns>This method returns true if <paramref name="obj" /> is a <see cref="T:SkiaSharp.SKRect" /> and has the same coordinates as this <see cref="T:SkiaSharp.SKRect" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRect.GetHashCode">
            <summary>Calculates the hashcode for this rectangle.</summary>
            <returns>Returns the hashcode for this rectangle.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKRect.Height">
            <summary>Gets the height of the <see cref="T:SkiaSharp.SKRect" />.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRect.Inflate(SkiaSharp.SKSize)">
            <param name="size">The amount to inflate this <see cref="T:SkiaSharp.SKRect" />.</param>
            <summary>Enlarges this <see cref="T:SkiaSharp.SKRect" /> structure by the specified amount.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRect.Inflate(System.Single,System.Single)">
            <param name="x">The amount to inflate this <see cref="T:SkiaSharp.SKRect" /> structure horizontally.</param>
            <param name="y">The amount to inflate this <see cref="T:SkiaSharp.SKRect" /> structure vertically.</param>
            <summary>Enlarges this <see cref="T:SkiaSharp.SKRect" /> structure by the specified amount.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRect.Inflate(SkiaSharp.SKRect,System.Single,System.Single)">
            <param name="rect">The <see cref="T:SkiaSharp.SKRect" /> to be copied. This rectangle is not modified.</param>
            <param name="x">The amount to enlarge the copy of the rectangle horizontally.</param>
            <param name="y">The amount to enlarge the copy of the rectangle vertically.</param>
            <summary>Creates and returns an enlarged copy of the specified <see cref="T:SkiaSharp.SKRect" /> structure. The copy is enlarged by the specified amount and the original rectangle remains unmodified.</summary>
            <returns>The enlarged <see cref="T:SkiaSharp.SKRect" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRect.Intersect(SkiaSharp.SKRect)">
            <param name="rect">The rectangle to intersect.</param>
            <summary>Replaces this <see cref="T:SkiaSharp.SKRect" /> structure with the intersection of itself and the specified <see cref="T:SkiaSharp.SKRect" /> structure.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRect.Intersect(SkiaSharp.SKRect,SkiaSharp.SKRect)">
            <param name="a">A rectangle to intersect.</param>
            <param name="b">A rectangle to intersect.</param>
            <summary>Returns a <see cref="T:SkiaSharp.SKRect" /> structure that represents the intersection of two rectangles. If there is no intersection, and empty <see cref="T:SkiaSharp.SKRect" /> is returned.</summary>
            <returns>A third <see cref="T:SkiaSharp.SKRect" /> structure the size of which represents the overlapped area of the two specified rectangles.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRect.IntersectsWith(SkiaSharp.SKRect)">
            <param name="rect">The rectangle to test.</param>
            <summary>Determines if this rectangle intersects with another rectangle.</summary>
            <returns>This method returns true if there is any intersection.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRect.IntersectsWithInclusive(SkiaSharp.SKRect)">
            <param name="rect">The rectangle to test.</param>
            <summary>Determines if this rectangle intersects with another rectangle.</summary>
            <returns>This method returns true if there is any intersection.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKRect.IsEmpty">
            <summary>Gets a value indicating whether this rectangle has a zero size and location.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKRect.Left">
            <summary>Gets or sets the x-coordinate of the left edge of this <see cref="T:SkiaSharp.SKRect" /> structure.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKRect.Location">
            <summary>Gets or sets the offset of the rectangle.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKRect.MidX">
            <summary>Gets the x-coordinate of the middle of this rectangle.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKRect.MidY">
            <summary>Gets the y-coordinate of the middle of this rectangle.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRect.Offset(SkiaSharp.SKPoint)">
            <param name="pos">The amount to offset the rectangle.</param>
            <summary>Translates the this rectangle by the specified amount.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRect.Offset(System.Single,System.Single)">
            <param name="x">The amount to offset the location horizontally.</param>
            <param name="y">The amount to offset the location vertically.</param>
            <summary>Translates the this rectangle by the specified amount.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRect.op_Equality(SkiaSharp.SKRect,SkiaSharp.SKRect)">
            <param name="left">The <see cref="T:SkiaSharp.SKRect" /> structure that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:SkiaSharp.SKRect" /> structure that is to the right of the equality operator.</param>
            <summary>Tests whether two <see cref="T:SkiaSharp.SKRect" /> structures have equal coordinates.</summary>
            <returns>This operator returns true if the two specified <see cref="T:SkiaSharp.SKRect" /> structures have equal <see cref="P:SkiaSharp.SKRect.Left" />, <see cref="P:SkiaSharp.SKRect.Top" />, <see cref="P:SkiaSharp.SKRect.Right" />, and <see cref="P:SkiaSharp.SKRect.Bottom" /> properties.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRect.op_Implicit(SkiaSharp.SKRectI)~SkiaSharp.SKRect">
            <param name="r">The <see cref="T:SkiaSharp.SKRectI" /> structure to convert.</param>
            <summary>Converts the specified <see cref="T:SkiaSharp.SKRectI" /> structure to a <see cref="T:SkiaSharp.SKRect" /> structure.</summary>
            <returns>The <see cref="T:SkiaSharp.SKRect" /> structure that is converted from the specified <see cref="T:SkiaSharp.SKRectI" /> structure.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRect.op_Inequality(SkiaSharp.SKRect,SkiaSharp.SKRect)">
            <param name="left">The <see cref="T:SkiaSharp.SKRect" /> structure that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:SkiaSharp.SKRect" /> structure that is to the right of the inequality operator.</param>
            <summary>Tests whether two <see cref="T:SkiaSharp.SKRect" /> structures differ in coordinates.</summary>
            <returns>This operator returns true if any of the <see cref="P:SkiaSharp.SKRect.Left" />, <see cref="P:SkiaSharp.SKRect.Top" />, <see cref="P:SkiaSharp.SKRect.Right" />, or <see cref="P:SkiaSharp.SKRect.Bottom" /> properties of the two <see cref="T:SkiaSharp.SKRect" /> structures are unequal; otherwise false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKRect.Right">
            <summary>Gets or sets the x-coordinate of the right edge of this <see cref="T:SkiaSharp.SKRect" /> structure.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKRect.Size">
            <summary>Gets or sets the size of the rectangle.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKRect.Standardized">
            <summary>Gets this rectangle and a new rectangle with a positive width and height.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKRect.Top">
            <summary>Gets or sets the y-coordinate of the top edge of this <see cref="T:SkiaSharp.SKRect" /> structure.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRect.ToString">
            <summary>Converts this <see cref="T:SkiaSharp.SKRect" /> to a human readable string.</summary>
            <returns>A string that represents this <see cref="T:SkiaSharp.SKRect" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRect.Union(SkiaSharp.SKRect)">
            <param name="rect">A rectangle to union.</param>
            <summary>Replaces this <see cref="T:SkiaSharp.SKRect" /> structure with the union of itself and the specified <see cref="T:SkiaSharp.SKRect" /> structure.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRect.Union(SkiaSharp.SKRect,SkiaSharp.SKRect)">
            <param name="a">A rectangle to union.</param>
            <param name="b">A rectangle to union.</param>
            <summary>Creates the smallest possible third rectangle that can contain both of two rectangles that form a union.</summary>
            <returns>A third <see cref="T:SkiaSharp.SKRect" /> structure that contains both of the two rectangles that form the union.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKRect.Width">
            <summary>Gets the width of the rectangle.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKRectI">
            <summary>Stores a set of four integers that represent the upper-left corner and lower-right corner of a rectangle.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKRectI(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="left">The left coordinate.</param>
            <param name="top">The top coordinate.</param>
            <param name="right">The right coordinate.</param>
            <param name="bottom">The bottom coordinate.</param>
            <summary>Initializes a new instance of the <see cref="T:SkiaSharp.SKRectI" /> class with the specified upper-left corner and lower-right corner.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRectI.AspectFill(SkiaSharp.SKSizeI)">
            <param name="size">The size of the existing rectangle.</param>
            <summary>Calculates the smallest rectangle that will fill the current rectangle using the specified size.</summary>
            <returns>Returns the smallest rectangle that will fill the current rectangle.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRectI.AspectFit(SkiaSharp.SKSizeI)">
            <param name="size">The size of the existing rectangle.</param>
            <summary>Calculates the largest rectangle that will fit inside the current rectangle using the specified size.</summary>
            <returns>Returns the largest rectangle that will fit inside the current rectangle.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKRectI.Bottom">
            <summary>Gets or sets the y-coordinate of the bottom edge of this <see cref="T:SkiaSharp.SKRectI" /> structure.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRectI.Ceiling(SkiaSharp.SKRect)">
            <param name="value">The <see cref="T:SkiaSharp.SKRect" /> structure to be converted.</param>
            <summary>Converts the specified <see cref="T:SkiaSharp.SKRect" /> structure to a <see cref="T:SkiaSharp.SKRectI" /> structure by rounding the <see cref="T:SkiaSharp.SKRect" /> values to the next higher integer values.</summary>
            <returns>Returns a <see cref="T:SkiaSharp.SKRectI" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRectI.Ceiling(SkiaSharp.SKRect,System.Boolean)">
            <param name="value">The <see cref="T:SkiaSharp.SKRect" /> structure to be converted.</param>
            <param name="outwards">Whether or not to move in the direction of the side.</param>
            <summary>Converts the specified <see cref="T:SkiaSharp.SKRect" /> structure to a <see cref="T:SkiaSharp.SKRectI" /> structure by rounding the <see cref="T:SkiaSharp.SKRect" /> values to the next higher integer values.</summary>
            <returns>Returns a <see cref="T:SkiaSharp.SKRectI" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRectI.Contains(SkiaSharp.SKPointI)">
            <param name="pt">The point to test.</param>
            <summary>Determines whether the specified point is inside this rectangle.</summary>
            <returns>Returns true if the point is inside this rectangle, otherwise false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRectI.Contains(SkiaSharp.SKRectI)">
            <param name="rect">The rectangle to test.</param>
            <summary>Determines whether the specified rectangle is inside this rectangle.</summary>
            <returns>Returns true if the rectangle is inside this rectangle, otherwise false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRectI.Contains(System.Int32,System.Int32)">
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <summary>Determines whether the specified coordinates are inside this rectangle.</summary>
            <returns>Returns true if the coordinates are inside this rectangle, otherwise false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRectI.Create(SkiaSharp.SKSizeI)">
            <param name="size">The rectangle size.</param>
            <summary>Creates a new rectangle with the specified size.</summary>
            <returns>Returns the new rectangle.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRectI.Create(SkiaSharp.SKPointI,SkiaSharp.SKSizeI)">
            <param name="location">The rectangle location.</param>
            <param name="size">The rectangle size.</param>
            <summary>Creates a new rectangle with the specified location and size.</summary>
            <returns>Returns the new rectangle.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRectI.Create(System.Int32,System.Int32)">
            <param name="width">The rectangle width.</param>
            <param name="height">The rectangle height.</param>
            <summary>Creates a new rectangle with the specified width and height.</summary>
            <returns>Returns the new rectangle.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRectI.Create(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="width">The rectangle width.</param>
            <param name="height">The rectangle height.</param>
            <summary>Creates a new rectangle with the specified location and size.</summary>
            <returns>Returns the new rectangle.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKRectI.Empty">
            <summary>Represents a new instance of the <see cref="T:SkiaSharp.SKRectI" /> class with member data left uninitialized.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRectI.Equals(System.Object)">
            <param name="obj">The <see cref="T:System.Object" /> to test.</param>
            <summary>Specifies whether this rectangle contains the same coordinates as the specified <see cref="T:System.Object" />.</summary>
            <returns>This method returns true if <paramref name="obj" /> is a <see cref="T:SkiaSharp.SKRectI" /> and has the same coordinates as this <see cref="T:SkiaSharp.SKRectI" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRectI.Floor(SkiaSharp.SKRect)">
            <param name="value">The <see cref="T:SkiaSharp.SKRect" /> structure to be converted.</param>
            <summary>Converts the specified <see cref="T:SkiaSharp.SKRect" /> structure to a <see cref="T:SkiaSharp.SKRectI" /> structure by rounding the <see cref="T:SkiaSharp.SKRect" /> values to the closest lower integer values.</summary>
            <returns>Returns a <see cref="T:SkiaSharp.SKRectI" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRectI.Floor(SkiaSharp.SKRect,System.Boolean)">
            <param name="value">The <see cref="T:SkiaSharp.SKRect" /> structure to be converted.</param>
            <param name="inwards">Whether or not to move in the direction of the side.</param>
            <summary>Converts the specified <see cref="T:SkiaSharp.SKRect" /> structure to a <see cref="T:SkiaSharp.SKRectI" /> structure by rounding the <see cref="T:SkiaSharp.SKRect" /> values to the closest lower integer values.</summary>
            <returns>Returns a <see cref="T:SkiaSharp.SKRectI" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRectI.GetHashCode">
            <summary>Calculates the hashcode for this rectangle.</summary>
            <returns>Returns the hashcode for this rectangle.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKRectI.Height">
            <summary>Gets the height of the <see cref="T:SkiaSharp.SKRectI" />.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRectI.Inflate(SkiaSharp.SKSizeI)">
            <param name="size">The amount to inflate this <see cref="T:SkiaSharp.SKRectI" />.</param>
            <summary>Enlarges this <see cref="T:SkiaSharp.SKRectI" /> structure by the specified amount.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRectI.Inflate(System.Int32,System.Int32)">
            <param name="width">The amount to inflate this <see cref="T:SkiaSharp.SKRectI" /> structure horizontally.</param>
            <param name="height">The amount to inflate this <see cref="T:SkiaSharp.SKRectI" /> structure vertically.</param>
            <summary>Enlarges this <see cref="T:SkiaSharp.SKRectI" /> structure by the specified amount.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRectI.Inflate(SkiaSharp.SKRectI,System.Int32,System.Int32)">
            <param name="rect">The <see cref="T:SkiaSharp.SKRectI" /> to be copied. This rectangle is not modified.</param>
            <param name="x">The amount to enlarge the copy of the rectangle horizontally.</param>
            <param name="y">The amount to enlarge the copy of the rectangle vertically.</param>
            <summary>Creates and returns an enlarged copy of the specified <see cref="T:SkiaSharp.SKRectI" /> structure. The copy is enlarged by the specified amount and the original rectangle remains unmodified.</summary>
            <returns>The enlarged <see cref="T:SkiaSharp.SKRectI" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRectI.Intersect(SkiaSharp.SKRectI)">
            <param name="rect">The rectangle to intersect.</param>
            <summary>Replaces this <see cref="T:SkiaSharp.SKRectI" /> structure with the intersection of itself and the specified <see cref="T:SkiaSharp.SKRectI" /> structure.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRectI.Intersect(SkiaSharp.SKRectI,SkiaSharp.SKRectI)">
            <param name="a">A rectangle to intersect.</param>
            <param name="b">A rectangle to intersect.</param>
            <summary>Returns a <see cref="T:SkiaSharp.SKRectI" /> structure that represents the intersection of two rectangles. If there is no intersection, and empty <see cref="T:SkiaSharp.SKRectI" /> is returned.</summary>
            <returns>A third <see cref="T:SkiaSharp.SKRectI" /> structure the size of which represents the overlapped area of the two specified rectangles.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRectI.IntersectsWith(SkiaSharp.SKRectI)">
            <param name="rect">The rectangle to test.</param>
            <summary>Determines if this rectangle intersects with another rectangle.</summary>
            <returns>This method returns true if there is any intersection.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKRectI.IsEmpty">
            <summary>Gets a value indicating whether this rectangle has a zero size and location.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKRectI.Left">
            <summary>Gets or sets the x-coordinate of the left edge of this <see cref="T:SkiaSharp.SKRectI" /> structure.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKRectI.Location">
            <summary>Gets or sets the offset of the rectangle.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKRectI.MidX">
            <summary>Gets the x-coordinate of the middle of this rectangle.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKRectI.MidY">
            <summary>Gets the y-coordinate of the middle of this rectangle.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRectI.Offset(SkiaSharp.SKPointI)">
            <param name="pos">The amount to offset the rectangle.</param>
            <summary>Translates the this rectangle by the specified amount.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRectI.Offset(System.Int32,System.Int32)">
            <param name="x">The amount to offset the location horizontally.</param>
            <param name="y">The amount to offset the location vertically.</param>
            <summary>Translates the this rectangle by the specified amount.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRectI.op_Equality(SkiaSharp.SKRectI,SkiaSharp.SKRectI)">
            <param name="left">The <see cref="T:SkiaSharp.SKRectI" /> structure that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:SkiaSharp.SKRectI" /> structure that is to the right of the equality operator.</param>
            <summary>Tests whether two <see cref="T:SkiaSharp.SKRectI" /> structures have equal location and size.</summary>
            <returns>This operator returns true if the two specified <see cref="T:SkiaSharp.SKRectI" /> structures have equal <see cref="P:SkiaSharp.SKRectI.Left" />, <see cref="P:SkiaSharp.SKRectI.Top" />, <see cref="P:SkiaSharp.SKRectI.Right" />, or <see cref="P:SkiaSharp.SKRectI.Bottom" /> properties.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRectI.op_Inequality(SkiaSharp.SKRectI,SkiaSharp.SKRectI)">
            <param name="left">The <see cref="T:SkiaSharp.SKRectI" /> structure that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:SkiaSharp.SKRectI" /> structure that is to the right of the inequality operator.</param>
            <summary>Tests whether two <see cref="T:SkiaSharp.SKRectI" /> structures differ in location or size.</summary>
            <returns>This operator returns true if any of the <see cref="P:SkiaSharp.SKRectI.Left" />, <see cref="P:SkiaSharp.SKRectI.Top" />, <see cref="P:SkiaSharp.SKRectI.Right" />, or <see cref="P:SkiaSharp.SKRectI.Bottom" /> properties of the two <see cref="T:SkiaSharp.SKRectI" /> structures are unequal; otherwise false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKRectI.Right">
            <summary>Gets or sets the x-coordinate of the right edge of this <see cref="T:SkiaSharp.SKRectI" /> structure.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRectI.Round(SkiaSharp.SKRect)">
            <param name="value">The <see cref="T:SkiaSharp.SKRect" /> structure to be converted.</param>
            <summary>Converts the specified <see cref="T:SkiaSharp.SKRect" /> structure to a <see cref="T:SkiaSharp.SKRectI" /> structure by rounding the <see cref="T:SkiaSharp.SKRect" /> values to the nearest integer values.</summary>
            <returns>Returns a <see cref="T:SkiaSharp.SKRectI" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKRectI.Size">
            <summary>Gets or sets the size of the <see cref="T:SkiaSharp.SKRectI" />.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKRectI.Standardized">
            <summary>Gets this rectangle and a new rectangle with a positive width and height.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKRectI.Top">
            <summary>Gets or sets the y-coordinate of the top edge of this <see cref="T:SkiaSharp.SKRectI" /> structure.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRectI.ToString">
            <summary>Converts this <see cref="T:SkiaSharp.SKRectI" /> to a human readable string.</summary>
            <returns>A string that represents this <see cref="T:SkiaSharp.SKRectI" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRectI.Truncate(SkiaSharp.SKRect)">
            <param name="value">The <see cref="T:SkiaSharp.SKRect" /> to be converted.</param>
            <summary>Converts the specified <see cref="T:SkiaSharp.SKRect" /> structure to a <see cref="T:SkiaSharp.SKRectI" /> structure by truncating the <see cref="T:SkiaSharp.SKRect" /> values.</summary>
            <returns>The truncated value of the <see cref="T:SkiaSharp.SKRectI" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRectI.Union(SkiaSharp.SKRectI)">
            <param name="rect">A rectangle to union.</param>
            <summary>Replaces this <see cref="T:SkiaSharp.SKRectI" /> structure with the union of itself and the specified <see cref="T:SkiaSharp.SKRectI" /> structure.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRectI.Union(SkiaSharp.SKRectI,SkiaSharp.SKRectI)">
            <param name="a">A rectangle to union.</param>
            <param name="b">A rectangle to union.</param>
            <summary>Creates the smallest possible third rectangle that can contain both of two rectangles that form a union.</summary>
            <returns>A third <see cref="T:SkiaSharp.SKRectI" /> structure that contains both of the two rectangles that form the union.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKRectI.Width">
            <summary>Gets the width of the <see cref="T:SkiaSharp.SKRectI" />.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKRegion">
            <summary>Encapsulates the geometric region used to specify clipping areas for drawing.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKRegion">
            <summary>Creates an empty region.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKRegion(SkiaSharp.SKRegion)">
            <param name="region">The region to copy.</param>
            <summary>Creates a new region by copying an existing region.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKRegion.Bounds">
            <summary>Gets the bounds of this region.</summary>
            <value>
                <para />
            </value>
            <remarks>If the region is empty, returns an empty rectangle.</remarks>
        </member>
        <member name="M:SkiaSharp.SKRegion.Contains(SkiaSharp.SKPointI)">
            <param name="xy">The coordinates to check with.</param>
            <summary>Check to see if the specified coordinates are completely inside the current region.</summary>
            <returns>Returns true if the specified coordinates are completely inside the current region, otherwise false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRegion.Contains(SkiaSharp.SKRegion)">
            <param name="src">The region to check with.</param>
            <summary>Check to see if the specified region is completely inside the current region.</summary>
            <returns>Returns true if the specified region is completely inside the current region, otherwise false.</returns>
            <remarks>This works for simple (rectangular) and complex regions, and always returns the correct result. If either region is empty, this method returns false.</remarks>
        </member>
        <member name="M:SkiaSharp.SKRegion.Contains(System.Int32,System.Int32)">
            <param name="x">The x-coordinate to check with.</param>
            <param name="y">The y-coordinate to check with.</param>
            <summary>Check to see if the specified coordinates are completely inside the current region.</summary>
            <returns>Returns true if the specified coordinates are completely inside the current region, otherwise false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRegion.Intersects(SkiaSharp.SKRectI)">
            <param name="rect">The rectangle to check with.</param>
            <summary>Check to see if the specified rectangle intersects with the current region.</summary>
            <returns>Returns true if the specified rectangle has a non-empty intersection with the current region.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRegion.Intersects(SkiaSharp.SKRegion)">
            <param name="region">The region to check with.</param>
            <summary>Check to see if the specified region intersects with the current region.</summary>
            <returns>Returns true if the specified region has a non-empty intersection with the current region.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRegion.Op(SkiaSharp.SKRectI,SkiaSharp.SKRegionOperation)">
            <param name="rect">The rectangle to apply the operator on.</param>
            <param name="op">The operator to apply.</param>
            <summary>Set this region to the result of applying the operation to this region and the specified rectangle.</summary>
            <returns>Returns true if the resulting region is non-empty.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRegion.Op(SkiaSharp.SKRegion,SkiaSharp.SKRegionOperation)">
            <param name="region">The region to apply the operator on.</param>
            <param name="op">The operator to apply.</param>
            <summary>Set this region to the result of applying the operation to this region and the specified region.</summary>
            <returns>Returns true if the resulting region is non-empty.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRegion.Op(System.Int32,System.Int32,System.Int32,System.Int32,SkiaSharp.SKRegionOperation)">
            <param name="left">The x-coordinate to apply the operator on.</param>
            <param name="top">The y-coordinate to apply the operator on.</param>
            <param name="right">The right-coordinate to apply the operator on.</param>
            <param name="bottom">The bottom-coordinate to apply the operator on.</param>
            <param name="op">The operator to apply.</param>
            <summary>Set this region to the result of applying the operation to this region and the specified rectangle.</summary>
            <returns>Returns true if the resulting region is non-empty.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRegion.SetPath(SkiaSharp.SKPath)">
            <param name="path">The replacement path.</param>
            <summary>Set this region to the area described by the path, clipped to the current region.</summary>
            <returns>Returns true if the resulting region is non-empty.</returns>
            <remarks>This produces a region that is identical to the pixels that would be drawn by the path (with no antialiasing) with the current region as the clip.</remarks>
        </member>
        <member name="M:SkiaSharp.SKRegion.SetPath(SkiaSharp.SKPath,SkiaSharp.SKRegion)">
            <param name="path">The replacement path.</param>
            <param name="clip">The clipping region.</param>
            <summary>Set this region to the area described by the path, clipped.</summary>
            <returns>Returns true if the resulting region is non-empty.</returns>
            <remarks>This produces a region that is identical to the pixels that would be drawn by the path (with no antialiasing) with the specified clip.</remarks>
        </member>
        <member name="M:SkiaSharp.SKRegion.SetRect(SkiaSharp.SKRectI)">
            <param name="rect">The replacement rectangle.</param>
            <summary>Set this region to the specified rectangle.</summary>
            <returns>Returns true if the resulting region is non-empty.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKRegion.SetRegion(SkiaSharp.SKRegion)">
            <param name="region">The replacement region.</param>
            <summary>Set this region to the specified region.</summary>
            <returns>Return true if the resulting region is non-empty.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKRegionOperation">
            <summary>The logical operations that can be performed when combining two regions.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKRegionOperation.Difference">
            <summary>Subtract the op region from the first region.</summary>
        </member>
        <member name="F:SkiaSharp.SKRegionOperation.Intersect">
            <summary>Intersect the two regions.</summary>
        </member>
        <member name="F:SkiaSharp.SKRegionOperation.Replace">
            <summary>Replace the destination region with the op region.</summary>
        </member>
        <member name="F:SkiaSharp.SKRegionOperation.ReverseDifference">
            <summary>Subtract the first region from the op region.</summary>
        </member>
        <member name="F:SkiaSharp.SKRegionOperation.Union">
            <summary>Union (inclusive-or) the two regions.</summary>
        </member>
        <member name="F:SkiaSharp.SKRegionOperation.XOR">
            <summary>Exclusive-or the two regions.</summary>
        </member>
        <member name="T:SkiaSharp.SKShader">
            <summary>Shaders specify the source color(s) for what is being drawn in the <see cref="T:SkiaSharp.SKPaint" />.</summary>
            <remarks>
                <para>Shaders specify the source colors for what is being drawn. If a paint has no shader, then the paint's color is used. If the paint has a shader, then the shader's colors are used instead, but they are modulated by the paint's alpha. </para>
                <para />
                <para>This makes it easy to create a shader once (e.g. bitmap tiling or gradient) and then change its transparency without having to modify the original shader, only the paint's alpha needs to be modified.</para>
                <para>Shaders are created by calling one of the static “Create” methods in the SKShader method that create a shader of the appropriate type.</para>
                <format type="text/html">
                    <h2>Linear Gradient Shader</h2>
                </format>
                <example>
                    <code lang="c#"><![CDATA[
var colors = new SKColor [] { new SKColor (0, 255, 255), new SKColor (255, 0, 255), new SKColor (255, 255, 0), new SKColor (0, 255, 255)};
var shader = SKShader.CreateLinearGradient (new SKPoint (0, 0), new SKPoint (255, 255), colors, null, SKShaderTileMode.Clamp);
var paint = new SKPaint () { Shader = shader };
canvas.DrawPaint (paint);
]]></code>
                </example>
                <para>
                    <img href="linear.png" />
                </para>
                <format type="text/html">
                    <h2>Radial Gradient Shader</h2>
                </format>
                <example>
                    <code lang="c#"><![CDATA[var colors = new SKColor [] {
    new SKColor (0, 0, 255),
    new SKColor (0, 255, 0)
};
var shader = SKShader.CreateRadialGradient (new SKPoint (128, 128), 180, colors, null, SKShaderTileMode.Clamp);
var paint = new SKPaint () {
    Shader = shader,
};
canvas.DrawPaint (paint);]]></code>
                </example>
                <para>
                    <img href="radial.png" />
                </para>
                <format type="text/html">
                    <h2>Two-point Conical Gradient Shader</h2>
                </format>
                <example>
                    <code lang="c#"><![CDATA[var colors = new SKColor [] {
    new SKColor (0, 0, 255),
    new SKColor (0, 255, 0)
};
var shader = SKShader.CreateTwoPointConicalGradient (new SKPoint (128, 128), 128, new SKPoint (128, 16), 16, colors, null, SKShaderTileMode.Clamp);
var paint = new SKPaint () {
    Shader = shader,
};
canvas.DrawPaint (paint);]]></code>
                </example>
                <para>
                    <img href="twopoint.png" />
                </para>
                <format type="text/html">
                    <h2>Sweep Gradient Shader</h2>
                </format>
                <example>
                    <code lang="c#"><![CDATA[var colors = new SKColor [] {
    new SKColor (0, 255, 255),
    new SKColor (255, 0, 255),
    new SKColor (255, 255, 0),
    new SKColor (0, 255, 255)
};
var shader = SKShader.CreateSweepGradient (new SKPoint (128, 128), colors, null);
var paint = new SKPaint () {
    Shader = shader
};
canvas.DrawPaint (paint);]]></code>
                </example>
                <format type="text/html">
                    <h2>Fractal Perlin Noise</h2>
                </format>
                <example>
                    <code lang="c#"><![CDATA[var shader = SKShader.CreatePerlinNoiseFractalNoise (0.5f, 0.5f, 4, 0);
var paint = new SKPaint () { Shader = shader };
canvas.DrawPaint (paint);]]></code>
                </example>
                <para>
                    <img href="fractalnoise.png" />
                </para>
                <format type="text/html">
                    <h2>Turbulence Perlin Noise</h2>
                </format>
                <example>
                    <code lang="c#"><![CDATA[var turbulence = SKShader.CreatePerlinNoiseTurbulence (0.05f, 0.05f, 4, 0);
var paint = new SKPaint () { Shader = turbulence };
canvas.DrawPaint (paint);]]></code>
                </example>
                <para>
                    <img href="turbulence.png" />
                </para>
                <format type="text/html">
                    <h2>Compose Shader</h2>
                </format>
                <example>
                    <code lang="c#"><![CDATA[
var colors = new SKColor [] { new SKColor (0, 255, 255), new SKColor (255, 0, 255), new SKColor (255, 255, 0), new SKColor (0, 255, 255)};
var sweep = SKShader.CreateSweepGradient (new SKPoint (128, 128), colors, null);
var turbulence = SKShader.CreatePerlinNoiseTurbulence (0.05f, 0.05f, 4, 0);
var shader = SKShader.CreateCompose (sweep, turbulence);
var paint = new SKPaint () { Shader = shader };
canvas.DrawPaint (paint);]]></code>
                </example>
                <para>
                    <img href="compose.png" />
                </para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreateBitmap(SkiaSharp.SKBitmap,SkiaSharp.SKShaderTileMode,SkiaSharp.SKShaderTileMode)">
            <param name="src">The bitmap to use inside the shader.</param>
            <param name="tmx">The tiling mode to use when sampling the bitmap in the x-direction.</param>
            <param name="tmy">The tiling mode to use when sampling the bitmap in the y-direction.</param>
            <summary>Creates a new shader that will draw with the specified bitmap.</summary>
            <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
            <remarks>
                <para>If the bitmap cannot be used (has no pixels, or its dimensions exceed implementation limits) then an empty shader may be returned. </para>
                <para>If the source bitmap’s color type is <see cref="F:SkiaSharp.SKColorType.Alpha8" /> then that mask will be colorized using the color on the paint.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreateBitmap(SkiaSharp.SKBitmap,SkiaSharp.SKShaderTileMode,SkiaSharp.SKShaderTileMode,SkiaSharp.SKMatrix)">
            <param name="src">The bitmap to use inside the shader.</param>
            <param name="tmx">The tiling mode to use when sampling the bitmap in the x-direction.</param>
            <param name="tmy">The tiling mode to use when sampling the bitmap in the y-direction.</param>
            <param name="localMatrix">The matrix to apply before applying the shader.</param>
            <summary>Creates a new shader that will draw with the specified bitmap.</summary>
            <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
            <remarks>
                <para>If the bitmap cannot be used (has no pixels, or its dimensions exceed implementation limits) then an empty shader may be returned. </para>
                <para>If the source bitmap’s color type is <see cref="F:SkiaSharp.SKColorType.Alpha8" /> then that mask will be colorized using the color on the paint.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreateColor(SkiaSharp.SKColor)">
            <param name="color">The color to paint.</param>
            <summary>Creates a new shader that just draws the specified color.</summary>
            <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
            <remarks />
        </member>
        <member name="M:SkiaSharp.SKShader.CreateColorFilter(SkiaSharp.SKShader,SkiaSharp.SKColorFilter)">
            <param name="shader">The shader to apply.</param>
            <param name="filter">The color filter to apply.</param>
            <summary>Creates a new shader that produces the same colors as invoking this shader and then applying the color filter.</summary>
            <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreateCompose(SkiaSharp.SKShader,SkiaSharp.SKShader)">
            <param name="shaderA">The colors from this shader are seen as the destination by the blend mode.</param>
            <param name="shaderB">The colors from this shader are seen as the source by the blend mode.</param>
            <summary>Create a new compose shader, which combines two shaders by the <see cref="F:SkiaSharp.SKXferMode.SrcOver" /> blend mode.</summary>
            <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
            <remarks>
                <example>
                    <code lang="c#"><![CDATA[
var colors = new SKColor [] { new SKColor (0, 255, 255), new SKColor (255, 0, 255), new SKColor (255, 255, 0), new SKColor (0, 255, 255)};
var sweep = SKShader.CreateSweepGradient (new SKPoint (128, 128), colors, null);
var turbulence = SKShader.CreatePerlinNoiseTurbulence (0.05f, 0.05f, 4, 0);
var shader = SKShader.CreateCompose (sweep, turbulence);
var paint = new SKPaint () { Shader = shader };
canvas.DrawPaint (paint);]]></code>
                </example>
                <para>
                    <img href="compose.png" />
                </para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreateCompose(SkiaSharp.SKShader,SkiaSharp.SKShader,SkiaSharp.SKBlendMode)">
            <param name="shaderA">The colors from this shader are seen as the destination by the blend mode.</param>
            <param name="shaderB">The colors from this shader are seen as the source by the blend mode.</param>
            <param name="mode">The blend mode that combines the two shaders.</param>
            <summary>Create a new compose shader, which combines two shaders by a blend mode.</summary>
            <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreateEmpty">
            <summary>Creates a new "empty” shader that will not draw anything.</summary>
            <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreateLinearGradient(SkiaSharp.SKPoint,SkiaSharp.SKPoint,SkiaSharp.SKColor[],System.Single[],SkiaSharp.SKShaderTileMode)">
            <param name="start">The start point for the gradient.</param>
            <param name="end">The end point for the gradient.</param>
            <param name="colors">The array colors to be distributed between the two points.</param>
            <param name="colorPos">The positions (in the range of 0..1) of each corresponding color, or null to evenly distribute the colors.</param>
            <param name="mode">The tiling mode.</param>
            <summary>Creates a shader that generates a linear gradient between the two specified points.</summary>
            <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
            <remarks>
                <example>
                    <code lang="c#"><![CDATA[
var colors = new SKColor [] { new SKColor (0, 255, 255), new SKColor (255, 0, 255), new SKColor (255, 255, 0), new SKColor (0, 255, 255)};
var shader = SKShader.CreateLinearGradient (new SKPoint (0, 0), new SKPoint (255, 255), colors, null, SKShaderTileMode.Clamp);
var paint = new SKPaint () { Shader = shader };
canvas.DrawPaint (paint);
]]></code>
                </example>
                <para>
                    <img href="linear.png" />
                </para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreateLinearGradient(SkiaSharp.SKPoint,SkiaSharp.SKPoint,SkiaSharp.SKColor[],System.Single[],SkiaSharp.SKShaderTileMode,SkiaSharp.SKMatrix)">
            <param name="start">The start point for the gradient.</param>
            <param name="end">The end point for the gradient.</param>
            <param name="colors">The array colors to be distributed between the two points.</param>
            <param name="colorPos">The positions (in the range of 0..1) of each corresponding color, or null to evenly distribute the colors.</param>
            <param name="mode">The tiling mode.</param>
            <param name="localMatrix">The matrix to apply before applying the shader.</param>
            <summary>Creates a shader that generates a linear gradient between the two specified points.</summary>
            <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreateLocalMatrix(SkiaSharp.SKShader,SkiaSharp.SKMatrix)">
            <param name="shader">The shader to apply.</param>
            <param name="localMatrix">The matrix to apply before applying the shader.</param>
            <summary>Creates a shader that first applies the specified matrix and then applies the shader.</summary>
            <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreatePerlinNoiseFractalNoise(System.Single,System.Single,System.Int32,System.Single)">
            <param name="baseFrequencyX">The frequency in the x-direction in the range of 0..1.</param>
            <param name="baseFrequencyY">The frequency in the y-direction in the range of 0..1.</param>
            <param name="numOctaves">The number of octaves, usually fairly small.</param>
            <param name="seed">The randomization seed.</param>
            <summary>Creates a new shader that draws Perlin fractal noise.</summary>
            <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreatePerlinNoiseFractalNoise(System.Single,System.Single,System.Int32,System.Single,SkiaSharp.SKPointI)">
            <param name="baseFrequencyX">The frequency in the x-direction in the range of 0..1.</param>
            <param name="baseFrequencyY">The frequency in the y-direction in the range of 0..1.</param>
            <param name="numOctaves">The number of octaves, usually fairly small.</param>
            <param name="seed">The randomization seed.</param>
            <param name="tileSize">The tile size used to modify the frequencies so that the noise will be tileable for the given size.</param>
            <summary>Creates a new shader that draws Perlin fractal noise.</summary>
            <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreatePerlinNoiseTurbulence(System.Single,System.Single,System.Int32,System.Single)">
            <param name="baseFrequencyX">The frequency in the x-direction in the range of 0..1.</param>
            <param name="baseFrequencyY">The frequency in the y-direction in the range of 0..1.</param>
            <param name="numOctaves">The number of octaves, usually fairly small.</param>
            <param name="seed">The randomization seed.</param>
            <summary>Creates a new shader that draws Perlin turbulence noise.</summary>
            <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreatePerlinNoiseTurbulence(System.Single,System.Single,System.Int32,System.Single,SkiaSharp.SKPointI)">
            <param name="baseFrequencyX">The frequency in the x-direction in the range of 0..1.</param>
            <param name="baseFrequencyY">The frequency in the y-direction in the range of 0..1.</param>
            <param name="numOctaves">The number of octaves, usually fairly small.</param>
            <param name="seed">The randomization seed.</param>
            <param name="tileSize">The tile size used to modify the frequencies so that the noise will be tileable for the given size.</param>
            <summary>Creates a new shader that draws Perlin turbulence noise.</summary>
            <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreateRadialGradient(SkiaSharp.SKPoint,System.Single,SkiaSharp.SKColor[],System.Single[],SkiaSharp.SKShaderTileMode)">
            <param name="center">The center of the circle for this gradient.</param>
            <param name="radius">The positive radius of the circle for this gradient.</param>
            <param name="colors">The array colors to be distributed between the center and edge of the circle.</param>
            <param name="colorPos">The positions (in the range of 0..1) of each corresponding color, or null to evenly distribute the colors.</param>
            <param name="mode">The tiling mode.</param>
            <summary>Creates a shader that generates a radial gradient given the center and radius.</summary>
            <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreateRadialGradient(SkiaSharp.SKPoint,System.Single,SkiaSharp.SKColor[],System.Single[],SkiaSharp.SKShaderTileMode,SkiaSharp.SKMatrix)">
            <param name="center">The center of the circle for this gradient.</param>
            <param name="radius">The positive radius of the circle for this gradient.</param>
            <param name="colors">The array colors to be distributed between the center and edge of the circle.</param>
            <param name="colorPos">The positions (in the range of 0..1) of each corresponding color, or null to evenly distribute the colors.</param>
            <param name="mode">The tiling mode.</param>
            <param name="localMatrix">The matrix to apply before applying the shader.</param>
            <summary>Creates a shader that generates a radial gradient given the center and radius.</summary>
            <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreateSweepGradient(SkiaSharp.SKPoint,SkiaSharp.SKColor[],System.Single[])">
            <param name="center">The coordinates of the center of the sweep.</param>
            <param name="colors">The array colors to be distributed around the center.</param>
            <param name="colorPos">The positions (in the range of 0..1) of each corresponding color, or null to evenly distribute the colors.</param>
            <summary>Creates a shader that generates a sweep gradient given a center.</summary>
            <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreateSweepGradient(SkiaSharp.SKPoint,SkiaSharp.SKColor[],System.Single[],SkiaSharp.SKMatrix)">
            <param name="center">The coordinates of the center of the sweep.</param>
            <param name="colors">The array colors to be distributed around the center.</param>
            <param name="colorPos">The positions (in the range of 0..1) of each corresponding color, or null to evenly distribute the colors.</param>
            <param name="localMatrix">The matrix to apply before applying the shader.</param>
            <summary>Creates a shader that generates a sweep gradient given a center.</summary>
            <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreateTwoPointConicalGradient(SkiaSharp.SKPoint,System.Single,SkiaSharp.SKPoint,System.Single,SkiaSharp.SKColor[],System.Single[],SkiaSharp.SKShaderTileMode)">
            <param name="start">The coordinates for the starting point.</param>
            <param name="startRadius">The radius at the starting point.</param>
            <param name="end">The coordinates for the end point.</param>
            <param name="endRadius">The radius at the end point.</param>
            <param name="colors">The array colors to be distributed between the two points.</param>
            <param name="colorPos">The positions (in the range of 0..1) of each corresponding color, or null to evenly distribute the colors.</param>
            <param name="mode">The tiling mode.</param>
            <summary>Creates a shader that generates a conical gradient given two circles.</summary>
            <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or null on error.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.CreateTwoPointConicalGradient(SkiaSharp.SKPoint,System.Single,SkiaSharp.SKPoint,System.Single,SkiaSharp.SKColor[],System.Single[],SkiaSharp.SKShaderTileMode,SkiaSharp.SKMatrix)">
            <param name="start">The coordinates for the starting point.</param>
            <param name="startRadius">The radius at the starting point.</param>
            <param name="end">The coordinates for the end point.</param>
            <param name="endRadius">The radius at the end point.</param>
            <param name="colors">The array colors to be distributed between the two points.</param>
            <param name="colorPos">The positions (in the range of 0..1) of each corresponding color, or null to evenly distribute the colors.</param>
            <param name="mode">The tiling mode.</param>
            <param name="localMatrix">The matrix to apply before applying the shader.</param>
            <summary>Creates a shader that generates a conical gradient given two circles.</summary>
            <returns>Returns a new <see cref="T:SkiaSharp.SKShader" />, or an empty shader on error. This function never returns null.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKShader.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKShaderTileMode">
            <summary>Indications on how the shader should handle drawing outside the origional bounds.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKShaderTileMode.Clamp">
            <summary>Replicate the edge color.</summary>
        </member>
        <member name="F:SkiaSharp.SKShaderTileMode.Mirror">
            <summary>Repeat the shader's image horizontally and vertically, alternating mirror images so that adjacent images always seam.</summary>
        </member>
        <member name="F:SkiaSharp.SKShaderTileMode.Repeat">
            <summary>Repeat the shader's image horizontally and vertically.</summary>
        </member>
        <member name="T:SkiaSharp.SKSize">
            <summary>Stores an ordered pair of floating-point numbers describing the width and height of a rectangle.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKSize(SkiaSharp.SKPoint)">
            <param name="pt">The offset to use as the dimensions of the new point.</param>
            <summary>Creates a new size from the offset of a point.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKSize(System.Single,System.Single)">
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <summary>Creates a new size with a given width and height.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSize.Add(SkiaSharp.SKSize,SkiaSharp.SKSize)">
            <param name="sz1">The first <see cref="T:SkiaSharp.SKSize" /> structure to add.</param>
            <param name="sz2">The second <see cref="T:SkiaSharp.SKSize" /> structure to add.</param>
            <summary>Adds the width and height of one <see cref="T:SkiaSharp.SKSize" /> structure to the width and height of another <see cref="T:SkiaSharp.SKSize" /> structure.</summary>
            <returns>A <see cref="T:SkiaSharp.SKSize" /> structure that is the result of the addition operation.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKSize.Empty">
            <summary>Represents a new instance of the <see cref="T:SkiaSharp.SKSize" /> class with member data left uninitialized.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSize.Equals(System.Object)">
            <param name="obj">The <see cref="T:System.Object" /> to test.</param>
            <summary>Tests to see whether the specified object is a <see cref="T:SkiaSharp.SKSize" /> structure with the same dimensions as this <see cref="T:SkiaSharp.SKSize" /> structure.</summary>
            <returns>This method returns true if <paramref name="obj" /> is a <see cref="T:SkiaSharp.SKSize" /> and has the same coordinates as this <see cref="T:SkiaSharp.SKSize" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSize.GetHashCode">
            <summary>Returns a hash code for this <see cref="T:SkiaSharp.SKSize" /> structure.</summary>
            <returns>An integer value that specifies a hash value for this <see cref="T:SkiaSharp.SKSize" /> structure.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKSize.Height">
            <summary>Gets or sets the vertical component of this <see cref="T:SkiaSharp.SKSize" /> structure.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKSize.IsEmpty">
            <summary>Gets a value that indicates whether this <see cref="T:SkiaSharp.SKSize" /> structure has zero width and height.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSize.op_Addition(SkiaSharp.SKSize,SkiaSharp.SKSize)">
            <param name="sz1">The first <see cref="T:SkiaSharp.SKSize" /> structure to add.</param>
            <param name="sz2">The second <see cref="T:SkiaSharp.SKSize" /> structure to add.</param>
            <summary>Adds the width and height of one <see cref="T:SkiaSharp.SKSize" /> structure to the width and height of another <see cref="T:SkiaSharp.SKSize" /> structure.</summary>
            <returns>A <see cref="T:SkiaSharp.SKSize" /> structure that is the result of the addition operation.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSize.op_Equality(SkiaSharp.SKSize,SkiaSharp.SKSize)">
            <param name="sz1">The <see cref="T:SkiaSharp.SKSize" /> structure on the left side of the equality operator.</param>
            <param name="sz2">The <see cref="T:SkiaSharp.SKSize" /> structure on the right of the equality operator.</param>
            <summary>Tests whether two <see cref="T:SkiaSharp.SKSize" /> structures are equal.</summary>
            <returns>This operator returns true if both <see cref="T:SkiaSharp.SKSize" /> structures have equal <see cref="P:SkiaSharp.SKSize.Width" /> and <see cref="P:SkiaSharp.SKSize.Height" />; otherwise, false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSize.op_Explicit(SkiaSharp.SKSize)~SkiaSharp.SKPoint">
            <param name="size">The <see cref="T:SkiaSharp.SKSize" /> structure to be converted.</param>
            <summary>Converts the specified <see cref="T:SkiaSharp.SKSize" /> structure to a <see cref="T:SkiaSharp.SKPoint" /> structure.</summary>
            <returns>The <see cref="T:SkiaSharp.SKPoint" /> structure structure to which this operator converts.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSize.op_Implicit(SkiaSharp.SKSizeI)~SkiaSharp.SKSize">
            <param name="size">The <see cref="T:SkiaSharp.SKSizeI" /> structure to be converted.</param>
            <summary>Converts the specified <see cref="T:SkiaSharp.SKSizeI" /> structure to a <see cref="T:SkiaSharp.SKSize" /> structure.</summary>
            <returns>The <see cref="T:SkiaSharp.SKSize" /> structure structure to which this operator converts.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSize.op_Inequality(SkiaSharp.SKSize,SkiaSharp.SKSize)">
            <param name="sz1">The <see cref="T:SkiaSharp.SKSize" /> structure that is to the left of the inequality operator.</param>
            <param name="sz2">The <see cref="T:SkiaSharp.SKSize" /> structure that is to the right of the inequality operator.</param>
            <summary>Tests whether two <see cref="T:SkiaSharp.SKSize" /> structures are different.</summary>
            <returns>This operator returns true if either of the <see cref="P:SkiaSharp.SKSize.Width" /> and <see cref="P:SkiaSharp.SKSize.Height" /> properties of the two <see cref="T:SkiaSharp.SKSize" /> structures are unequal; otherwise false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSize.op_Subtraction(SkiaSharp.SKSize,SkiaSharp.SKSize)">
            <param name="sz1">The <see cref="T:SkiaSharp.SKSize" /> structure on the left side of the subtraction operator.</param>
            <param name="sz2">The <see cref="T:SkiaSharp.SKSize" /> structure on the right side of the subtraction operator.</param>
            <summary>Subtracts the width and height of one <see cref="T:SkiaSharp.SKSize" /> structure from the width and height of another <see cref="T:SkiaSharp.SKSize" /> structure.</summary>
            <returns>A <see cref="T:SkiaSharp.SKSize" /> that is the result of the subtraction operation.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSize.Subtract(SkiaSharp.SKSize,SkiaSharp.SKSize)">
            <param name="sz1">The <see cref="T:SkiaSharp.SKSize" /> structure on the left side of the subtraction operator.</param>
            <param name="sz2">The <see cref="T:SkiaSharp.SKSize" /> structure on the right side of the subtraction operator.</param>
            <summary>Subtracts the width and height of one <see cref="T:SkiaSharp.SKSize" /> structure from the width and height of another <see cref="T:SkiaSharp.SKSize" /> structure.</summary>
            <returns>A <see cref="T:SkiaSharp.SKSize" /> that is the result of the subtraction operation.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSize.ToPoint">
            <summary>Converts a <see cref="T:SkiaSharp.SKSize" /> structure to a <see cref="T:SkiaSharp.SKPoint" /> structure.</summary>
            <returns>Returns a <see cref="T:SkiaSharp.SKPoint" /> structure.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSize.ToSizeI">
            <summary>Converts a <see cref="T:SkiaSharp.SKSize" /> structure to a <see cref="T:SkiaSharp.SKSizeI" /> structure.</summary>
            <returns>Returns a <see cref="T:SkiaSharp.SKSizeI" /> structure.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSize.ToString">
            <summary>Converts this <see cref="T:SkiaSharp.SKSize" /> to a human readable string.</summary>
            <returns>A string that represents this <see cref="T:SkiaSharp.SKSize" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKSize.Width">
            <summary>Gets or sets the horizontal component of this <see cref="T:SkiaSharp.SKSize" /> structure.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKSizeI">
            <summary>Stores an ordered pair of integers describing the width and height of a rectangle.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKSizeI(SkiaSharp.SKPointI)">
            <param name="pt">The offset to use as the dimensions of the new point.</param>
            <summary>Creates a new size from the offset of a point.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKSizeI(System.Int32,System.Int32)">
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <summary>Creates a new size with a given width and height.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSizeI.Add(SkiaSharp.SKSizeI,SkiaSharp.SKSizeI)">
            <param name="sz1">The first <see cref="T:SkiaSharp.SKSizeI" /> structure to add.</param>
            <param name="sz2">The second <see cref="T:SkiaSharp.SKSizeI" /> structure to add.</param>
            <summary>Adds the width and height of one <see cref="T:SkiaSharp.SKSizeI" /> structure to the width and height of another <see cref="T:SkiaSharp.SKSizeI" /> structure.</summary>
            <returns>A <see cref="T:SkiaSharp.SKSizeI" /> structure that is the result of the addition operation.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKSizeI.Empty">
            <summary>Represents a new instance of the <see cref="T:SkiaSharp.SKSizeI" /> class with member data left uninitialized.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSizeI.Equals(System.Object)">
            <param name="obj">The <see cref="T:System.Object" /> to test.</param>
            <summary>Tests to see whether the specified object is a <see cref="T:SkiaSharp.SKSizeI" /> structure with the same dimensions as this <see cref="T:SkiaSharp.SKSizeI" /> structure.</summary>
            <returns>This method returns true if <paramref name="obj" /> is a <see cref="T:SkiaSharp.SKSizeI" /> and has the same coordinates as this <see cref="T:SkiaSharp.SKSizeI" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSizeI.GetHashCode">
            <summary>Returns a hash code for this <see cref="T:SkiaSharp.SKSizeI" /> structure.</summary>
            <returns>An integer value that specifies a hash value for this <see cref="T:SkiaSharp.SKSizeI" /> structure.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKSizeI.Height">
            <summary>Gets or sets the vertical component of this <see cref="T:SkiaSharp.SKSizeI" /> structure.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKSizeI.IsEmpty">
            <summary>Gets a value that indicates whether this <see cref="T:SkiaSharp.SKSizeI" /> structure has zero width and height.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSizeI.op_Addition(SkiaSharp.SKSizeI,SkiaSharp.SKSizeI)">
            <param name="sz1">The first <see cref="T:SkiaSharp.SKSizeI" /> structure to add.</param>
            <param name="sz2">The second <see cref="T:SkiaSharp.SKSizeI" /> structure to add.</param>
            <summary>Adds the width and height of one <see cref="T:SkiaSharp.SKSizeI" /> structure to the width and height of another <see cref="T:SkiaSharp.SKSizeI" /> structure.</summary>
            <returns>A <see cref="T:SkiaSharp.SKSizeI" /> structure that is the result of the addition operation.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSizeI.op_Equality(SkiaSharp.SKSizeI,SkiaSharp.SKSizeI)">
            <param name="sz1">The <see cref="T:SkiaSharp.SKSizeI" /> structure on the left side of the equality operator.</param>
            <param name="sz2">The <see cref="T:SkiaSharp.SKSizeI" /> structure on the right of the equality operator.</param>
            <summary>Tests whether two <see cref="T:SkiaSharp.SKSizeI" /> structures are equal.</summary>
            <returns>This operator returns true if both <see cref="T:SkiaSharp.SKSizeI" /> structures have equal <see cref="P:SkiaSharp.SKSizeI.Width" /> and <see cref="P:SkiaSharp.SKSizeI.Height" />; otherwise, false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSizeI.op_Explicit(SkiaSharp.SKSizeI)~SkiaSharp.SKPointI">
            <param name="size">The <see cref="T:SkiaSharp.SKSizeI" /> structure to be converted.</param>
            <summary>Converts the specified <see cref="T:SkiaSharp.SKSizeI" /> structure to a <see cref="T:SkiaSharp.SKPointI" /> structure.</summary>
            <returns>The <see cref="T:SkiaSharp.SKPointI" /> structure structure to which this operator converts.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSizeI.op_Inequality(SkiaSharp.SKSizeI,SkiaSharp.SKSizeI)">
            <param name="sz1">The <see cref="T:SkiaSharp.SKSizeI" /> structure that is to the left of the inequality operator.</param>
            <param name="sz2">The <see cref="T:SkiaSharp.SKSizeI" /> structure that is to the right of the inequality operator.</param>
            <summary>Tests whether two <see cref="T:SkiaSharp.SKSizeI" /> structures are different.</summary>
            <returns>This operator returns true if either of the <see cref="P:SkiaSharp.SKSizeI.Width" /> and <see cref="P:SkiaSharp.SKSizeI.Height" /> properties of the two <see cref="T:SkiaSharp.SKSizeI" /> structures are unequal; otherwise false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSizeI.op_Subtraction(SkiaSharp.SKSizeI,SkiaSharp.SKSizeI)">
            <param name="sz1">The <see cref="T:SkiaSharp.SKSizeI" /> structure on the left side of the subtraction operator.</param>
            <param name="sz2">The <see cref="T:SkiaSharp.SKSizeI" /> structure on the right side of the subtraction operator.</param>
            <summary>Subtracts the width and height of one <see cref="T:SkiaSharp.SKSizeI" /> structure from the width and height of another <see cref="T:SkiaSharp.SKSizeI" /> structure.</summary>
            <returns>A <see cref="T:SkiaSharp.SKSizeI" /> that is the result of the subtraction operation.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSizeI.Subtract(SkiaSharp.SKSizeI,SkiaSharp.SKSizeI)">
            <param name="sz1">The <see cref="T:SkiaSharp.SKSizeI" /> structure on the left side of the subtraction operator.</param>
            <param name="sz2">The <see cref="T:SkiaSharp.SKSizeI" /> structure on the right side of the subtraction operator.</param>
            <summary>Subtracts the width and height of one <see cref="T:SkiaSharp.SKSizeI" /> structure from the width and height of another <see cref="T:SkiaSharp.SKSizeI" /> structure.</summary>
            <returns>A <see cref="T:SkiaSharp.SKSizeI" /> that is the result of the subtraction operation.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSizeI.ToPointI">
            <summary>Converts a <see cref="T:SkiaSharp.SKSizeI" /> structure to a <see cref="T:SkiaSharp.SKPointI" /> structure.</summary>
            <returns>Returns a <see cref="T:SkiaSharp.SKPointI" /> structure.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSizeI.ToString">
            <summary>Converts this <see cref="T:SkiaSharp.SKSizeI" /> to a human readable string.</summary>
            <returns>A string that represents this <see cref="T:SkiaSharp.SKSizeI" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKSizeI.Width">
            <summary>Gets or sets the horizontal component of this <see cref="T:SkiaSharp.SKSizeI" /> structure.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKStream">
            <summary>An abstraction for a source of bytes, which can be backed by memory, or a file, or something else.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKStream.GetMemoryBase">
            <summary>Returns the memory address of the data if the stream is a memory stream.</summary>
            <returns>Returns the memory address of the data, or IntPtr.Zero if the stream is not a memory stream.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKStream.HasLength">
            <summary>Gets a value indicating whether this stream can report it's total length.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKStream.HasPosition">
            <summary>Gets a value indicating whether this stream can report it's current position.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKStream.IsAtEnd">
            <summary>Gets a value indicating whether all the bytes in the stream have been read.</summary>
            <value>
                <para />
            </value>
            <remarks>This method may return true if there was an error, and the stream cannot be read anymore.</remarks>
        </member>
        <member name="P:SkiaSharp.SKStream.Length">
            <summary>Gets the total length of the stream. If this is not supported, the length will be reported as 0.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKStream.Move(System.Int64)">
            <param name="offset">The relative offset.</param>
            <summary>Seeks to an relative offset in the stream.</summary>
            <returns>Returns true if seeking is supported and the seek was successful, otherwise false.</returns>
            <remarks>If an attempt is made to move to a position outside the stream, the position will be set to the closest point within the stream (beginning or end).</remarks>
        </member>
        <member name="M:SkiaSharp.SKStream.Peek(System.IntPtr,System.Int32)">
            <param name="buffer">The buffer to read into.</param>
            <param name="size">The number of bytes to read.</param>
            <summary>Attempt to peek at <paramref name="size" /> bytes.</summary>
            <returns>Returns the number of bytes actually peeked/copied.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKStream.Position">
            <summary>Gets the current position in the stream. If this is not supported, the position will be reported as 0.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKStream.Read(System.Byte[],System.Int32)">
            <param name="buffer">The buffer to read into.</param>
            <param name="size">The number of bytes to read.</param>
            <summary>Reads a copy of the specified number of bytes into the provided buffer.</summary>
            <returns>Returns the number of bytes actually read.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKStream.Read(System.IntPtr,System.Int32)">
            <param name="buffer">The buffer to read into.</param>
            <param name="size">The number of bytes to read.</param>
            <summary>Reads a copy of the specified number of bytes into the provided buffer.</summary>
            <returns>Returns the number of bytes actually read.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKStream.ReadByte">
            <summary>Read a single byte.</summary>
            <returns>Returns the byte that was read.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKStream.ReadInt16">
            <summary>Read a single 16-bit integer.</summary>
            <returns>Returns the 16-bit integer that was read.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKStream.ReadInt32">
            <summary>Read a single 32-bit integer.</summary>
            <returns>Returns the 32-bit integer that was read.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKStream.ReadSByte">
            <summary>Read a single, signed byte.</summary>
            <returns>Returns the signed byte that was read.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKStream.ReadUInt16">
            <summary>Read a single, unsigned 16-bit integer.</summary>
            <returns>Returns the unsigned 16-bit integer that was read.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKStream.ReadUInt32">
            <summary>Read a single, unsigned 32-bit integer.</summary>
            <returns>Returns the unsigned 32-bit integer that was read.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKStream.Rewind">
            <summary>Rewinds to the beginning of the stream.</summary>
            <returns>Returns true if the stream is known to be at the beginning after this call returns.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKStream.Seek(System.Int32)">
            <param name="position">The absolute position.</param>
            <summary>Seeks to an absolute position in the stream.</summary>
            <returns>Returns true if seeking is supported and the seek was successful, otherwise false.</returns>
            <remarks>If an attempt is made to move to a position outside the stream, the position will be set to the closest point within the stream (beginning or end).</remarks>
        </member>
        <member name="M:SkiaSharp.SKStream.Skip(System.Int32)">
            <param name="size">The number of bytes to skip.</param>
            <summary>Moves the current position on by the specified number of bytes.</summary>
            <returns>Returns the actual number bytes that could be skipped.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKStreamAsset">
            <summary>An abstract, seekable stream with a known length.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKStreamMemory">
            <summary>An abstract, memory-based stream.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKStreamRewindable">
            <summary>An abstract, rewindable stream.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKStreamSeekable">
            <summary>An abstract, rewindable stream that supports the seek operation.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKStrokeCap">
            <summary>Various options for <see cref="P:SkiaSharp.SKPaint.StrokeCap" />.</summary>
            <remarks>This is the treatment that is applied to the beginning and end of each non-closed contour (e.g. lines).</remarks>
        </member>
        <member name="F:SkiaSharp.SKStrokeCap.Butt">
            <summary>Begin/end contours with no extension.</summary>
        </member>
        <member name="F:SkiaSharp.SKStrokeCap.Round">
            <summary>Begin/end contours with a semi-circle extension.</summary>
        </member>
        <member name="F:SkiaSharp.SKStrokeCap.Square">
            <summary>Begin/end contours with a half square extension.</summary>
        </member>
        <member name="T:SkiaSharp.SKStrokeJoin">
            <summary>Join style for stroking operations.</summary>
            <remarks>This is the treatment that is applied to corners in paths and rectangles.</remarks>
        </member>
        <member name="F:SkiaSharp.SKStrokeJoin.Bevel">
            <summary>Connect path segments with a flat bevel join.</summary>
        </member>
        <member name="F:SkiaSharp.SKStrokeJoin.Miter">
            <summary>Connect path segments with a sharp join.</summary>
        </member>
        <member name="F:SkiaSharp.SKStrokeJoin.Round">
            <summary>Connect path segments with a round join.</summary>
        </member>
        <member name="T:SkiaSharp.SKSurface">
            <summary>Represents the backend/results of drawing to a canvas.</summary>
            <remarks>
                <para>The surface represents the backend/results of drawing to a canvas. For raster drawing, the surface will be pixels, but (for example) when drawing into a PDF or <see cref="T:SkiaSharp.SKPicture" /> canvas, the surface stores the recorded commands.</para>
                <para />
                <para>The surface always has non-zero dimensions. If there is a request for a new surface, and either of the requested dimensions are zero, then <see langword="null" /> will be returned.</para>
                <para />
                <para>Once you create a surface with one of its <see cref="M:SkiaSharp.SKSurface.Create" /> methods, you can draw into the canvas returned by the <see cref="M:SkiaSharp.SKSurface.Canvas" /> property. Once the drawing is complete, you can retrieve an <see cref="T:SkiaSharp.SKImage" /> by calling the <see cref="M:SkiaSharp.SKSurface.Snapshot" /> method.</para>
                <para />
                <example>
                    <code lang="C#"><![CDATA[using (var surface = SKSurface.Create (width: 640, height: 480, SKImageInfo.PlatformColorType, SKAlphaType.Premul)) {
    // fetch the canvas where we draw into
    SKCanvas myCanvas = surface.Canvas;

    // Configure our brush
    var redBrush = new SKPaint () {
        Color = new SKColor (0xff, 0, 0),
	IsStroke = true
    };
    var blueBrush = new SKPaint () {
        Color = new SKColor (0, 0, 0xff),
	IsStroke = true
    };

    for (int i = 0; i < 64; i += 8)
        canvas.DrawRect (new SKRect (i, i, 256-i, 256-i), (i % 16 == 0) ? redBrush : blueBrush);

    // Save the artwork
    var pngEncodedFile = surface.Snapshot().Encode();
    File.WriteAllBytes ("demo.png", pngEncodedFile);
}
]]></code>
                </example>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKSurface.Canvas">
            <summary>Gets the canvas for this surface which can be used for drawing into it.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.Create(SkiaSharp.SKImageInfo)">
            <param name="info">Contains the image configuration parameters.</param>
            <summary>Creates a new surface with the specified image parameters.</summary>
            <returns>Returns the new surface if it could be created and the configuration is supported, otherwise <see langword="null" />.</returns>
            <remarks>This will create a buffer with the parameters specified in <paramref name="info" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.Create(SkiaSharp.SKPixmap)">
            <param name="pixmap">The pixmap.</param>
            <summary>Creates a new surface with the specified pixmap.</summary>
            <returns>Returns the new surface if it could be created and the configuration is supported, otherwise <see langword="null" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.Create(SkiaSharp.GRContext,SkiaSharp.GRBackendRenderTargetDesc)">
            <param name="context">The graphics context.</param>
            <param name="desc">The description of the existing render target.</param>
            <summary>Wraps a pre-existing 3D API rendering target as a surface.</summary>
            <returns>Returns the new surface if it could be created and the configuration is supported, otherwise <see langword="null" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.Create(SkiaSharp.GRContext,SkiaSharp.GRBackendTextureDesc)">
            <param name="context">The graphics context.</param>
            <param name="desc">The description of the existing texture.</param>
            <summary>Wraps a pre-existing 3D API texture as a surface.</summary>
            <returns>Returns the new surface if it could be created and the configuration is supported, otherwise <see langword="null" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.Create(SkiaSharp.GRContext,SkiaSharp.GRGlBackendTextureDesc)">
            <param name="context">The graphics context.</param>
            <param name="desc">The description of the existing OpenGL texture.</param>
            <summary>Wraps a pre-existing OpenGL texture as a surface.</summary>
            <returns>Returns the new surface if it could be created and the configuration is supported, otherwise <see langword="null" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.Create(SkiaSharp.SKImageInfo,SkiaSharp.SKSurfaceProps)">
            <param name="info">The image configuration parameters.</param>
            <param name="props">The surface property configuration.</param>
            <summary>Creates a new surface from the specified image parameters and surface properties.</summary>
            <returns>Returns the new surface if it could be created and the configuration is supported, otherwise <see langword="null" />.</returns>
            <remarks>This will create a buffer with the parameters specified in <paramref name="info&amp;nbsp;" />and the properties specified in <paramref name="props" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.Create(SkiaSharp.SKPixmap,SkiaSharp.SKSurfaceProps)">
            <param name="pixmap">The pixmap.</param>
            <param name="props">The surface property configuration.</param>
            <summary>Creates a new surface with the specified pixmap and surface properties.</summary>
            <returns>Returns the new surface if it could be created and the configuration is supported, otherwise <see langword="null" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.Create(SkiaSharp.GRContext,SkiaSharp.GRBackendRenderTargetDesc,SkiaSharp.SKSurfaceProps)">
            <param name="context">The graphics context.</param>
            <param name="desc">The description of the existing render target.</param>
            <param name="props">The surface property configuration.</param>
            <summary>Wraps a pre-existing 3D API rendering target as a surface.</summary>
            <returns>Returns the new surface if it could be created and the configuration is supported, otherwise <see langword="null" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.Create(SkiaSharp.GRContext,SkiaSharp.GRBackendTextureDesc,SkiaSharp.SKSurfaceProps)">
            <param name="context">The graphics context.</param>
            <param name="desc">The description of the existing texture.</param>
            <param name="props">The surface property configuration.</param>
            <summary>Wraps a pre-existing 3D API texture as a surface.</summary>
            <returns>Returns the new surface if it could be created and the configuration is supported, otherwise <see langword="null" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.Create(SkiaSharp.GRContext,SkiaSharp.GRGlBackendTextureDesc,SkiaSharp.SKSurfaceProps)">
            <param name="context">The graphics context.</param>
            <param name="desc">The description of the existing OpenGL texture.</param>
            <param name="props">The surface property configuration.</param>
            <summary>Wraps a pre-existing OpenGL texture as a surface.</summary>
            <returns>Returns the new surface if it could be created and the configuration is supported, otherwise <see langword="null" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.Create(SkiaSharp.GRContext,System.Boolean,SkiaSharp.SKImageInfo)">
            <param name="context">The graphics context.</param>
            <param name="budgeted">Whether an allocation should count against a cache budget.</param>
            <param name="info">The image configuration parameters.</param>
            <summary>Creates a new surface whose contents will be drawn to an offscreen render target, allocated by the surface.</summary>
            <returns>Returns the new surface if it could be created and the configuration is supported, otherwise <see langword="null" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.Create(SkiaSharp.SKImageInfo,System.IntPtr,System.Int32)">
            <param name="info">The image configuration parameters.</param>
            <param name="pixels">The pointer to an in memory-buffer that can hold the image as specified.</param>
            <param name="rowBytes">The number of bytes per row in the pixel buffer.</param>
            <summary>Creates a new surface with the specified image parameters using a provided buffer.</summary>
            <returns>Returns the new surface if it could be created and the configuration is supported, otherwise <see langword="null" />.</returns>
            <remarks>This will create a buffer that will be backend by the in-memory buffer provided in <paramref name="pixels" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.Create(SkiaSharp.GRContext,System.Boolean,SkiaSharp.SKImageInfo,System.Int32)">
            <param name="context">The graphics context.</param>
            <param name="budgeted">Whether an allocation should count against a cache budget.</param>
            <param name="info">The image configuration parameters.</param>
            <param name="sampleCount">The number of samples.</param>
            <summary>Creates a new surface whose contents will be drawn to an offscreen render target, allocated by the surface.</summary>
            <returns>Returns the new surface if it could be created and the configuration is supported, otherwise <see langword="null" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.Create(SkiaSharp.SKImageInfo,System.IntPtr,System.Int32,SkiaSharp.SKSurfaceProps)">
            <param name="info">The image configuration parameters.</param>
            <param name="pixels">The pointer to an in memory-buffer that can hold the image as specified.</param>
            <param name="rowBytes">The number of bytes per row in the pixel buffer.</param>
            <param name="props">The surface property configuration.</param>
            <summary>Creates a new surface from the specified image parameters, the provided buffer and surface properties.</summary>
            <returns>Returns the new surface if it could be created and the configuration is supported, otherwise <see langword="null" />.</returns>
            <remarks>This will create a buffer that will be backend by the in-memory buffer provided in <paramref name="pixels" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.Create(System.Int32,System.Int32,SkiaSharp.SKColorType,SkiaSharp.SKAlphaType)">
            <param name="width">The desired width for the surface.</param>
            <param name="height">The desired heigh for the surface.</param>
            <param name="colorType">The color type to use for the surface.</param>
            <param name="alphaType">The transparency mode to use for the surface.</param>
            <summary>Creates a new surface with the specified image parameters.</summary>
            <returns>Returns the new surface if it could be created and the configuration is supported, otherwise <see langword="null" />.</returns>
            <remarks>This will create a buffer that will be backend by the in-memory buffer.</remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.Create(SkiaSharp.GRContext,System.Boolean,SkiaSharp.SKImageInfo,System.Int32,SkiaSharp.SKSurfaceProps)">
            <param name="context">The graphics context.</param>
            <param name="budgeted">Whether an allocation should count against a cache budget.</param>
            <param name="info">The image configuration parameters.</param>
            <param name="sampleCount">The number of samples.</param>
            <param name="props">The surface property configuration.</param>
            <summary>Creates a new surface whose contents will be drawn to an offscreen render target, allocated by the surface.</summary>
            <returns>Returns the new surface if it could be created and the configuration is supported, otherwise <see langword="null" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.Create(System.Int32,System.Int32,SkiaSharp.SKColorType,SkiaSharp.SKAlphaType,SkiaSharp.SKSurfaceProps)">
            <param name="width">The desired width for the surface.</param>
            <param name="height">The desired height for the surface.</param>
            <param name="colorType">The color type to use for the surface.</param>
            <param name="alphaType">The transparency mode to use for the surface.</param>
            <param name="props">The surface property configuration.</param>
            <summary>Creates a new surface with the specified image parameters and surface properties.</summary>
            <returns>Returns the new surface if it could be created and the configuration is supported, otherwise <see langword="null" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.Create(System.Int32,System.Int32,SkiaSharp.SKColorType,SkiaSharp.SKAlphaType,System.IntPtr,System.Int32)">
            <param name="width">The desired width for the surface.</param>
            <param name="height">The desired height for the surface.</param>
            <param name="colorType">The color type to use for the surface.</param>
            <param name="alphaType">The transparency mode to use for the surface.</param>
            <param name="pixels">The pointer to an in memory-buffer that can hold the image as specified.</param>
            <param name="rowBytes">The number of bytes per row in the pixel buffer.</param>
            <summary>Creates a new surface with the specified image parameters using a provided buffer.</summary>
            <returns>Returns the new surface if it could be created and the configuration is supported, otherwise <see langword="null" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.Create(System.Int32,System.Int32,SkiaSharp.SKColorType,SkiaSharp.SKAlphaType,System.IntPtr,System.Int32,SkiaSharp.SKSurfaceProps)">
            <param name="width">The desired width for the surface.</param>
            <param name="height">The desired height for the surface.</param>
            <param name="colorType">The color type to use for the surface.</param>
            <param name="alphaType">The transparency mode to use for the surface.</param>
            <param name="pixels">The pointer to an in memory-buffer that can hold the image as specified.</param>
            <param name="rowBytes">The number of bytes per row in the pixel buffer.</param>
            <param name="props">The surface property configuration.</param>
            <summary>Creates a new surface with the specified image parameters using a provided buffer and surface properties.</summary>
            <returns>Returns the new surface if it could be created and the configuration is supported, otherwise <see langword="null" />.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.CreateAsRenderTarget(SkiaSharp.GRContext,SkiaSharp.GRBackendTextureDesc)">
            <param name="context">The graphics context.</param>
            <param name="desc">The description of the existing texture.</param>
            <summary>Wraps a pre-existing backend 3D API texture as a surface.</summary>
            <returns>Returns the new surface if it could be created and the configuration is supported, otherwise <see langword="null" />.</returns>
            <remarks>The <see cref="F:SkiaSharp.GRBackendTextureDescFlags.RenderTarget" /> flag must be set on <see cref="T:SkiaSharp.GRBackendTextureDesc" /> for this to succeed. The texture must remain valid for the lifetime of the surface.  </remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.CreateAsRenderTarget(SkiaSharp.GRContext,SkiaSharp.GRGlBackendTextureDesc)">
            <param name="context">The graphics context.</param>
            <param name="desc">The description of the existing OpenGL texture.</param>
            <summary>Wraps a pre-existing backend OpenGL texture as a surface.</summary>
            <returns>Returns the new surface if it could be created and the configuration is supported, otherwise <see langword="null" />.</returns>
            <remarks>The <see cref="F:SkiaSharp.GRBackendTextureDescFlags.RenderTarget" /> flag must be set on <see cref="T:SkiaSharp.GRGlBackendTextureDesc" /> for this to succeed. The texture must remain valid for the lifetime of the surface.  </remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.CreateAsRenderTarget(SkiaSharp.GRContext,SkiaSharp.GRBackendTextureDesc,SkiaSharp.SKSurfaceProps)">
            <param name="context">The graphics context.</param>
            <param name="desc">The description of the existing texture.</param>
            <param name="props">The surface property configuration.</param>
            <summary>Wraps a pre-existing backend 3D API texture as a surface.</summary>
            <returns>Returns the new surface if it could be created and the configuration is supported, otherwise <see langword="null" />.</returns>
            <remarks>The <see cref="F:SkiaSharp.GRBackendTextureDescFlags.RenderTarget" /> flag must be set on <see cref="T:SkiaSharp.GRBackendTextureDesc" /> for this to succeed. The texture must remain valid for the lifetime of the surface.  </remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.CreateAsRenderTarget(SkiaSharp.GRContext,SkiaSharp.GRGlBackendTextureDesc,SkiaSharp.SKSurfaceProps)">
            <param name="context">The graphics context.</param>
            <param name="desc">The description of the existing OpenGL texture.</param>
            <param name="props">The surface property configuration.</param>
            <summary>Wraps a pre-existing backend OpenGL texture as a surface.</summary>
            <returns>Returns the new surface if it could be created and the configuration is supported, otherwise <see langword="null" />.</returns>
            <remarks>The <see cref="F:SkiaSharp.GRBackendTextureDescFlags.RenderTarget" /> flag must be set on <see cref="T:SkiaSharp.GRGlBackendTextureDesc" /> for this to succeed. The texture must remain valid for the lifetime of the surface.  </remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.Draw(SkiaSharp.SKCanvas,System.Single,System.Single,SkiaSharp.SKPaint)">
            <param name="canvas">The canvas to draw on.</param>
            <param name="x">The destination x-coordinate for the surface.</param>
            <param name="y">The destination y-coordinate for the surface.</param>
            <param name="paint">The paint to use when drawing the surface, or <see langword="null" />.</param>
            <summary>Draws the current surface on the specified canvas.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.PeekPixels">
            <summary>Returns the pixels, if they are available.</summary>
            <returns>Returns the pixels, if they are available, otherwise <see langword="null" />.</returns>
            <remarks>If the pixels are available, then the surface is only valid until the surface changes in any way, in which case the pixmap becomes invalid.</remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.PeekPixels(SkiaSharp.SKPixmap)">
            <param name="pixmap">The pixmap to receive the pixel information.</param>
            <summary>Returns the pixmap of the surface.</summary>
            <returns>Returns <see langword="true" /> on success, or <see langword="false" /> if the surface does not have access to pixel data.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.ReadPixels(SkiaSharp.SKImageInfo,System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <param name="dstInfo">The image information describing the destination pixel buffer.</param>
            <param name="dstPixels">The pixel buffer to read the pixel data into.</param>
            <param name="dstRowBytes">The number of bytes in each row of in the destination buffer.</param>
            <param name="srcX">The source x-coordinate to start reading from.</param>
            <param name="srcY">The source y-coordinate to start reading from.</param>
            <summary>Copies the pixels from the surface into the specified buffer.</summary>
            <returns>Returns <see langword="true" /> if the pixels were read, or <see langword="false" /> if there was an error.</returns>
            <remarks>This method may return <see langword="false" /> if the source rectangle [<paramref name="srcX" />, <paramref name="srcY" />, dstInfo.Width, dstInfo.Height] does not intersect the surface, or if the color type/alpha type could not be converted to the destination types.</remarks>
        </member>
        <member name="M:SkiaSharp.SKSurface.Snapshot">
            <summary>Takes a snapshot of the surface and returns it as an image.</summary>
            <returns>
                <para>An <see cref="T:SkiaSharp.SKImage" /> that contains a snapshot of the current image.</para>
                <para />
            </returns>
            <remarks>
                <para>You can use this method to take a snapshot of the image</para>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKSurface.SurfaceProps">
            <summary>Gets the surface property configuration.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKSurfaceProps">
            <summary>Describes properties and constraints of a given <see cref="T:SkiaSharp.SKSurface" />.</summary>
            <remarks>The rendering engine can parse these during drawing, and can sometimes optimize its performance (e.g. disabling an expensive feature).</remarks>
        </member>
        <member name="P:SkiaSharp.SKSurfaceProps.Flags">
            <summary>Gets or sets the flags.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKSurfaceProps.PixelGeometry">
            <summary>Gets or sets the LCD geometry of each pixel on the surface.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKSurfacePropsFlags">
            <summary>Flags for the <see cref="T:SkiaSharp.SKSurfaceProps" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKSurfacePropsFlags.None">
            <summary>Use default properties.</summary>
        </member>
        <member name="F:SkiaSharp.SKSurfacePropsFlags.UseDeviceIndependentFonts">
            <summary>Use device independent fonts.</summary>
        </member>
        <member name="T:SkiaSharp.SKSvgCanvas">
            <summary>A specialized <see cref="T:SkiaSharp.SKCanvas" /> which generates SVG commands from its draw calls.</summary>
            <remarks>The canvas may buffer some drawing calls, so the output is not guaranteed to be valid or complete until the canvas instance is deleted.</remarks>
        </member>
        <member name="M:SkiaSharp.SKSvgCanvas.Create(SkiaSharp.SKRect,SkiaSharp.SKXmlWriter)">
            <param name="bounds">The initial SVG viewport (viewBox attribute on the root SVG element).</param>
            <param name="writer">The writer to recieve the XML data.</param>
            <summary>Creates a new instance of <see cref="T:SkiaSharp.SKSvgCanvas" /> which writes to the specified XML writer.</summary>
            <returns>Returns the new canvas.</returns>
            <remarks>Ownership of the XML writer is not transfered to the canvas, but it must stay valid during the lifetime of the returned canvas.</remarks>
        </member>
        <member name="T:SkiaSharp.SKSwizzle">
            <summary>Various utility methods for when swizzling pixels.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSwizzle.SwapRedBlue(System.IntPtr,System.IntPtr,System.Int32)">
            <param name="dest">The destination pixel buffer.</param>
            <param name="src">The source pixel buffer.</param>
            <param name="count">The size of the pixel buffers.</param>
            <summary>Swizzles the byte order of 32-bit pixels, swapping R and B. (RGBA &lt;-&gt; BGRA)</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKSwizzle.SwapRedBlue(System.IntPtr,System.Int32)">
            <param name="pixels">The pixel buffer to swizzle.</param>
            <param name="count">The size of the pixel buffers.</param>
            <summary>Swizzles the byte order of 32-bit pixels, swapping R and B. (RGBA &lt;-&gt; BGRA)</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKTextAlign">
            <summary>Possible text alignment values.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKTextAlign.Center">
            <summary>Center the text.</summary>
        </member>
        <member name="F:SkiaSharp.SKTextAlign.Left">
            <summary>Left align the text.</summary>
        </member>
        <member name="F:SkiaSharp.SKTextAlign.Right">
            <summary>Right align the text.</summary>
        </member>
        <member name="T:SkiaSharp.SKTextEncoding">
            <summary>Possible text encodings.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKTextEncoding.GlyphId">
            <summary>The buffer contains glyph ids.</summary>
        </member>
        <member name="F:SkiaSharp.SKTextEncoding.Utf16">
            <summary>The buffer contains UTF-16 encoded characters.</summary>
        </member>
        <member name="F:SkiaSharp.SKTextEncoding.Utf32">
            <summary>The buffer contains UTF-32 encoded characters.</summary>
        </member>
        <member name="F:SkiaSharp.SKTextEncoding.Utf8">
            <summary>The buffer contains UTF-8 encoded characters.</summary>
        </member>
        <member name="T:SkiaSharp.SKTransferFunctionBehavior">
            <summary>Various flags to be used with <see cref="P:SkiaSharp.SKCodecOptions.PremulBehavior" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKTransferFunctionBehavior.Ignore">
            <summary>Premultiplies, unpremultiplies, and blends ignoring the transfer function. Pixels are treated as if they are linear, regardless of their transfer function encoding.</summary>
        </member>
        <member name="F:SkiaSharp.SKTransferFunctionBehavior.Respect">
            <summary>Converts to a linear space before premultiplying, unpremultiplying, or blending.</summary>
        </member>
        <member name="T:SkiaSharp.SKTypeface">
            <summary>Represents a specific typeface and intrinsic style of a font.</summary>
            <remarks>
                <para>This is used in the paint, along with optionally algorithmic settings like <see cref="P:SkiaSharp.SKPaint.TextSize" />, <see cref="P:SkiaSharp.SKPaint.TextSkewX" />  <see cref="P:SkiaSharp.SKPaint.TextScaleX" />  <see cref="P:SkiaSharp.SKPaint.FakeBoldText" />, to specify how text appears when drawn (and measured). </para>
                <para>Typeface objects are immutable, and so they can be shared between threads.</para>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKTypeface.CharsToGlyphs(System.String,System.UInt16[]@)">
            <param name="chars">The string containing characters.</param>
            <param name="glyphs">Destination for the corresponding glyph IDs for each character.</param>
            <summary>Given a string, optionally return their corresponding glyph IDs.</summary>
            <returns>The number of number of continuous non-zero glyph IDs computed from the beginning of chars.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKTypeface.CharsToGlyphs(System.IntPtr,System.Int32,SkiaSharp.SKEncoding,System.UInt16[]@)">
            <param name="str">The buffer of character codes.</param>
            <param name="strlen">The length of the buffer.</param>
            <param name="encoding">How the characters are encoded.</param>
            <param name="glyphs">Destination for the corresponding glyph IDs for each character.</param>
            <summary>Given a buffer containing character codes, of the specified encoding, optionally return their corresponding glyph IDs.</summary>
            <returns>The number of number of continuous non-zero glyph IDs computed from the beginning of chars.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKTypeface.CountGlyphs(System.String)">
            <param name="str">The string containing characters.</param>
            <summary>Returns the number of glyphs on the string.</summary>
            <returns>The number of number of continuous non-zero glyph IDs computed from the beginning of chars.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKTypeface.CountGlyphs(System.IntPtr,System.Int32,SkiaSharp.SKEncoding)">
            <param name="str">The buffer of character codes.</param>
            <param name="strLen">The length of the buffer.</param>
            <param name="encoding">How the characters are encoded.</param>
            <summary>Returns the number of glyphs on the specified buffer with the specified length and encoding.</summary>
            <returns>The number of number of continuous non-zero glyph IDs computed from the beginning of chars.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKTypeface.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:SkiaSharp.SKTypeface.FamilyName">
            <summary>Gets the family name for the typeface.</summary>
            <value>
                <para />
            </value>
            <remarks>The family name will always be returned encoded as UTF8, but the language of the name is whatever the host platform chooses.</remarks>
        </member>
        <member name="P:SkiaSharp.SKTypeface.FontSlant">
            <summary>Gets the font slant for the typeface.</summary>
            <value>
                <para />
            </value>
            <remarks>This may be one of the values in <see cref="T:SkiaSharp.SKFontStyleSlant" />.</remarks>
        </member>
        <member name="P:SkiaSharp.SKTypeface.FontWeight">
            <summary>Gets the font weight for the typeface.</summary>
            <value>
                <para />
            </value>
            <remarks>This may be one of the values in <see cref="T:SkiaSharp.SKFontStyleWeight" />.</remarks>
        </member>
        <member name="P:SkiaSharp.SKTypeface.FontWidth">
            <summary>Gets the font width for the typeface.</summary>
            <value>
                <para />
            </value>
            <remarks>This may be one of the values in <see cref="T:SkiaSharp.SKFontStyleWidth" />.</remarks>
        </member>
        <member name="M:SkiaSharp.SKTypeface.FromData(SkiaSharp.SKData,System.Int32)">
            <param name="data">The input data.</param>
            <param name="index">The font face index.</param>
            <summary>Returns a new typeface given data.</summary>
            <returns>Returns a new typeface, or <paramref name="null" /> if the file does not exist, or is not a valid font file.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKTypeface.FromFamilyName(System.String,SkiaSharp.SKTypefaceStyle)">
            <param name="familyName">The name of the font family. May be <paramref name="null" />.</param>
            <param name="style">The style (normal, bold, italic) of the typeface.</param>
            <summary>Returns a new instance to a typeface that most closely matches the requested family name and style.</summary>
            <returns>Returns to the closest-matching typeface.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKTypeface.FromFamilyName(System.String,SkiaSharp.SKFontStyleWeight,SkiaSharp.SKFontStyleWidth,SkiaSharp.SKFontStyleSlant)">
            <param name="familyName">The name of the font family. May be <paramref name="null" />.</param>
            <param name="weight">The weight of the typeface.</param>
            <param name="width">The width of the typeface.</param>
            <param name="slant">The slant of the typeface.</param>
            <summary>Return a new instance to a typeface that most closely matches the requested family name and style.</summary>
            <returns>Returns to the closest-matching typeface.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKTypeface.FromFamilyName(System.String,System.Int32,System.Int32,SkiaSharp.SKFontStyleSlant)">
            <param name="familyName">The name of the font family. May be <paramref name="null" />.</param>
            <param name="weight">The weight of the typeface.</param>
            <param name="width">The width of the typeface.</param>
            <param name="slant">The slant of the typeface.</param>
            <summary>Return a new instance to a typeface that most closely matches the requested family name and style.</summary>
            <returns>Returns to the closest-matching typeface.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKTypeface.FromFile(System.String,System.Int32)">
            <param name="path">The path of the file.</param>
            <param name="index">The font face index.</param>
            <summary>Returns a new typeface given a file. </summary>
            <returns>Returns a new typeface, or <paramref name="null" /> if the file does not exist, or is not a valid font file.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKTypeface.FromStream(SkiaSharp.SKStreamAsset,System.Int32)">
            <param name="stream">The input stream.</param>
            <param name="index">The font face index.</param>
            <summary>Returns a new typeface given a stream. Ownership of the stream is transferred, so the caller must not reference it again.</summary>
            <returns>Returns a new typeface, or <paramref name="null" /> if the file does not exist, or is not a valid font file.</returns>
            <remarks>
                <para />
                <example>
                    <code lang="C#"><![CDATA[var stream = new SKFileStream (“myfont.ttf”);
using (var tf = SKTypeface.FromStream (stream)) {
    paint.Color = XamDkBlue;
    paint.TextSize = 60;
    paint.Typeface = tf;

    canvas.DrawText (text, 50, 100, paint);
}
]]></code>
                </example>
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKTypeface.FromStream(System.IO.Stream,System.Int32)">
            <param name="stream">The input stream.</param>
            <param name="index">The font face index.</param>
            <summary>Returns a new typeface given a stream. Ownership of the stream is transferred, so the caller must not reference it again.</summary>
            <returns>Returns a new typeface, or <paramref name="null" /> if the file does not exist, or is not a valid font file.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKTypeface.FromTypeface(SkiaSharp.SKTypeface,SkiaSharp.SKTypefaceStyle)">
            <param name="typeface">The typeface to use for the family name.</param>
            <param name="style">The style (normal, bold, italic) of the type face.</param>
            <summary>Return a new reference to the typeface that most closely matches the requested typeface and specified style</summary>
            <returns>Returns to the closest-matching typeface.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKTypeface.GetTableData(System.UInt32)">
            <param name="tag">The table tag to get the data for.</param>
            <summary>Returns the contents of the table data for the specified tag.</summary>
            <returns>Returns the contents, if it exists, otherwise throws.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKTypeface.GetTableTags">
            <summary>Returns the list of table tags in the font.</summary>
            <returns>
                <para />
            </returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKTypeface.OpenStream">
            <summary>Returns a stream for the contents of the font data.</summary>
            <returns>Returns a stream for the contents of the font data, or <see langword="null" /> on failure.</returns>
            <remarks>The caller is responsible for deleting the stream.</remarks>
        </member>
        <member name="M:SkiaSharp.SKTypeface.OpenStream(System.Int32@)">
            <param name="ttcIndex">The TrueTypeCollection index of this typeface within the stream, or 0 if the stream is not a collection.</param>
            <summary>Returns a stream for the contents of the font data.</summary>
            <returns>Returns a stream for the contents of the font data, or <see langword="null" /> on failure.</returns>
            <remarks>The caller is responsible for deleting the stream.</remarks>
        </member>
        <member name="P:SkiaSharp.SKTypeface.Style">
            <summary>Gets the the typeface's intrinsic style attributes.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKTypeface.TryGetTableData(System.UInt32,System.Byte[]@)">
            <param name="tag">The table tag to get the data for.</param>
            <param name="tableData">The contents of the table data for the specified tag.</param>
            <summary>Returns the contents of the table data for the specified tag.</summary>
            <returns>Returns true if the content exists, otherwise false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKTypeface.UnitsPerEm">
            <summary>Gets the units-per-em value for this typeface, or zero if there is an error.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKTypefaceStyle">
            <summary>Specifies the intrinsic style attributes of a given typeface.</summary>
            <remarks />
        </member>
        <member name="F:SkiaSharp.SKTypefaceStyle.Bold">
            <summary>Bold</summary>
        </member>
        <member name="F:SkiaSharp.SKTypefaceStyle.BoldItalic">
            <summary>Bold and Italic, convenience definition.</summary>
        </member>
        <member name="F:SkiaSharp.SKTypefaceStyle.Italic">
            <summary>Italic</summary>
        </member>
        <member name="F:SkiaSharp.SKTypefaceStyle.Normal">
            <summary>Normal</summary>
        </member>
        <member name="T:SkiaSharp.SKVertexMode">
            <summary>Various mode with which to interpret triangles when invoking <see cref="M:SkiaSharp.SKCanvas.DrawVertices" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKVertexMode.TriangleFan">
            <summary>The vertices are a triangle fan.</summary>
        </member>
        <member name="F:SkiaSharp.SKVertexMode.Triangles">
            <summary>The vertices are a triangle list.</summary>
        </member>
        <member name="F:SkiaSharp.SKVertexMode.TriangleStrip">
            <summary>The vertices are a triangle strip.</summary>
        </member>
        <member name="T:SkiaSharp.SKVertices">
            <summary>Represents an immutable set of vertex data that can be used with <see cref="M:SkiaSharp.SKCanvas.DrawVertices" />.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKVertices.CreateCopy(SkiaSharp.SKVertexMode,SkiaSharp.SKPoint[],SkiaSharp.SKColor[])">
            <param name="vmode">How to interpret the array of vertices.</param>
            <param name="positions">The array of vertices for the mesh.</param>
            <param name="colors">The color for each vertex, to be interpolated across the triangle. May be <see langword="null" />.</param>
            <summary>Creates a new <see cref="T:SkiaSharp.SKVertices" /> instance, making a copy of the vertices and related data.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKVertices" /> instance.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKVertices.CreateCopy(SkiaSharp.SKVertexMode,SkiaSharp.SKPoint[],SkiaSharp.SKPoint[],SkiaSharp.SKColor[])">
            <param name="vmode">How to interpret the array of vertices.</param>
            <param name="positions">The array of vertices for the mesh.</param>
            <param name="texs">The coordinates in texture space (not uv space) for each vertex. May be <see langword="null" />.</param>
            <param name="colors">The color for each vertex, to be interpolated across the triangle. May be <see langword="null" />.</param>
            <summary>Creates a new <see cref="T:SkiaSharp.SKVertices" /> instance, making a copy of the vertices and related data.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKVertices" /> instance.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKVertices.CreateCopy(SkiaSharp.SKVertexMode,SkiaSharp.SKPoint[],SkiaSharp.SKPoint[],SkiaSharp.SKColor[],System.UInt16[])">
            <param name="vmode">How to interpret the array of vertices.</param>
            <param name="positions">The array of vertices for the mesh.</param>
            <param name="texs">The coordinates in texture space (not uv space) for each vertex. May be <see langword="null" />.</param>
            <param name="colors">The color for each vertex, to be interpolated across the triangle. May be <see langword="null" />.</param>
            <param name="indices">The array of indices to reference into the vertex (texture coordinates, colors) array.</param>
            <summary>Creates a new <see cref="T:SkiaSharp.SKVertices" /> instance, making a copy of the vertices and related data.</summary>
            <returns>Returns the new <see cref="T:SkiaSharp.SKVertices" /> instance.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKVertices.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKWStream">
            <summary>An abstraction for writing a stream of bytes, which can be backed by memory, or a file, or something else.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="P:SkiaSharp.SKWStream.BytesWritten">
            <summary>Gets the number of bytes written so far.</summary>
            <value>
                <para />
            </value>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKWStream.Flush">
            <summary>Flush the buffer to the underlying destination.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKWStream.GetSizeOfPackedUInt32(System.UInt32)">
            <param name="value">The value to store.</param>
            <summary>Returns the number of bytes in the stream required to store the specified value.</summary>
            <returns>Returns the number of bytes required.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKWStream.NewLine">
            <summary>Write a newline character to the stream, if one was not already written.</summary>
            <returns>Returns true if the write succeeded, otherwise false.</returns>
            <remarks>If the last character was a newline character, this method does nothing.</remarks>
        </member>
        <member name="M:SkiaSharp.SKWStream.Write(System.Byte[],System.Int32)">
            <param name="buffer">The data buffer to write.</param>
            <param name="size">The number of bytes from the buffer to write.</param>
            <summary>Write the provided data to the stream.</summary>
            <returns>Returns true if the write succeeded, otherwise false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKWStream.Write16(System.UInt16)">
            <param name="value">The unsigned 16-bit integer to write.</param>
            <summary>Write a single, unsigned 16-bit integer to the stream.</summary>
            <returns>Returns true if the write succeeded, otherwise false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKWStream.Write32(System.UInt32)">
            <param name="value">The unsigned 32-bit integer to write.</param>
            <summary>Write a single, unsigned 32-bit integer to the stream.</summary>
            <returns>Returns true if the write succeeded, otherwise false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKWStream.Write8(System.Byte)">
            <param name="value">The byte to write.</param>
            <summary>Write a single byte to the stream.</summary>
            <returns>Returns true if the write succeeded, otherwise false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKWStream.WriteBigDecimalAsText(System.Int64,System.Int32)">
            <param name="value">The 64-bit integer to write.</param>
            <param name="digits">The number of digits (length) to use when writing.</param>
            <summary>Write a single 64-bit integer to the stream as a string.</summary>
            <returns>Returns true if the write succeeded, otherwise false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKWStream.WriteBool(System.Boolean)">
            <param name="value">The boolean to write.</param>
            <summary>Write a single boolean to the stream.</summary>
            <returns>Returns true if the write succeeded, otherwise false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKWStream.WriteDecimalAsTest(System.Int32)">
            <param name="value">The 32-bit integer to write.</param>
            <summary>Write a 32-bit integer to the stream as a string.</summary>
            <returns>Returns true if the write succeeded, otherwise false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKWStream.WriteHexAsText(System.UInt32,System.Int32)">
            <param name="value">The unsigned, 32-bit integer to write.</param>
            <param name="digits">The number of digits (length) to use when writing.</param>
            <summary>Write an unsigned, 32-bit integer to the stream as a hexadecimal string.</summary>
            <returns>Returns true if the write succeeded, otherwise false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKWStream.WritePackedUInt32(System.UInt32)">
            <param name="value">The unsigned 32-bit integer to write.</param>
            <summary>Write a single, unsigned 32-bit integer to the stream in the smallest space possible.</summary>
            <returns>Returns true if the write succeeded, otherwise false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKWStream.WriteScalar(System.Single)">
            <param name="value">The floating-point number to write.</param>
            <summary>Write a single, floating-point number to the stream.</summary>
            <returns>Returns true if the write succeeded, otherwise false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKWStream.WriteScalarAsText(System.Single)">
            <param name="value">The floating-point number to write.</param>
            <summary>Write a single, floating-point number to the stream as text.</summary>
            <returns>Returns true if the write succeeded, otherwise false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKWStream.WriteStream(SkiaSharp.SKStream,System.Int32)">
            <param name="input">The stream to write.</param>
            <param name="length">The number of bytes to write.</param>
            <summary>Write the contents of the specified stream to this stream.</summary>
            <returns>Returns true if the write succeeded, otherwise false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKWStream.WriteText(System.String)">
            <param name="value">The string to write.</param>
            <summary>Write a string to the stream as a string.</summary>
            <returns>Returns true if the write succeeded, otherwise false.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKXmlStreamWriter">
            <summary>A stream-based XML writer.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="C:SkiaSharp.SKXmlStreamWriter(SkiaSharp.SKWStream)">
            <param name="stream">The stream to write the XML to.</param>
            <summary>Creates a new instance of <see cref="T:SkiaSharp.SKXmlStreamWriter" /> which writes to the provided stream.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.SKXmlStreamWriter.Dispose(System.Boolean)">
            <param name="disposing">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:SkiaSharp.SKXmlWriter">
            <summary>An abstract, XML writer.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="T:SkiaSharp.SKZeroInitialized">
            <summary>Whether or not the memory passed to <see cref="M:SkiaSharp.SKCodec.GetPixels" /> is zero initialized</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="F:SkiaSharp.SKZeroInitialized.No">
            <summary>The memory passed has not been initialized to zero, so the codec must write all zeroes to memory.</summary>
        </member>
        <member name="F:SkiaSharp.SKZeroInitialized.Yes">
            <summary>The memory passed is zero initialized, so the codec may take advantage of this by skipping writing zeroes.</summary>
        </member>
        <member name="T:SkiaSharp.StringUtilities">
            <summary>Various utility methods for when working with strings and text.</summary>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.StringUtilities.GetEncodedText(System.String,SkiaSharp.SKTextEncoding)">
            <param name="text">The text to encode.</param>
            <param name="encoding">The encoding to use.</param>
            <summary>Encodes the specified string using the encoding as a byte array.</summary>
            <returns>Returns the encoded text as a byte array.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.StringUtilities.GetString(System.Byte[],SkiaSharp.SKTextEncoding)">
            <param name="data">The bytes representing text.</param>
            <param name="encoding">The encoding to use.</param>
            <summary>Decodes the specified bytes as a string.</summary>
            <returns>Returns the decoded text.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.StringUtilities.GetString(System.IntPtr,System.Int32,SkiaSharp.SKTextEncoding)">
            <param name="data">The pointer to the bytes representing text.</param>
            <param name="dataLength">The number of bytes to decode.</param>
            <param name="encoding">The encoding to use.</param>
            <summary>Decodes the specified bytes as a string.</summary>
            <returns>Returns the decoded text.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.StringUtilities.GetString(System.Byte[],System.Int32,System.Int32,SkiaSharp.SKTextEncoding)">
            <param name="data">The bytes representing text.</param>
            <param name="index">The index to start decoding.</param>
            <param name="count">The number of bytes to decode.</param>
            <param name="encoding">The encoding to use.</param>
            <summary>Encodes the specified string using the encoding as a byte array.</summary>
            <returns>Returns the decoded text.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
        <member name="M:SkiaSharp.StringUtilities.GetUnicodeCharacterCode(System.String,SkiaSharp.SKTextEncoding)">
            <param name="character">The character to get the unicode character code.</param>
            <param name="encoding">The encoding of the string.</param>
            <summary>Returns the Unicode character code for the specified character.</summary>
            <returns>Returns the Unicode character code.</returns>
            <remarks>
                <para />
            </remarks>
        </member>
    </members>
</doc>
